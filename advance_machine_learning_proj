{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/adeekodaniel/DataScienceProj/blob/main/advance_machine_learning_proj\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 164,
      "metadata": {
        "id": "PcC6HojU8LZU"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import missingno as msno\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import OneHotEncoder, StandardScaler, PolynomialFeatures\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline, make_pipeline\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "from sklearn.metrics import explained_variance_score\n",
        "from sklearn.linear_model import LinearRegression, Ridge\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.dummy import DummyRegressor\n",
        "from sklearn.model_selection import GridSearchCV, ParameterGrid\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "\n",
        "import warnings \n",
        "warnings.filterwarnings('ignore')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "nmnmCaPf9LA5"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv('https://raw.githubusercontent.com/adeekodaniel/DataScienceProj/main/adverts.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "myljBeP79K9y",
        "outputId": "7b80420f-2c2d-45f9-b14a-f8256e69a277"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    public_reference   mileage reg_code standard_colour  standard_make  \\\n",
              "0    202006039777689       0.0      NaN            Grey          Volvo   \n",
              "1    202007020778260  108230.0       61            Blue         Jaguar   \n",
              "2    202007020778474    7800.0       17            Grey          SKODA   \n",
              "3    202007080986776   45000.0       16           Brown       Vauxhall   \n",
              "4    202007161321269   64000.0       64            Grey     Land Rover   \n",
              "5    202009304412074   16000.0       17            Blue           Audi   \n",
              "6    202007080998445   24075.0       17             Red       Vauxhall   \n",
              "7    202009244143980   99000.0       13          Bronze     Land Rover   \n",
              "8    202010014442611  111236.0       08           Black  Mercedes-Benz   \n",
              "9    202006230431327    9500.0       19           White     Land Rover   \n",
              "10   202007151278313   77000.0       60            Grey     Volkswagen   \n",
              "11   202007161303602   24487.0       17           Black        Peugeot   \n",
              "12   202009173867934    4765.0       69           White          SKODA   \n",
              "13   202009234108830   18214.0       19          Silver           SEAT   \n",
              "14   202010014440649   31534.0       17            Grey           MINI   \n",
              "15   202010144986791   38603.0       16            Blue            BMW   \n",
              "16   202010155026725   52023.0       66            Blue     Volkswagen   \n",
              "17   201911043995897       5.0      NaN             NaN         Nissan   \n",
              "18   202008142485309   29500.0       12            Grey  Mercedes-Benz   \n",
              "19   202008272998331       0.0      NaN           White     Volkswagen   \n",
              "20   202009183894045   35300.0       18            Grey       Vauxhall   \n",
              "21   202010014441671   47299.0       65           Black         Nissan   \n",
              "22   202010265453679    3354.0       19            Blue          SKODA   \n",
              "23   202007070979378   90000.0       09          Silver     Mitsubishi   \n",
              "24   202007080996950   98000.0       12           Black       Vauxhall   \n",
              "25   202008042070611   49585.0        B             NaN        Ferrari   \n",
              "26   202010155027040    2802.0       19            Grey        Citroen   \n",
              "27   202010235355785    7990.0       19           Black         Toyota   \n",
              "28   202006230431505   11961.0       19             Red          Volvo   \n",
              "29   202009173867342   73000.0       61            Grey         Toyota   \n",
              "30   202010155027121   17020.0       17            Grey       Vauxhall   \n",
              "31   201905047632015    7989.0       18            Blue            Kia   \n",
              "32   201905097776109  180000.0       64           White          SKODA   \n",
              "33   201910012817451    4445.0       69           White          Volvo   \n",
              "34   201910022887138   12999.0       69           White        Peugeot   \n",
              "35   202001035748230    5000.0       69            Blue          SKODA   \n",
              "36   202001296703520    3699.0       69           White        Renault   \n",
              "37   202001306737473       0.0      NaN           White           Fiat   \n",
              "38   202002056992609   10900.0       19            Blue          Volvo   \n",
              "39   202002137274498   35000.0       64           Black     Volkswagen   \n",
              "\n",
              "          standard_model vehicle_condition  year_of_registration  price  \\\n",
              "0                   XC90               NEW                   NaN  73970   \n",
              "1                     XF              USED                2011.0   7000   \n",
              "2                   Yeti              USED                2017.0  14000   \n",
              "3                  Mokka              USED                2016.0   7995   \n",
              "4      Range Rover Sport              USED                2015.0  26995   \n",
              "5                     S5              USED                2017.0  29000   \n",
              "6                   Viva              USED                2017.0   5861   \n",
              "7            Range Rover              USED                2013.0  24475   \n",
              "8                S Class              USED                2008.0   6995   \n",
              "9            Range Rover              USED                2019.0  79995   \n",
              "10                Passat              USED                2010.0   4499   \n",
              "11                   208              USED                2017.0   8795   \n",
              "12               Octavia              USED                2019.0  16990   \n",
              "13                  Leon              USED                2019.0  14290   \n",
              "14                 Hatch              USED                2017.0  19000   \n",
              "15  2 Series Gran Tourer              USED                2016.0  16000   \n",
              "16                  Golf              USED                2016.0  13500   \n",
              "17               X-Trail               NEW                   NaN  27595   \n",
              "18               C Class              USED                2012.0   9495   \n",
              "19               T-Cross               NEW                   NaN  25000   \n",
              "20                 Corsa              USED                2018.0   7293   \n",
              "21               Qashqai              USED                2016.0  11500   \n",
              "22                Citigo              USED                2019.0   7999   \n",
              "23                  Colt              USED                2009.0   1795   \n",
              "24             Astra GTC              USED                2012.0   3795   \n",
              "25                   308              USED                1984.0  54475   \n",
              "26  Grand C4 SpaceTourer              USED                2019.0  16995   \n",
              "27                 Yaris              USED                2019.0  11147   \n",
              "28                  XC60              USED                2019.0  32995   \n",
              "29                 Verso              USED                2011.0   4290   \n",
              "30                 Corsa              USED                2017.0   6795   \n",
              "31               Sorento              USED                2018.0  30000   \n",
              "32               Octavia              USED                2014.0   3989   \n",
              "33                   V40              USED                2019.0  16980   \n",
              "34                   208              USED                2019.0   9995   \n",
              "35               Octavia              USED                2019.0  12490   \n",
              "36                Koleos              USED                2019.0  24899   \n",
              "37                 Panda               NEW                   NaN  13999   \n",
              "38                   V60              USED                2019.0  28500   \n",
              "39                  Golf              USED                2014.0  14500   \n",
              "\n",
              "      body_type  crossover_car_and_van              fuel_type  \n",
              "0           SUV                  False  Petrol Plug-in Hybrid  \n",
              "1        Saloon                  False                 Diesel  \n",
              "2           SUV                  False                 Petrol  \n",
              "3     Hatchback                  False                 Diesel  \n",
              "4           SUV                  False                 Diesel  \n",
              "5   Convertible                  False                 Petrol  \n",
              "6     Hatchback                  False                 Petrol  \n",
              "7           SUV                  False                 Diesel  \n",
              "8     Limousine                  False                 Diesel  \n",
              "9           SUV                  False                 Diesel  \n",
              "10       Saloon                  False                 Diesel  \n",
              "11    Hatchback                  False                 Petrol  \n",
              "12       Estate                  False                 Petrol  \n",
              "13    Hatchback                  False                 Petrol  \n",
              "14    Hatchback                  False                 Petrol  \n",
              "15          MPV                  False                 Diesel  \n",
              "16       Estate                  False                 Diesel  \n",
              "17          SUV                  False                 Diesel  \n",
              "18       Saloon                  False                 Petrol  \n",
              "19          SUV                  False                 Petrol  \n",
              "20    Hatchback                  False                 Petrol  \n",
              "21          SUV                  False                 Diesel  \n",
              "22    Hatchback                  False                 Petrol  \n",
              "23    Hatchback                  False                 Petrol  \n",
              "24        Coupe                  False                 Diesel  \n",
              "25  Convertible                  False                 Petrol  \n",
              "26          MPV                  False                 Petrol  \n",
              "27    Hatchback                  False                 Petrol  \n",
              "28          SUV                  False          Diesel Hybrid  \n",
              "29          MPV                  False                 Diesel  \n",
              "30    Hatchback                  False                 Petrol  \n",
              "31          SUV                  False                 Diesel  \n",
              "32    Hatchback                  False                 Diesel  \n",
              "33    Hatchback                  False                 Diesel  \n",
              "34    Hatchback                  False                 Petrol  \n",
              "35    Hatchback                  False                 Diesel  \n",
              "36          SUV                  False                 Diesel  \n",
              "37    Hatchback                  False                 Petrol  \n",
              "38       Estate                  False                 Petrol  \n",
              "39    Hatchback                  False                 Diesel  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e066619a-ef5d-4ffe-815d-009d19a5cb3d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>public_reference</th>\n",
              "      <th>mileage</th>\n",
              "      <th>reg_code</th>\n",
              "      <th>standard_colour</th>\n",
              "      <th>standard_make</th>\n",
              "      <th>standard_model</th>\n",
              "      <th>vehicle_condition</th>\n",
              "      <th>year_of_registration</th>\n",
              "      <th>price</th>\n",
              "      <th>body_type</th>\n",
              "      <th>crossover_car_and_van</th>\n",
              "      <th>fuel_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>202006039777689</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Volvo</td>\n",
              "      <td>XC90</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>73970</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol Plug-in Hybrid</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>202007020778260</td>\n",
              "      <td>108230.0</td>\n",
              "      <td>61</td>\n",
              "      <td>Blue</td>\n",
              "      <td>Jaguar</td>\n",
              "      <td>XF</td>\n",
              "      <td>USED</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>7000</td>\n",
              "      <td>Saloon</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>202007020778474</td>\n",
              "      <td>7800.0</td>\n",
              "      <td>17</td>\n",
              "      <td>Grey</td>\n",
              "      <td>SKODA</td>\n",
              "      <td>Yeti</td>\n",
              "      <td>USED</td>\n",
              "      <td>2017.0</td>\n",
              "      <td>14000</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>202007080986776</td>\n",
              "      <td>45000.0</td>\n",
              "      <td>16</td>\n",
              "      <td>Brown</td>\n",
              "      <td>Vauxhall</td>\n",
              "      <td>Mokka</td>\n",
              "      <td>USED</td>\n",
              "      <td>2016.0</td>\n",
              "      <td>7995</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>202007161321269</td>\n",
              "      <td>64000.0</td>\n",
              "      <td>64</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Land Rover</td>\n",
              "      <td>Range Rover Sport</td>\n",
              "      <td>USED</td>\n",
              "      <td>2015.0</td>\n",
              "      <td>26995</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>202009304412074</td>\n",
              "      <td>16000.0</td>\n",
              "      <td>17</td>\n",
              "      <td>Blue</td>\n",
              "      <td>Audi</td>\n",
              "      <td>S5</td>\n",
              "      <td>USED</td>\n",
              "      <td>2017.0</td>\n",
              "      <td>29000</td>\n",
              "      <td>Convertible</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>202007080998445</td>\n",
              "      <td>24075.0</td>\n",
              "      <td>17</td>\n",
              "      <td>Red</td>\n",
              "      <td>Vauxhall</td>\n",
              "      <td>Viva</td>\n",
              "      <td>USED</td>\n",
              "      <td>2017.0</td>\n",
              "      <td>5861</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>202009244143980</td>\n",
              "      <td>99000.0</td>\n",
              "      <td>13</td>\n",
              "      <td>Bronze</td>\n",
              "      <td>Land Rover</td>\n",
              "      <td>Range Rover</td>\n",
              "      <td>USED</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>24475</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>202010014442611</td>\n",
              "      <td>111236.0</td>\n",
              "      <td>08</td>\n",
              "      <td>Black</td>\n",
              "      <td>Mercedes-Benz</td>\n",
              "      <td>S Class</td>\n",
              "      <td>USED</td>\n",
              "      <td>2008.0</td>\n",
              "      <td>6995</td>\n",
              "      <td>Limousine</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>202006230431327</td>\n",
              "      <td>9500.0</td>\n",
              "      <td>19</td>\n",
              "      <td>White</td>\n",
              "      <td>Land Rover</td>\n",
              "      <td>Range Rover</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>79995</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>202007151278313</td>\n",
              "      <td>77000.0</td>\n",
              "      <td>60</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Volkswagen</td>\n",
              "      <td>Passat</td>\n",
              "      <td>USED</td>\n",
              "      <td>2010.0</td>\n",
              "      <td>4499</td>\n",
              "      <td>Saloon</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>202007161303602</td>\n",
              "      <td>24487.0</td>\n",
              "      <td>17</td>\n",
              "      <td>Black</td>\n",
              "      <td>Peugeot</td>\n",
              "      <td>208</td>\n",
              "      <td>USED</td>\n",
              "      <td>2017.0</td>\n",
              "      <td>8795</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>202009173867934</td>\n",
              "      <td>4765.0</td>\n",
              "      <td>69</td>\n",
              "      <td>White</td>\n",
              "      <td>SKODA</td>\n",
              "      <td>Octavia</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>16990</td>\n",
              "      <td>Estate</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>202009234108830</td>\n",
              "      <td>18214.0</td>\n",
              "      <td>19</td>\n",
              "      <td>Silver</td>\n",
              "      <td>SEAT</td>\n",
              "      <td>Leon</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>14290</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>202010014440649</td>\n",
              "      <td>31534.0</td>\n",
              "      <td>17</td>\n",
              "      <td>Grey</td>\n",
              "      <td>MINI</td>\n",
              "      <td>Hatch</td>\n",
              "      <td>USED</td>\n",
              "      <td>2017.0</td>\n",
              "      <td>19000</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>202010144986791</td>\n",
              "      <td>38603.0</td>\n",
              "      <td>16</td>\n",
              "      <td>Blue</td>\n",
              "      <td>BMW</td>\n",
              "      <td>2 Series Gran Tourer</td>\n",
              "      <td>USED</td>\n",
              "      <td>2016.0</td>\n",
              "      <td>16000</td>\n",
              "      <td>MPV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>202010155026725</td>\n",
              "      <td>52023.0</td>\n",
              "      <td>66</td>\n",
              "      <td>Blue</td>\n",
              "      <td>Volkswagen</td>\n",
              "      <td>Golf</td>\n",
              "      <td>USED</td>\n",
              "      <td>2016.0</td>\n",
              "      <td>13500</td>\n",
              "      <td>Estate</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>201911043995897</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Nissan</td>\n",
              "      <td>X-Trail</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>27595</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>202008142485309</td>\n",
              "      <td>29500.0</td>\n",
              "      <td>12</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Mercedes-Benz</td>\n",
              "      <td>C Class</td>\n",
              "      <td>USED</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>9495</td>\n",
              "      <td>Saloon</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>202008272998331</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>White</td>\n",
              "      <td>Volkswagen</td>\n",
              "      <td>T-Cross</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>25000</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>202009183894045</td>\n",
              "      <td>35300.0</td>\n",
              "      <td>18</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Vauxhall</td>\n",
              "      <td>Corsa</td>\n",
              "      <td>USED</td>\n",
              "      <td>2018.0</td>\n",
              "      <td>7293</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>202010014441671</td>\n",
              "      <td>47299.0</td>\n",
              "      <td>65</td>\n",
              "      <td>Black</td>\n",
              "      <td>Nissan</td>\n",
              "      <td>Qashqai</td>\n",
              "      <td>USED</td>\n",
              "      <td>2016.0</td>\n",
              "      <td>11500</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>202010265453679</td>\n",
              "      <td>3354.0</td>\n",
              "      <td>19</td>\n",
              "      <td>Blue</td>\n",
              "      <td>SKODA</td>\n",
              "      <td>Citigo</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>7999</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>202007070979378</td>\n",
              "      <td>90000.0</td>\n",
              "      <td>09</td>\n",
              "      <td>Silver</td>\n",
              "      <td>Mitsubishi</td>\n",
              "      <td>Colt</td>\n",
              "      <td>USED</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>1795</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>202007080996950</td>\n",
              "      <td>98000.0</td>\n",
              "      <td>12</td>\n",
              "      <td>Black</td>\n",
              "      <td>Vauxhall</td>\n",
              "      <td>Astra GTC</td>\n",
              "      <td>USED</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>3795</td>\n",
              "      <td>Coupe</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>202008042070611</td>\n",
              "      <td>49585.0</td>\n",
              "      <td>B</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Ferrari</td>\n",
              "      <td>308</td>\n",
              "      <td>USED</td>\n",
              "      <td>1984.0</td>\n",
              "      <td>54475</td>\n",
              "      <td>Convertible</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>202010155027040</td>\n",
              "      <td>2802.0</td>\n",
              "      <td>19</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Citroen</td>\n",
              "      <td>Grand C4 SpaceTourer</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>16995</td>\n",
              "      <td>MPV</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>202010235355785</td>\n",
              "      <td>7990.0</td>\n",
              "      <td>19</td>\n",
              "      <td>Black</td>\n",
              "      <td>Toyota</td>\n",
              "      <td>Yaris</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>11147</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>202006230431505</td>\n",
              "      <td>11961.0</td>\n",
              "      <td>19</td>\n",
              "      <td>Red</td>\n",
              "      <td>Volvo</td>\n",
              "      <td>XC60</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>32995</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel Hybrid</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>202009173867342</td>\n",
              "      <td>73000.0</td>\n",
              "      <td>61</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Toyota</td>\n",
              "      <td>Verso</td>\n",
              "      <td>USED</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>4290</td>\n",
              "      <td>MPV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>202010155027121</td>\n",
              "      <td>17020.0</td>\n",
              "      <td>17</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Vauxhall</td>\n",
              "      <td>Corsa</td>\n",
              "      <td>USED</td>\n",
              "      <td>2017.0</td>\n",
              "      <td>6795</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>201905047632015</td>\n",
              "      <td>7989.0</td>\n",
              "      <td>18</td>\n",
              "      <td>Blue</td>\n",
              "      <td>Kia</td>\n",
              "      <td>Sorento</td>\n",
              "      <td>USED</td>\n",
              "      <td>2018.0</td>\n",
              "      <td>30000</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>201905097776109</td>\n",
              "      <td>180000.0</td>\n",
              "      <td>64</td>\n",
              "      <td>White</td>\n",
              "      <td>SKODA</td>\n",
              "      <td>Octavia</td>\n",
              "      <td>USED</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>3989</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>201910012817451</td>\n",
              "      <td>4445.0</td>\n",
              "      <td>69</td>\n",
              "      <td>White</td>\n",
              "      <td>Volvo</td>\n",
              "      <td>V40</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>16980</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>201910022887138</td>\n",
              "      <td>12999.0</td>\n",
              "      <td>69</td>\n",
              "      <td>White</td>\n",
              "      <td>Peugeot</td>\n",
              "      <td>208</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>9995</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>202001035748230</td>\n",
              "      <td>5000.0</td>\n",
              "      <td>69</td>\n",
              "      <td>Blue</td>\n",
              "      <td>SKODA</td>\n",
              "      <td>Octavia</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>12490</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>202001296703520</td>\n",
              "      <td>3699.0</td>\n",
              "      <td>69</td>\n",
              "      <td>White</td>\n",
              "      <td>Renault</td>\n",
              "      <td>Koleos</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>24899</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>202001306737473</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>White</td>\n",
              "      <td>Fiat</td>\n",
              "      <td>Panda</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>13999</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>202002056992609</td>\n",
              "      <td>10900.0</td>\n",
              "      <td>19</td>\n",
              "      <td>Blue</td>\n",
              "      <td>Volvo</td>\n",
              "      <td>V60</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>28500</td>\n",
              "      <td>Estate</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>202002137274498</td>\n",
              "      <td>35000.0</td>\n",
              "      <td>64</td>\n",
              "      <td>Black</td>\n",
              "      <td>Volkswagen</td>\n",
              "      <td>Golf</td>\n",
              "      <td>USED</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>14500</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e066619a-ef5d-4ffe-815d-009d19a5cb3d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e066619a-ef5d-4ffe-815d-009d19a5cb3d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e066619a-ef5d-4ffe-815d-009d19a5cb3d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "df.head(40)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rBr57Ei09K6l",
        "outputId": "2fa7702a-c067-4edd-ab48-fe9f39999b09"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['public_reference', 'mileage', 'reg_code', 'standard_colour',\n",
            "       'standard_make', 'standard_model', 'vehicle_condition',\n",
            "       'year_of_registration', 'price', 'body_type', 'crossover_car_and_van',\n",
            "       'fuel_type'],\n",
            "      dtype='object')\n",
            "(402005, 12)\n"
          ]
        }
      ],
      "source": [
        "print(df.columns)\n",
        "print(df.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ztptdlc_9K3V",
        "outputId": "80fd559a-4410-4db2-b819-8349fe3e9280"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 402005 entries, 0 to 402004\n",
            "Data columns (total 12 columns):\n",
            " #   Column                 Non-Null Count   Dtype  \n",
            "---  ------                 --------------   -----  \n",
            " 0   public_reference       402005 non-null  int64  \n",
            " 1   mileage                401878 non-null  float64\n",
            " 2   reg_code               370148 non-null  object \n",
            " 3   standard_colour        396627 non-null  object \n",
            " 4   standard_make          402005 non-null  object \n",
            " 5   standard_model         402005 non-null  object \n",
            " 6   vehicle_condition      402005 non-null  object \n",
            " 7   year_of_registration   368694 non-null  float64\n",
            " 8   price                  402005 non-null  int64  \n",
            " 9   body_type              401168 non-null  object \n",
            " 10  crossover_car_and_van  402005 non-null  bool   \n",
            " 11  fuel_type              401404 non-null  object \n",
            "dtypes: bool(1), float64(2), int64(2), object(7)\n",
            "memory usage: 34.1+ MB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uuruTmqL9Koz",
        "outputId": "091a7ae6-ead4-45e3-b86f-b1eaa58d466c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "year_of_registration     33311\n",
              "reg_code                 31857\n",
              "standard_colour           5378\n",
              "body_type                  837\n",
              "fuel_type                  601\n",
              "mileage                    127\n",
              "public_reference             0\n",
              "standard_make                0\n",
              "standard_model               0\n",
              "vehicle_condition            0\n",
              "price                        0\n",
              "crossover_car_and_van        0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "df.isna().sum().sort_values(ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 737
        },
        "id": "wsjsrNwj9uEQ",
        "outputId": "bff77ce6-fbf3-4fd2-f847-24bc59e92b55"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2500x1000 with 3 Axes>"
            ],
            "image/png": "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//79OnDggPdN8rlz53rn1WamcePGadKkSZKoQVwY+kKEwtKlS7VixQqdOHFCEtcLEXr0hQi1lGPElH+/7LLLZGbeOFCSvvnmG3311VdKSkpSlixZNG/ePD3zzDPauHFjurYZ6SMq1A0Awt3PP/+s33//Xdu3b9c111yjvHnzKn/+/IqIiJCZKX/+/Ordu7d34A7cfEl50A50upkzZ5YkxcTEpP+OIMPq0aOHBgwYoKxZs2rFihUqW7asEhISFB0drYIFC6p58+a66667FB0drdWrV2vkyJG68sorJf2vDgMnRNmyZdOJEyeUJ08e74IQkBZdunRRTEyMXn/99dPmUYdIL8457d27V7GxscqWLZt3zD2bunXrqnPnzhoyZIimTJmim2++WbGxsV5NAmnBmBDhgDpEqFGDCAfOOR06dEjZs2eXpNPGdGYm55yqVq2qkydPav78+br88ss1Y8YMderUST///LNGjBihX3/9VX379lXr1q114sQJtW3bNhS7gwyIvhDh4I033lC/fv0UFxenqVOnqkKFCl5/yHUapAf6QoSD33//Xbt379bBgwdVtmxZZc2aVVmzZvXGgwHVq1dXTEyMFi1apLvvvjtoXPjmm28qd+7c6tSpk0aOHKkjR46od+/eKlGiRAj3DBddOr2JAsiQ+vXrZyVLlvS+L5krVy675ppr7OOPPw563aKZ2eHDh1PdRuBVZWZm9erVs5w5c9q8efPMjFc/4ewC3zcNfNv0xhtv/Nu6ee+998w5Z/369fOmpazVzp07m3POXnjhBTOjBpE2Tz/9tNcPvvTSS2ddnjrEpTBhwgR74IEHLEeOHFa8eHGrU6eOzZo164zH34BAfU2ZMsWio6OtcOHCtnXr1qB5wNkwJkQ4oA4RatQgwsG4ceOsdevWli9fPqtYsaLdcccdNm3aNNu2bZuZBdfRqlWrLCYmxt58801bunSplS5d2pxz1r9/f2+Zrl27evV86NChdN8fZDz0hQgHTz75pDnn7Oqrr7a33377rMtznQYXG30hwsGAAQOsYsWKXh0WLlzY7rjjDvvmm29OW3bfvn1WqFAhe+CBB2zOnDlWqlSp08aFo0aNMuec5c6d237//fd03BOkBwIRwBn07NnTnHNWsmRJe/zxx61x48ZWpUoVr3Pt0aOHrVy50ls+cJBOebBOeVDv16+fOeesUaNGtn///nTbD2RcgQszrVq1shkzZthll11mzjl77733zCz1geHMmTPNOWdVq1a1Tz75JGje8OHDLVu2bFauXDnvYhGQFoHv+AX+vPzyy3+7PHWIi613797ed55jY2MtR44c5pyzMmXK2MSJE80s+Jh7JjfddJM55+zhhx+2kydPXupmwycYEyIcUIcINWoQ4SBwAzBTpkxWrFgxK1iwoHcTpkGDBrZ48WIzO1V3SUlJ9vvvv1vBggWtaNGi3k2bgQMHmllwPfbs2TOofoEzoS9EOOjfv78556xx48an1Vug1v56fsx1GlxM9IUIB4FxYdGiRa1NmzZWu3ZtK1asmFeHgwcPtp07dwatc8stt1hMTIwVL148aFyYsjbfffdd27BhQ3ruCtIJgQggFR9++KE55+y2226zn376ycxOpWa3b99u3bt39zrVZs2a2XfffXfW7Y0cOdLy589vhQsXtk2bNl3q5sMHAmGIZs2a2Zo1a8zM7JFHHjHnnP3nP/8543q//PKL1ahRw5xzVqpUKevYsaONHDnSWrZsaVFRUZY3b15ve8DZJCYmmtmpJwWuvfbaoDdF/F0ogjrExdSrVy9zzlmtWrXs66+/to0bN9qPP/7onWxXqlTprE/zBWr5k08+sbx581qFChVs165d6dF8ZHCMCREOqEOEGjWIcPDaa6+Zc84aNGhgS5cutcOHD9vOnTvtkUcesaJFi5pzzvLmzWszZ84MWu/f//63V6ODBg3ypiclJVlCQkJ67wYyMPpChINffvnFypQpY2XKlLFVq1adNj/wZH7gv4GbfJs3b+Y6DS4K+kKEg8Bbb+644w6vLzx69KjNnz/f2rdv79Xh448/HhRueP311884LkzLg1bI2AhEACkEBomdOnUy55x30A7cSAkYNGiQ5c6d25xzds8999jSpUtP29bJkydt586d1rFjR8uVK5cVKVLEVq9efel3Ahlet27dvIHj+vXrvenTpk3zDtgzZsw44/qTJ0+2ihUrWkREhLd8RESEVa1a1datW5ceuwCfCQwyd+7c6f2cMhSR2ttKJk2aRB3ign3wwQcWGxtrt956q3cMDZyg7Ny500t+jxkzxszO/krFrVu3Ws6cOc05RyACf4sxIcIBdYhQowYRLtasWWPFixe3yy67zH744QczMy/McODAAXvxxRctX7585pyzyMjIoPPlhQsX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e7dWrlypJUuWaPv27d5TpJGRkcqcObNatmypOnXq6JdfftHQoUP1/vvvewf3wI2ZQEd8ww03SJIyZcoUmp1BhjRv3jyNHj1a9913n4YPH+4NDM8WbihbtqyefvppSdLMmTP1559/cpEHFyTw9EBqArV11VVXSZLmzp0rSfryyy/12GOPaf369Xrrrbc0YcIESafS3//9738vcYvhN4MHD9btt9+uKlWqaNeuXaedIJ/phDlwPA4cwwMXgd577z21a9dOffv2PWOYAghgTIhwQB0i1KhBhIO/jglTXtRu0aKF90DAhAkT9OCDD+qGG27QXXfdpW3btunpp59WkyZNJElZs2ZVtmzZdODAAR09epTzZaQZfSHCRWrXaSIjIxUZGal7771X1157rWbPnq2ffvpJe/bs0aFDhySd/jBB8eLF5ZxTgQIF0qXd8Af6QoSDjh07qlWrVpKC3/ggSfnz51enTp101VVXadGiRerfv7/mzJnjhSJSXi+MjIxUnTp1JBHI+ce7ZB/jAMLYG2+8YRUqVPC+oxYXF2fNmjWzjz76KGi5JUuWWI0aNbxvDL322mveN4lSfuOqa9eu5pyzSZMmmRnfX8PZ9enTx/LkyePVYFRUlFWuXNlmz56dpvXnz59vuXLlsqioKPv2228vcWvhV2+99Zb389m+27dnzx4rUKCAPf7447Z48WIrXbq0Oeesf//+3jKjRo3yavqPP/64ZO2Gvzz55JPmnLPSpUvb8OHD7ciRI2le96effjLnnN19993etHfffdcKFSpkuXLlsh9++OFSNBk+wpgQ4YA6RKhRgwgHaR0TfvHFF9a8eXMrXbq0lShRwpo3b27Tpk0LWv748eOWI0cOa9asWXo1Hz5AX4hwkNbrNLNnz7aiRYtaRESEOeesZcuWdvjwYTMzO3HihLfcE088Yc4569u3r5lRhzg7+kKEg0Df5ZyzTp06edMTExODlps9e7YVKlTInHNWu3Zt++CDD7w+MGVf+O9//9ucc/b111+nzw4gLBGIwD9O4CS7WLFidv/991vDhg2Dbkz36dPHG0CamS1atMjq1q1r0dHRljVrVrvrrrts8+bNduDAATMze/PNNy1fvnx2zTXX2K5du0K1W8hAAgf0MmXK2JtvvmnPPvus1a9f35xz1q1btzRvJ3Agv+222+zPP/+8dA2GLz399NPmnLP69et70850sp2cnGyHDh2yChUqWNasWa148eLmnLOBAwcGLWN26mb0qlWrLmnb4R+vvfaaOefsrrvusuXLl5/z+qtWrTLnnN1///1mZjZ27FgrVKiQ5ciRw3766aeL3Vz4DGNChAPqEKFGDSIcpGVMmJSU5P184sQJO3jwoO3evTvVZf/73/+ac867scjNF5wNfSHCwblcpzEzmzlzppUqVcqioqIsS5Ysdv/99wddHxw4cKDlyJHDypQpY9u2bbuUTYdP0BciXNx8883mnLPo6Ghzzlnnzp29eYmJiUFju1mzZlmJEiXMOWclSpSwzp07B/WFI0aMsFy5clmVKlXOOHbEPwOBCPyjvPfee94N5NWrV3vTv/76a+vcubN3cO/cuXPQQHHVqlXWqVMnK1KkiDnnLH/+/FaqVCm7+uqrzTlnBQsWtLVr14Zil5DBDB482Jxzduedd9qPP/7oTZ87d65lz57drrnmGjt69GjQOn+9eBNIQs6fP9+KFy9u+fLlo/5wTkaMGGHOOe9Jgttvv92b93cn26+++qrXTw4aNMibnpSUFHSBEkiLdevWWfHixe2aa64JCi8E+rzExMTT6uqvf1+0aJE55+yOO+6wt99+2/LkyUMYAmnCmBDhgDpEqFGDCAfnMyb86zlLyqcFR44c6d182bFjxyVsOfyCvhDh4Fyu06S8TrhgwQK7++67vZvWV1xxhd14441WpUoVc85Z4cKFbc2aNem2H8i46AsRDgJjvkceecRKlixpr7/+utcv/l0oYsGCBXbHHXdYzpw5zTlnRYsWtZo1a1r16tW9uqQOQSAC/yjt27e3zJkz25IlS8zsfwPK5ORkO3nypHez2jlnHTt2DHrl+549e2zBggXWoEEDK1u2rDnnrGLFinb//ffbzz//HJL9QcayefNmq1ChguXLl8++//57Mwu+cHPjjTfa7bffbomJiXbw4MGgE57Unmg5dOiQN7j89ddfL/0OwBcWLFhg5cuXN+ecPffcc1a4cGHvhCfgTKGIDRs2WLt27YLeDEEQAudr8uTJ5pyzCRMmBE3fsmWLffbZZ9a8eXNr3LixPfvsszZ16tRUt/HDDz94Ty+ULFnSsmfPThgCacKYEOGAOkSoUYMIBxdjTGhm9vvvv9sTTzxhOXLksAIFCnADEGlGX4hQO5/rNCmvE27ZssU+/vhju+GGG7x1y5cvb61ataIOkWb0hQgnH374oTnnbN68eTZ58uQzhiJS2rRpk33wwQdWvXp1y507tznn7Morr7TGjRvbxo0b03sXEIYIROAfITk52Q4fPmyFChWynDlz2o4dO05LkQWMGTPGO7j/97//DdqG2anBwP79++3HH3+0Y8eOnfY0P3Am8+fPt6ioKHv44YfN7NRBOzC43LFjhxUoUMCuvfZa69Kli5UsWdIaNmxoo0eP9tZPWa+BnxcvXmzr1q1Lx71ARnbo0CH797//bREREda1a1czM/v222+tYMGCaQ5FHDx40PuZMATOR6BuunXrZs45W7ZsmdenBZ5uyZQpk3csTvlqxr9uY8OGDV76O3fu3HyuBWfFmBDhgDpEqFGDCAcXc0x44sQJa9KkiTnnrFatWrZ+/fr03yFkOPSFCAcX4zpNwMmTJ23nzp32/fff25EjR6hDpAl9IcLRggULzDln7733npmZ/d///Z8XiujUqZO33PLly4PGkGanxoWbN2+2+fPn2759++zQoUPp3n6EJwIR+EepWrWqZc6c2Xs6P6WUnebw4cO9g/s777zjTU95849vUOJcBV49VqtWLduzZ483/Y8//rBHH33UnHN2+eWX22WXXWbZsmXzavCFF17wlqXucKHuvfdeK1iwoC1evNibNnfu3HM+2aYWcaGee+45c855x+T169fbrbfeas45e+SRR+ytt96yPn36WLNmzbz+8OWXX/bWT05OtjVr1phzzrJnz86r73BOGBMiHFCHCDVqEOHgQseEAbt27bKxY8fyjXKcM/pChNrFuE5DHeJC0RcinBw/ftzy5MljrVu39mrrgw8+8EIRPXr0sPnz51vRokWtXr163mfSqEP8HQIR+Edp06aNOefsvvvuC3qtU0DKTrJ3797mnLMqVarY1q1b07OZ8KmNGzfalVdeaXny5LHnn3/eNm7caBs2bLD777/fnHN200032aJFi2z79u22ePFie/rpp70B5ltvvRXq5sMnEhISbNasWd7fA/3e2U62//o2CAaVuFCDBg0y55z3FMz48ePNOWeDBg0KWm7//v32wgsveP3hp59+GjR/1qxZvPoO54wxIcIBdYhQowYRDi7GmJA31+FC0Bci1LhOg3BAX4hwU6NGDbv++uuDpqUMReTJk8ecc0Gfdgb+ToSAf4Dk5GRJUuvWrVWwYEEtWLBAX331leLj44OWc855Pzdr1kwVK1bU6tWrtWvXrnRtL/ypUKFCuvfeeyVJL7zwgq6++mqVK1dOH3zwgWrVqqWvvvpK1atXV5EiRXTdddepd+/e6tq1qyTpo48+0smTJ2VmIdwDZHRmpqioKNWrV0/Sqb4x0O/Vrl1bkyZNUoECBfTFF1/o9ttvlyRFRUXpxIkTiog4NWT49ddfJQX3l8D5uPPOO1WkSBHNmjVLixcv1qRJk3TllVfq0UcflSQlJSVJknLlyqUOHTqoVatWkqSFCxdKkhITEyVJ9erVU6lSpUKwB8iIGBMiHFCHCDVqEKGS8nw28POFjgnNzDtXAc4FfSHCAddpEGr0hQg3gbFftWrVtGLFCm3ZskUJCQmSpBYtWujJJ5+Uc04HDx5U7dq1vfsnf61Z4K84Y4DvpHbDODBArFSpkmrXrq0dO3Zo6NChWrJkidfB/tU111yj66+/XvHx8d6JNnAh4uLi1L17d/Xv31+NGzdWxYoV1bVrV1199dV64IEHFBMT49Wjc05Zs2bVv/71L0nS+vXrdfLkyVA2HxlMan3hX0+O/3rhMLWT7aSkJGXKlEmS9OKLL+qBBx7QggULLl3D4TvLli3T2rVrT5ueJ08eXX/99VqzZo3++9//au/evSpevLhiY2NlZoqMjPSWzZs3r6677jpJ0qpVqyQpaD6QGsaECAfUIUKNGkQ4SXk+Evj5QseEQFrQFyJccZ0G6Ym+EBlBYOx33XXXKT4+Xjt37lR0dLQkaebMmfrkk09kZkpOTtZ3333nBSJS3lsBUkMgAr6TkJCgX3/9VTt37tTOnTuD5uXJk0d9+vRRyZIltWzZMvXu3VuLFy/2EmYBgRvPgZvRgaQkkFapHXzNTHnz5lXbtm31ySefaMGCBWrevLlWr16tggULSvrfAT/w5HOFChUUGRmpMmXKKHv27KS9kWYHDx7Uxo0b9euvv2rHjh1B8/6uT/vryXaTJk0kSX379tXzzz+v1atXq2jRope07fCPQYMG6Z577lGNGjW0adOmoHnZs2fXyy+/rFy5cmnOnDlatGiRfvrpJ+3YsSOorwscoytXrizp1Nt2JJ5+wdkxJkQ4oA4RatQgwsGKFSs0YcIEPfnkk/roo4+0bds2bx5jQqQH+kKEi/O5Wcd1Glws9IUIF2npC4sUKSLp1INWkvTFF1+oY8eO2rRpkwYPHqzp06fLOachQ4bowQcflMTDU/h7BCLgK++//76aN2+ucuXK6dprr1XVqlU1btw4HT16VNKpjrZkyZKaOnWq8uTJo/nz56tHjx6aPn26Dh48KOnUQT02NlaStGDBAkVERKhSpUoh2ydkLKNHj9bvv/+uyMjI0w7sgQs1gTRudHS01qxZI0lavny5jh8/LunU4DQqKkqSNGbMGCUlJal69epKTk7mkxlIkyFDhqhhw4YqW7asypcvrwoVKqh3796aOXOmpFPp778beNauXVsffPCBChYsqGnTpqlcuXLq1auXcufOrTlz5qhYsWLptSvIwJ588kk9/vjjio2N1eDBg1WgQIGg+cnJySpdurSmTJmiuLg4SdKJEyc0duxY7d+/X9KpY3IgBT5hwgRJp16ZJ6X+ZAMQwJgQ4YA6RKhRgwgH/fr10x133KH7779fb7zxhu677z49+eST+vHHHyWdqkPGhLiU6AsRDv7uemFacJ0GF4q+EOHgXPrCSpUqqUiRItq4caMWLFigbt266eeff9aAAQPUqVMnNWjQQO+//74k6Z133tHu3bvTYxeQkRngEz179jTnnDnnrFChQnb55Zd7fx8yZIiZmSUlJVlCQoKZma1evdouu+wyc87ZlVdead27d7etW7d62xs+fLjlyJHDKleubL///ntI9gkZS6AGb7zxRvvjjz/MzCwxMfFv15k+fbo556xatWo2e/ZsO378uDdvxIgRlj17ditbtqxt27btkrYd/vHkk0+ac87y5s1rN954o9WqVcvrC4sVK2avvPKKt+yZ6jPQT86fP99y5cplzjnLnTu3rVmzJl32ARnfa6+9Zs45a9y4sX3//fdnXC4pKcnMzGbOnGnZsmXzjsnPPfec7d6921tu6NChlj17ditfvrzt2LHjkrcfGRtjQoQD6hChRg0iHHTv3t2cc1ayZEl7+eWXrUePHnbFFVdYZGSkvf76695yycnJZsaYEBcffSHCwflcL/wrrtPgQtAXIhyca1946NAhq1ixomXJksVKlixpzjkbOHCgNz+w7uTJk23t2rWXtO3wBwIR8IVnnnnGnHN2880329y5c+3QoUO2detWe+yxx7yD+8KFC73lA53lhg0b7JZbbrG4uDhzzlmuXLnspptusuuuu86cc1agQAE6U6TJyJEjvVoL1GJaDuw7duyw8uXLm3POrr32WnvkkUdszJgx1qJFC4uJibE8efJwcoM0e+utt8w5Z3fccUdQ3YwfP94aN25skZGR5pyzjh07evP+Wp8p//7iiy96J9n0hUirNWvWWIkSJaxChQq2atUqb3rgQndSUpIXhEhpxYoVdtVVV5lzziIiIqxMmTLWqlUrq127NsdkpBljQoQD6hChRg0iHAwYMMCcc3bXXXfZTz/95E2fNGmSOeesatWqFh8f7918CYwVGRPiYqEvRDg43+uFKXGdBheCvhDh4Hz7wsB40jlngwYN8qafa6gMMCMQAR/4+OOPLWvWrFa3bt1Ubxw3btzYnHPWt29fMwu+IWNmtmvXLhszZow1bNjQYmJizDlnxYsXt7vvvts2bdqUfjuCDGvhwoV29dVXm3POevfubddcc02aDuyBWly9erUVLVo0aFDgnLPrrrvO1q1bl677gowrKSnJmjZtanFxcbZ48WIz+98TBGZma9eutWeeecaioqLMOWcdOnQIWvevnn32WXPOEcrBOZs8ebI55+z9998Pmv7LL7/YlClTrHHjxtawYUN75plnbOLEiUHLbN261Z5//nmrWbNm0JtNOCYjLRgTIhxQhwg1ahDhYPXq1VaqVCkrUKCArVixwsyCz02uv/56a968uZmZHTt27LT1GRPiQtEXIhyc7/XCM+E6Dc4VfSHCwYX0hT/++KO1bdvWhg0b5k1L7To2kBYEIpCh7d+/35o0aWLOOfv222+96cnJyV4nGhgsBk62Uwoc5AM2btxo33//vR04cMCOHDlyaRsPXzh8+LA9+uij5pyz7t272/Hjx23mzJlWrly5NB3YA9M2b95szz77rDVt2tTatm1rY8aMsV27dqXrviBj27t3rxUoUMBKly5tx48ft+TkZEtKSgrq5/bs2WOvv/66F4r473//681Ludz8+fMtd+7clitXLk6ykWaBE5LOnTubc86WLFnizVuwYIE1btzYMmXKFBT8ioqKsq5duwZtJ9Avrlq1ypYuXWp//vknx2ScFWNChAPqEKFGDSJczJgxw6Kjo61Lly5mdqq2AoGILVu2WO7cua169erWq1cvK1eunD322GOnhWkZE+J80RciHFzo9cK/4joNzhV9IcLBxegL9+/f7/1MGAIXgkAEMrR58+aZc847yU4pcNCePXu29wr5Mwl0pH890ANnc/LkSXv00Uftiiuu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105vvvmmHn/8cWXPnl1Tp07V1KlTJZ1et4FzHyAt6AsRDrheiFCjL0Q4oC9EhhPK11MAqUn5Sp1hw4aZc86yZMliS5YsMbPUvy9kZjZ79myLjo4255zNnDnTm57ye5VAWlzsGgTSKmXtBV41dja9e/c255yVLVvWfvvtt0vVNPyDpKzDwM8nT560m266yZxzVrt2bdu8eXPQOn/++acVL17cbrrpJjMze//99805Zw899NBp2wTSijEhwgF1iFCjBhEqfx2/BWpt2bJlljNnTouLi7MlS5ZY165d7fLLL7dDhw5ZYmJiUE1u2rTJbrvtNnPOWbdu3dK1/fAX+kKEA64XItToCxEO6AuRUfG4HsLC+PHjNXv2bEmnnjoIPHX62GOP6e6779bx48fVpEkTrV27VhEREakmzerWratHHnlEzjnt27fPmx4ZGZk+O4EM7VLWIJBWzjnt2bNHJ06cUHx8vCR5tfhXgRp89NFHVbFiRe3evdt7S8SZ1gHSImUdHj9+3Jv+0EMP6corr9S8efPUsGFDff755/ruu+/01VdfqW7duvr999/Vtm1bmZnq16+vK664QvPmzVN8fDxvKkGaMSZEOKAOEWrUIMJByjHhsWPHvDd+Va1aVffee6+OHj2q++67T7NmzVKRIkWULVs2RUZGBr0Z7Morr9R9990nSVq/fr1OnjwZkn1BxkRfiHDA9UKEGn0hwgF9IfyAQARCrkuXLmrdurWGDx+uBQsWSDp1ME5ISJAkvfzyy6pRo4Z27type++9V+vWrTutUw0smydPHpmZfv311/TfEWRY1CDCwaRJk9SmTRuVKVPGu8i4detWRUZGpjqIDFxozJMnjypWrKgDBw5o1KhRkjihwflLrQ63bNmimJgY3XrrrerUqZMqVKigTZs26a677lKdOnXUqFEj7dixQ08//bTuueceOeeUJUsWZcuWTREREd53poGz4XiMcEAdItSoQYSDM52bBLzyyiuqWbOmfv31V61du1Y7d+7UmjVrgrYRqMPChQtLknLlyuV9hg04G/pChAPqEKFGDSIcUIfwjVC9mgIwM1uxYoXFxMSYc86io6PtzjvvtPnz5wctk5CQYNOmTbMqVaqYc86KFy9uK1euTHV7bdq0sWzZstncuXPTofXwA2oQ4aBXr17mnDPnnOXPn9/y589vzjm76qqrbMeOHWdc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sWLFTvt9Gzdu1A033KA9e/aoRIkSaty4sbZs2aLJkydr6tSp+vDDD3X33Xeftt6xY8dUv359LVy4UDlz5lSDBg105MgRzZkzR3PnzlX37t31xhtvnHE/a9asqSuvvDLVeZGRkWdc70xCHoi4+uqr9cQTT6hSpUqqXLmyXnnlFb3//vvnvb2VK1eqe/fuioyM1LRp09SwYUNJp/7h77zzTs2ePVuPPvro36ZPAAAAAAAAAAAAAAC4lI4dO6Z27dqpUKFCqlatmqZOnZrqcud7D7xMmTJ68cUX1axZM8XFxXnTt27dqttvv11r1qxRu3btNGfOnKD1zEzNmzfXnj171Lp1a73zzjteGGH06NF65JFH1KZNG23atEkFCxYMWrdXr15auHChKlSooDlz5nghje+//1516tRR//79VadOHd1+++2p7utDDz2kdu3apfnf8GxC/smMhx56SK+//rpatmypsmXLKiLiwpr06quvyszUvn17rxAkKUuWLBo7dqwiIiL08ccfa/369RfadAAAAAAAAAAAAAAAzsvTTz+tTZs2afTo0cqRI8cZlzvfe+CzZ8/WAw88EBSGkKQrrrhCI0eOlCR988032r59e9D8L7/8UitXrlTOnDk1fPjwoDczPPzww6pXr56OHDly2pcg/vzzT40YMULSqS9FpHxjRZUqVfTUU09Jkvr06XPWf5uLJeSBiIspPj5e06dPlyS1bNnytPmXX365atasKUmaMmVKurYNAAAAAAAAAAAAAABJ+vbbbzV06FC1adNGjRo1OuNyl+oeeKVKlbyft23bFjQvsJ0777zztDBFynZ88sknQdO/+OILxcfHq1ixYl6bUltv8eLF2rlzZ5rbeiFC/smMi2njxo06duyYJKlq1aqpLlO1alXNmzdPK1euTM+mAQAAAAAAAAAAAACgI0eO6IEHHlCBAgU0aNCgv132Ut0D37Rpk/dzoUKFguYFtvN3vy+wjaNHjypr1qxpWq9EiRLKnTu39u/frx9++EGFCxc+bZlvvvlGP/30kw4fPqw8efLouuuuU6NGjRQbG5vmfUvJV4GILVu2SJJy5sypbNmypbpM0aJFg5YFAAAAAAAAAAAAACC9PPHEE9qyZYumTJmiXLly/e2yl+oeeN++fSVJlStX1hVXXJHq7yxWrNjf/j4z09atW1W+fPk0rSdJl112mfbv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AAAAAAAAAAC+QyACAAAAAAAAAAAAAAD4DoEIAAAAAAAAAAAAAADgOwQiAAAAAAAAAAAAAACA7xCIAAAAAAAAAAAAAAAAvkMgAgAAAAAAAAAAAAAA+A6BCAAAAAAAAAAAAAAA4DsEIgAAAAAAAAAAAAAAgO8QiAAAAAAAAAAAAAAAAL5DIAIAAAAAAAAAAAAAAPgOgQgAAAAAAAAAAAAAAOA7BCIAAAAAAAAAAAAAAIDvEIgAAAAAAAAAAAAAAAC+QyACAAAAAAAAAAAAAAD4DoEIAAAAAAAAAAAAAADgOwQiAAAAAAAAAAAAAACA7xCIAAAAAAAAAAAAAAAAvkMgAgAAAAAAAAAAAAAA+A6BCAAAAAAAAAAAAAAA4DsEIgAAAAAAAAAAAAAAgO8QiAAAAAAAAAAAAAAAAL5DIAIAAAAAAAAAAAAAAPgOgQgAAAAAAAAAAAAAAOA7BCIAAAAAAAAAAAAAAIDvEIgAAAAAAAAAAAAAAAC+QyACAAAAAAAAAAAAAAD4DoEIAAAAAAAAAAAAAADgOwQiAAAAAAAAAAAAAACA7xCIAAAAAAAAAAAAAAAAvkMgAgAAAAAAAAAAAAAA+A6BCAAAAAAAAAAAAAAA4DsEIgAAAAAAAAAAAAAAgO8QiAAAAAAAAAAAAAAAAL5DIAIAAAAAAAAAAAAAAPgOgQgAAAAAAAAAAAAAAOA7BCIAAAAAAAAAAAAAAIDvEIgAAAAAAAAAAAAAAAC+QyACAAAAAAAAAAAAAAD4DoEIAAAAAAAAAAAAAADgOwQiAAAAAAAAAAAAAACA7xCIAAAAAAAAAAAAAAAAvkMgAgAAAAAAAAAAAAAA+A6BCAAAAAAAAAAAAAAA4DsEIgAAAAAAAAAAAAAAgO8QiAAAAAAAAAAAAAAAAL5DIAIAAAAAAAAAAAAAAPgOgQgAAAAAAAAAAAAAAOA7BCIAAAAAAAAAAAAAAIDvEIgAAAAAAAAAAAAAAAC+QyACAAAAAAAAAAAAAAD4DoEIAAAAAAAAAAAAAADgOwQiAAAAAAAAAAAAAACA7xCIAAAAAAAAAAAAAAAAvkMgAgAAAAAAAAAAAAAA+A6BCAAAAAAAAAAAAAAA4DsEIgAAAAAAAAAAAAAAgO8QiAAAAAAAAAAAAAAAAL5DIAIAAAAAAAAAAAAAAPgOgQgAAAAAAAAAAAAAAOA7BCIAAAAAAAAAAAAAAIDvEIgAAAAAAAAAAAAAAAC+QyACAAAAAAAAAAAAAAD4DoEIAAAAAAAAAAAAAADgOwQiAAAAAAAAAAAAAACA7xCIAAAAAAAAAAAAAAAAvkMgAgAAAAAAAAAAAAAA+A6BCAAAAAAAAAAAAAAA4DsEIgAAAAAAAAAAAAAAgO8QiAAAAAAAAAAAAAAAAL5DIAIAAAAAAAAAAAAAAPhO2AQiPvroI9WpU0e5cuVS1qxZVbFiRb322mtKSEg4520dPXpUr776qqpWrars2bMrOjpaBQsW1O23367PPvvsErQeAAAAAAAAAAAAAIC/N378eLVp00YVK1ZU/vz5FR0drRw5cui6667Tq6++qiNHjgQtn5ycrIULF+rZZ59VrVq1lCdPHkVHRytv3ryqX7++xo8fLzNL9Xft27dP7777rjp16qQaNWooS5Yscs7p5ptvTnN7v/vuOzVv3lyXXXaZYmNjlTdvXlWpUkXdunU747383bt3q2PHjipevLhiY2NVoEABNW3aVCtWrEjz701KStL1118v55ycc5o/f36a100p6rzWusi6du2qwYMHKyoqSnXr1lVcXJzmzJmjp556StOmTdPMmTOVOXPmNG1r3759ql27ttauXau4uDjVqFFDOXPm1M8//6zp06dr+vTp6ty5swYPHnyJ9woAAAAAAAAAAAAAgP8ZMWKEFi5cqKuuukqVK1dW7ty5tXv3bi1atEjLli3T22+/rblz56pw4cKSpF9++UU1a9aUJOXOnVtVq1ZVrly59Msvv2jWrFmaNWuWJk6cqI8//lgxMTFBv2vevHlq3779ebXTzNStWzcNHjxY0dHR+te//qXatWtr7969WrdunQYNGqSXXnpJ0dHRQett3LhRN9xwg/bs2aMSJUqocePG2rJliyZPnqypU6fqww8/1N13333W3//GG29o8eLFcs6dMfCRFiEPREydOlWDBw9WXFyc5s6dq8qVK0uS9u7dq7p162r+/Pl65pln9MYbb6Rpey+++KLWrl2rKlWqaObMmcqdO7c374svvtBdd92lIUOGqEWLFqpevfol2ScAAAAAAAAAAAAAAP6qf//+KlWqVNB9bOnUg/+NGzfW/Pnz1b17d02YMEGS5JxT3bp11aNHD9WvX1+RkZHeOnPnztVtt92mzz//XH379tWzzz4btM0CBQrokUceUeXKlVW5cmV9//33evTRR9PUzueff16DBw9WjRo19MEHH+jyyy8Pmr9s2TJlypQpaJqZqXnz5tqzZ49at26td955x2vv6NGj9cgjj6hNmzbatGmTChYseMbfvWbNGj333HO6/fbb9dNPP+nXX39NU5tTE/JPZrzyyiuSpJ49e3phCEnKmzevhg8fLkkaNmyYDh48mKbtzZkzR5L01FNPnVZEjRo10k033SRJWrRo0QW3HQAAAAAAAAAAAACAtPrXv/512n1sScqTJ49373zmzJne9JIlS2r27Nlq0KBBUBhCkm688Ub17NlTkjRu3LjTtnn99ddr5MiRevjhh1W1alXFxsamqY0bNmzQK6+8ogIFCmj69OmnhSEkqVq1aoqKCn7/wpdffqmVK1cqZ86cGj58eFB7H374YdWrV09Hjhz52685JCYmqm3btsqcObNGjRqVpvb+nZAGInbs2KFly5ZJklq2bHna/Fq1aqlo0aI6efKkvvjiizRt868plDPJmzdv2hsKAAAAAAAAAAAAAMAlFAgYpDW4IEmVKlWSJG3btu2itWPEiBFKTEzUv//9b+XMmTPN602ZMkWSdOeddyouLu60+YFMwCeffHLGbbzyyiv6/vvvNWDAAO+zIRcipIGIlStXSjr1rZPixYunukzVqlWDlj2bhg0bSpL69eun/fv3B8374osv9M0336hgwYK68847z7fZAAAAAAAAAAAAAABcNIcPH9bzzz8vSed0L3vTpk2SpEKFCl20tsyYMUOSVLt2bR04cECjRo3SY489pk6dOmnUqFHau3dvqusF7ukH7vH/VWD6pk2bdPTo0dPm//DDD3r55Zd16623qn379hdjVxR19kUunS1btkiSihUrdsZlihYtGrTs2Tz11FNaunSpZsyYocsvv1w1a9ZUzpw59fPPP+v7779XzZo1NXbsWOXIkePCdwAAAAAAAAAAAAAAgHM0c+ZMffDBB0pOTtbu3bu1aNEiHT58WA0aNFC/fv3StI1jx45pyJAhkqR77rnnorQrPj5eGzZskHTqHn2rVq20Z8+eoGWeeOIJjRkzRs2bNw+afrb7/4F7/2amrVu3qnz58kG/t23btsqUKZNGjx59UfZFCnEg4vDhw5KkrFmznnGZwKs0Dh06lKZtZs2aVdOmTVOvXr3Uv39/L70infruys0336wiRYpcQKsBAAAAAAAAAAAAADh/a9eu1XvvvRc0rWXLlhowYECaH+7v0KGDtmzZosKFC6tXr14XpV379++XmUmSOnbsqKuuukoffvihKleurJ07d6pv375699131apVKxUpUkQ33HCDt+7Z7v+n/IzGX+//v/DCC1q1apVGjhz5ty9UOFch/WTGpbBr1y7VrFlTQ4cO1csvv6xffvlFR44c0dKlS1WlShW98MILqlWrlvc/AwAAAAAAAAAAAACA9NS1a1eZmeLj4/Xzzz+rf//++vLLL1WuXDl99913Z13/pZde0nvvvadMmTLpww8/VJ48eS5KuwJhCEnKnDmzZs2apRtvvFHZsmVTmTJl9M4776hhw4ZKSkryPvFxoZYuXap+/fqpbt26evjhhy/KNgNCGojIli2bJKX6fZCAI0eOSJKyZ8+epm22bdtWy5Yt00svvaRevXqpePHiypo1q6pVq6bPP/9cFSpU0I8//qg33njjwncAAAAAAAAAAAAAAIDzFB0drZIlS+rxxx/Xl19+qT///FOtWrXS8ePHz7jOgAED9Oyzzyo2NlZTpkxRzZo1L1p7AvfwJalJkybKly/fact06NBBkjRv3jzFx8eftu6Z7v8H7v1L/7v/f+LECbVr106ZMmXSW2+9Jefche9ECiENRFxxxRWSpG3btp1xmcC8wLJ/Z8eOHfr6668lSS1atDhtfnR0tO69915J0qxZs86xtQAAAAAAAAAAAAAAXBr/+te/VK5cOW3btk3Lly9PdZmhQ4eqe/fuiomJ0ccff6wGDRpc1DbExcV5IYgSJUqkukxgekJCgvbu3etND9zT/+2331JdL3Dv3zmnyy+/XJK0fv16rVu3TpkzZ1b79u1Vp06doD+///67JKlTp06qU6eO+vbte077E3VOS19klSpVkiTt27dPW7ZsUfHixU9bJvA/unLlymfdXsp/2DO9USLwvZX9+/efc3sBAAAAAAAAAAAAALhUsmbNKknas2fPafPefPNNde7c2QtD3HbbbZekDVWqVNFXX30VFHZIKeX0uLg47+fKlStrxYoVZwxzBKaXKlUqaL3ANufOnXvGNv3www+S0vYihZRC+oaIyy67TNWqVZMkffDBB6fNnz9/vrZt26bY2Fg1atTorNsrUqSI9/OSJUtSXWbx4sWSlGr4AgAAAAAAAAAAAACAUNi7d69+/PFHSVLp0qWD5o0cOVIdO3b0whC33377JWtH06ZNJUlz5sxRcnLyafMDX20oU6ZM0IsK7r77bknSZ599lupnMwKZgCZNmnjTrr32WpnZGf8E3iQxb948mZnefffdc9qXkAYiJKlXr16SpL59+2rFihXe9H379nnfHunYsaP3ZgdJmjJlisqWLat69eoFbatYsWJewKJLly7aunVr0Pz/+7//06RJkyRJLVu2vOj7AgAAAAAAAAAAAABAatauXavx48frxIkTp83buHGjmjZtqpMnT6p69eqqUKGCN2/MmDHq0KFDuoQhJKlVq1YqWbKkVq9erWeffTYoFPHNN99owIABkqTOnTsHrdewYUNVqlRJBw4cUIcOHZSUlOTNGz16tGbPnq24uDh16dLlkrY/pZB+MkOSGjdurM6dO2vIkCGqXr266tWrp6xZs2r27Nk6cOCAatasqZdeeilonYMHD2rDhg2pFsrbb7+tm266SevWrdNVV12l6tWrK2/evFq3bp3WrFkj6dT/wPvvvz9d9g8AAAAAAAAAAAAAgD179qhVq1Z65JFHVKlSJV122WWKj4/Xb7/9phUrVig5OVlXXXWV95C/dOpTEY888ojMTCVKlNDkyZM1efLkVLef2tsTqlev7v38xx9/SJKWLVsWNP2ZZ54J+vxGTEyMPvnkE910003q06ePJk6cqGuvvVY7duzQ0qVLlZycrLZt2+o///lP0O9yzmnChAm64YYbNG7cOM2fP1/VqlXTli1btHTpUkVFRWncuHEqWLDgef37nY+QByIkafDgwapZs6befPNNLVy4UAkJCSpZsqR69uypbt26KSYmJs3buvrqq7V69WoNHDhQX375pZYtW6aTJ08qV65cuvXWW/XAAw+oWbNml3BvAAAAAAAAAAAAAAAIVr58efXp00fz5s3T+vXrtXLlSiUkJCh37tyqV6+emjRpovbt2ys2NtZb58CBAzIzSdL69eu1fv36M24/tUDEkiVLTpt26NChoOmBoERK11xzjVavXq0+ffpo+vTpmjZtmrJkyaIbb7xRDz/8sJo3b55qG8qUKaNVq1bp5Zdf1ueff64pU6YoR44catKkiXr37q3KlSufsf2XQlgEIiSpWbNmaQ4qtGvXTu3atTvj/AIFCqhv377q27fvRWodAAAAAAAAAAAAAADnL1++fOrVq9c5rVOnTh0vEHE+LmTdQoUKadiwYRo2bNg5rVewYMHzWi81W7duvaD1Iy64BQAAAAAAAAAAAAAAAGGGQAQAAAAAAAAAAAAAAPAdAhEAAAAAAAAAAAAAAMB3CEQAAAAAAAAAAAAAAADfIRABAAAAAAAAAAAAAAB8h0AEAAAAAAAAAAAAAADwHQIRAAAAAAAAAAAAAADAdwhEAAAAAAAAAAAAAAAA3yEQAQAAAAAAAAAAAAAAfIdABAAAAAAAAAAAAAAA8B0CEQAAAAAAAAAAAAAAwHcIRAAAAAAAAAAAAAAAAN8hEAEAAAAAAAAAAAAAAHyHQAQAAAAAAAAAAAAAAPAdAhEAAAAAAAAAAAAAAMB3CEQAAAAAAAAAAAAAAADfIRABAAAAAAAAAAAAAAB8h0AEAAAAAAAAAAAAAADwHQIRAAAAAAAAAAAAAADAdwhEAAAAAAAAAAAAAAAA3yEQAQAAAAAAAAAAAAAAfIdABAAAAAAAAAAAAAAA8B0CEQAAAAAAAAAAAAAAwHcIRAAAAAAAAAAAAAAAAN8hEAEAAAAAAAAAAAAAAHyHQAQAAAAAAAAAAAAAAPAdAhEAAAAAAAAAAAAAAMB3CEQAAAAAAAAAAAAAAADfIRABAAAAAAAAAAAAAAB8h0AEAAAAAAAAAAAAAADwHQIRAAAAAAAAAAAAAADAdwhEAAAAAAAAAAAAAAAA3yEQAQAAAAAAAAAAAAAAfIdABAAAAAAAAAAAAAAA8B0CEQAAAAAAAAAAAAAAwHcIRAAAAAAAAAAAAAAAAN8hEAEAAAAAAAAAAAAAAHyHQAQAAAAAAAAAAAAAAPAdAhEAAAAAAAAAAAAAAMB3CEQAAAAAAAAAAAAAAADfIRABAAAAAAAAAAAAAAB8h0AEAAAAAAAAAAAAAADwHQIRAAAAAAAAAAAAAADAdwhEAAAAAAAAAAAAAAAA3yEQAQAAAAAAAAAAAAAAfIdABAAAAAAAAAAAAAAA8B0CEQAAAAAAAAAAAAAAwHcIRAAAAAAAAAAAAAAAAN8hEAEAAAAAAAAAAAAAAHyHQAQAAAAAAAAAAAAAAPAdAhEAAAAAAAAAAAAAAMB3CEQAAAAAAAAAAAAAAADfIRABAAAAAAAAAAAAAAB8h0AEAAAAAAAAAAAAAADwHQIRAAAAAAAAAAAAAADAdwhEAAAAAAAAAAAAAAAA3yEQAQAAAAAAAAAAAAAAfIdABAAAAAAAAAAAAAAA8B0CEQAAAAAAAAAAAAAAwHcIRAAAAAAAAAAAAAAAAN8hEAEAAAAAAAAAAAAAAHyHQAQAAAAAAAAAAAAAAPAdAhEAAAAAAAAAAAAAAMB3CEQAAAAAAAAAAAAAAADfIRABAAAAAAAAAAAAAAB8h0AEAAAAAAAAAAAAAADwHQIRAAAAAAAAAAAAAADAdwhEAAAAAAAAAAAAAAAA3yEQAQAAAAAAAAAAAAAAfIdABAAAAAAAAAAAAAAA8B0CEQAAAAAAAAAAAAAAwHcIRAAAAAAAAAAAAAAAAN8hEAEAAAAAAAAAAAAAAHyHQAQAAAAAAAAAAAAAAPAdAhEAAAAAAAAAAAAAAMB3CEQAAAAAAAAAAAAAAADfIRABAAAAAAAAAAAAAAB8h0AEAAAAAAAAAAAAAADwHQIRAAAAAAAAAAAAAADAdwhEAAAAAAAAAAAAAAAA3yEQAQAAAAAAAAAAAAAAfIdABAAAAAAAAAAAAAAA8B0CEQAAAAAAAAAAAAAAwHcIRAAAAAAAAAAAAAAAAN8hEAEAAAAAAAAAAAAAAHyHQAQAAAAAAAAAAAAAAPAdAhEAAAAAAAAAAAAAAMB3CEQAAAAAAAAAAAAAAADfIRABAAAAAAAAAAAAAAB8h0AEAAAAAAAAAAAAAADwHQIRAAAAAAAAAAAAAADAdwhEAAAAAAAAAAAAAAAA3yEQAQAAAAAAAAAAAAAAfIdABAAAAAAAAAAAAAAA8B0CEQAAAAAAAAAAAAAAwHcIRAAAAAAAAAAAAAAAAN8hEAEAAAAAAAAAAAAAAHyHQAQAAAAAAAAAAAAAAPAdAhEAAAAAAAAAAAAAAMB3CEQAAAAAAAAAAAAAAADfIRABAAAAAAAAAAAAAAB8h0AEAAAAAAAAAAAAAADwHQIRAAAAAAAAAAAAAADAdwhEAAAAAAAAAAAAAAAA3yEQAQAAAAAAAAAAAAAAfIdABAAAAAAAAAAAAAAA8B0CEQAAAAAAAAAAAAAAwHcIRAAAAAAAAAAAAAAAAN8hEAEAAAAAAAAAAAAAAHyHQAQAAAAAAAAAAAAAAPAdAhEAAAAAAAAAAAAAAMB3CEQAAAAAAAAAAAAAAADfIRABAAAAAAAAAAAAAAB8h0AEAAAAAAAAAAAAAADwHQIRAAAAAAAAAAAAAADAdwhEAAAAAAAAAAAAAAAA3yEQAQAAAAAAAAAAAAAAfIdABAAAAAAAAAAAAAAA8B0CEQAAAAAAAAAAAAAAwHcIRAAAAAAAAAAAAAAAAN8hEAEAAAAAAAAAAAAAAHyHQAQAAAAAAAAAAAAAAPAdAhEAAAAAAAAAAAAAAMB3CEQAAAAAAAAAAAAAAADfIRABAAAAAAAAAAAAAAB8h0AEAAAAAAAAAAAAAADwHQIRAAAAAAAAAAAAAADAdwhEAAAAAAAAAAAAAAAA3yEQAQAAAAAAAAAAAAAAfIdABAAAAAAAAAAAAAAA8B0CEQAAAAAAAAAAAAAAwHcIRAAAAAAAAAAAAAAAAN8hEAEAAAAAAAAAAAAAAHyHQAQAAAAAAAAAAAAAAPAdAhEAAAAAAAAAAAAAAMB3CEQAAAAAAAAAAAAAAADfIRABAAAAAAAAAAAAAAB8J2wCER999JHq1KmjXLlyKWvWrKpYsaJee+01JSQknPc2P/30U915550qWLCgYmJilD9/ftWoUUMvvvjiRWw5AAAAAAAAAAAAAAB/LyEhQbNnz1aPHj1UrVo15cyZU9HR0SpYsKDuvPNOTZ8+Pc3bGj58uJxzcs7poYceSnWZffv26d1331WnTp1Uo0YNZcmSRc453XzzzX+77Q0bNmjQoEFq1KiRihQpopiYGGXPnl3VqlXTq6++qiNHjvzt+rt371bHjh1VvHhxxcbGqsD/Y+/O47Ue8/+Bv+9zTvvRQsQkLZYaozGlbKkQhhjrZOzCCMluSES27EYmso5lxhrFZKcsNUgpOy2ENLRqpe2c6/eH37m/HaeVOOYzz+fj0cM5n2u5r/u4Hp/7vj/X674+DRpEly5dYsyYMcutn1KKSy+9NA444IBo3rx5rLvuulGlSpXYYIMNYo899oh//vOfkVJavT/M9xT9oFZr2emnnx79+vWLoqKi2HXXXaO4uDiGDRsW5557bgwZMiSee+65qFGjxmr3t3jx4jjiiCNi4MCBUaNGjdhhhx2iQYMG8dVXX8X7778fN954Y1x44YU/4TMCAAAAAAAAgP/z8ssvx+677x4RERtuuGHstNNOUatWrfjggw9iyJAhMWTIkOjWrVvccsstkcvlVtjPJ598Euecc07kcrmVBgWGDx8exxxzzBqPs1OnTjFlypSoXr16tGnTJjp06BBTp06N1157LUaPHh133nlnDBs2LDbZZJMKbcePHx/t27ePadOmRbNmzWL//fePSZMmxSOPPBKPPfZYPPzww3HAAQeUa1NSUhIXXnhhVKtWLVq2bBnNmzePGjVqxGeffRYvvPBCPP/88/Hwww/H4MGDo7CwcI2eS6UHIh577LHo169fFBcXx8svvxytW7eOiIgZM2bErrvuGiNGjIjevXvHtddeu9p9Hn/88TFw4MDYf//94/bbb4/69evny0pLS+ONN95Y688DAAAAAAAAAFakoKAgDjrooDjttNOiffv25coeeuihOPzww+O2226Ldu3axVFHHbXcPkpLS6Nr166Ry+XiqKOOinvuuWeFj9egQYM44YQTonXr1tG6det4880348QTT1zlOJs3bx6XXHJJHHzwwVFcXJw//umnn8Y+++wT77//fnTt2jWGDRtWrl1KKQ455JCYNm1aHHnkkXHXXXflAwy33XZbnHDCCXHUUUfFhAkTYsMNN8y3KywsjBdffDG23377qF69erk+33333dhtt91iyJAhcccdd8QJJ5ywyvEvq9JvmdG3b9+IiOjZs2c+DBERUb9+/bj55psjIqJ///4xZ86c1epv6NChce+998ZWW20VDz/8cLkwRMR3k2z77bdfS6MHAAAAAAAAgFXbdddd45FHHqkQhoiI+NOf/hRdu3aNiIh77713hX3069cvhg8fHldddVU0adJkpY+3ww47xC233BLdunWLNm3aRLVq1VZrnEOHDo1jjz22XBgiIqJJkyZxyy23RETEiy++GF988UW58qeffjrGjh0bdevWjZtvvrncbg7dunWLTp06xfz586Nfv37l2uVyudh5550rhCEiIlq2bBk9evSIiIjnnntutca/rEoNREyZMiVGjRoVERGHHXZYhfKddtopGjVqFIsWLYqnnnpqtfr829/+FhHf3YajSpUqa2+wAAAAAAAAAPATadWqVURETJ48ebnl48aNi/PPPz86duwYJ5100s85tLyyMUZUHOfgwYMjImLfffetEKaI+L9MwKBBg9boMYuKvrvxxeoGOsq1XeMWa9HYsWMjImLdddeNpk2bLrdOmzZtYvLkyTF27Ng49NBDV9pfSUlJDB06NCIiOnToEF999VU8+OCDMW7cuKhWrVq0atUqDjrooOX+8QEAAAAAAACgskyYMCEiIjbaaKMKZSUlJXH00UdHLpeLO++8M3K53M89vIj4vzFGVBxn2fp/mzZtltu27PiECRNiwYIFUatWrVU+3scff5y/s8S+++67xuOt1EDEpEmTIiJik002WWGdRo0alau7Mp988knMnz8/IiJef/316N69e/73Mn/5y1/iwQcfjF133fWHDhsAAAAAAAAA1pqvvvoq7r777oiIOOiggyqUX3PNNTFy5Mj461//GptuuunPPLr/c+WVV0ZEROvWrSvcsmNV6/9la/8ppfj000/jN7/5TYU6N954Y4wZMyYWL14ckydPjtdeey1SStGzZ8845JBD1ni8lXrLjHnz5kVErDT5Ubabw9y5c1fZ38yZM/M/H3fccbHNNtvEqFGjYt68efHWW29F586dY/r06bHffvuVS64AAAAAAAAAQGVYunRpHHHEETFnzpxo2bJlnHDCCeXK33vvvbjoootixx13jFNPPbWSRhlx9913x0MPPRSFhYXRr1+/CuWrWv9f9k4OK1r/HzZsWNxzzz3xwAMPxIgRI6KgoCAuu+yyuPDCC3/QmCs1ELG2pZTyPzds2DCeffbZaNOmTRQXF8fWW28d//rXv2KrrbaK+fPn55MrAAAAAAAAAFBZTjzxxBg6dGist9568cgjj0TVqlXzZUuXLo2jjz46CgoK4u9//3sUFFTOEv/QoUPzQY2rr746dtppp5/kcR577LFIKcWCBQvinXfeiW7dusUFF1wQO+ywQ/znP/9Z4/4qNRCxzjrrRETEggULVlin7JYXtWvXXu3+IiK6du0a1apVK1deWFiY/5/0wgsvrPF4AQAAAAAAAGBtOe200+LOO++MevXqxfPPPx9bbLFFufLLL788xowZExdffHE0b968UsY4YsSI2G+//WLx4sVx0UUXxZlnnrnceqta/y9b+49Y9fp/zZo1o2XLltG/f/+48sor4+233/5Bu2MUrXGLtajsniKTJ09eYZ2ysu/ff2RF/eVyuUgpRbNmzZZbp+z4l19+uWaDBQAAAAAAAIC15Kyzzoobb7wx6tatG88991y0atWqQp3BgwdHRMSQIUPiqaeeKlf26aefRkTEk08+GTvvvHNERLz00ktrdYyvvvpqdO7cORYsWBDnn39+9OnTZ4V1mzRpErNmzYrPP/98ueVla/+5XC4aN2682mM45phj4pxzzokhQ4ZESUlJFBYWrnbbSg1ElP0PnTlzZkyaNCmaNm1aoc7o0aMjIqJ169ar7K+4uDiaN28eH330UcyYMWO5dcqOL3t/EgAAAAAAAAD4uZxzzjlx/fXXR506deK5556LNm3arLT+iBEjVlj21VdfxVdffbW2hxivv/567LnnnjFv3rzo1atXXHbZZSut37p16xgzZkx+jf/7yo5vvvnma7ReX6tWrYiIWLx4ccyePTvWW2+91W5bqbfM2HjjjaNt27YREXH//fdXKB8xYkRMnjw5qlWrFp07d16tPrt06RIRK74lxvPPPx8REdtuu+0PGTIAAAAAAAAA/GA9e/aMa665JurUqRPPP/98fs18ed56661IKS3330UXXRQREccdd1z+2NryxhtvxO9///t8GOLyyy9fZZsDDjggIiL+9a9/Lfe2GWWZgAMPPHCNxjJ06NCIiFhvvfVi3XXXXaO2lRqIiIjo1atXRERceeWVMWbMmPzxmTNnRvfu3SMiokePHlGnTp182eDBg6NFixbRqVOnCv2deuqpUa9evXjqqafi1ltvLVf24IMPxn333ZevBwAAAAAAAAA/lwsuuCCuuuqqqFu37irDEJVl9OjRsccee8TcuXNXOwwREbHXXntFq1atYvbs2dG9e/coKSnJl912220xdOjQKC4ujtNOO61cuyeeeCJeeuml5QY6hg0bFieddFJERBx//PGRy+XW6LlU6i0zIiL233//OPXUU+PGG2+M7bffPjp16hS1atWKoUOHxuzZs6Ndu3Zx6aWXlmszZ86cGDduXCxcuLBCf/Xr14+HHnoo9t133zjxxBPjb3/7W/z617+Ojz/+OMaOHRsREb17917tHScAAAAAAAAA4Mf617/+lQ8XbLbZZnHTTTctt179+vXj2muvXSuPuf322+d/nj59ekREjBo1qtzx3r17x957753/fY899og5c+ZE3bp1Y8qUKdG1a9fl9t2zZ89o0aJF/vdcLhcPPPBAtG/fPu69994YMWJEtG3bNiZNmhRvvPFGFBUVxb333hsbbrhhuX5Gjx4dF198cay//vrRqlWrWH/99WP27NkxYcKEGD9+fER8t/tEnz591vj5V3ogIiKiX79+0a5du7jpppvi1VdfjSVLlsSmm24aPXv2jDPOOCOqVq26Rv3tvvvu8fbbb0ffvn3jhRdeiMcffzxq164dnTt3jtNOOy322GOPn+iZAAAAAAAAAEBFs2bNyv88evToGD169HLrNW7c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T0Uul4tcLhe77bbbWhgtAAAAAAAAAKyZcePGxd/+9rfo2rVrtGzZMoqKiiKXy8Vll122yralpaVxzz33xG677Rbrr79+VKtWLTbaaKPYdddd4+abb15huzfffDO6dOkSDRo0iOrVq0fTpk3jlFNOiWnTpq2wTUop7rvvvthtt92ifv36UaVKlahbt260a9cubrzxxli8ePEK286bNy969eoVzZs3jxo1akT9+vVj7733jmHDhi23/jfffBNPPPFE9OjRI7beeutYZ511omrVqtGoUaM45JBD4t///vcq/zYrUvSDW65Fp59+evTr1y+Kiopi1113jeLi4hg2bFice+65MWTIkHjuueeiRo0aP6jvr7/+Oo4//vjI5XKRUlrLIwcAAAAAAACA1TNgwIDo16/fGrebM2dO7LvvvvHKK69E7dq1Y8cdd4y6devGlClTYuzYsTF37tzo3r17hXaPPPJIHHroobF06dJo27ZtNG3aNEaPHh39+/ePgQMHxogRI2KzzTar0O7QQw+Nhx56KAoKCmLHHXeMhg0bxtSpU+Pf//53vPrqq/HAAw/EsGHDKqzjT5s2Ldq3bx/jx4+PjTbaKP7whz/E1KlT4+mnn46nn346+vXrF6ecckq5Nvfff38cf/zxERHRuHHj6NSpUxQVFcXbb78dDz30UDz88MNx6aWXxvnnn7/Gf7dK3yHisccei379+kVxcXGMHDkynn322Xj00UdjwoQJ0bJlyxgxYkT07t37B/d/yimnxNSpU+PEE09ci6MGAAAAAAAAgDWz1VZbxdlnnx333XdffPjhh3HkkUeusk1KKfbff/945ZVX4oQTTogpU6bE008/HQ888EC88sorMXXq1LjlllsqtPvPf/4TRx99dCxdujRuvfXWeOONN+Khhx6K8ePHxxFHHBFTp06Nww47rMLGAoMHD46HHnoo6tSpE2PGjInhw4fHgw8+GC+++GJ89NFH0bBhw3j99deXG+zo1q1bjB8/Pjp16hQTJ06Mhx9+OF5++eV44oknoqCgIE4//fR45513yrWpUqVKHHvssTFmzJj49NNP47HHHotHHnkkxo8fH9ddd12klOKCCy6Il19+eQ3/2r+AQETfvn0jIqJnz57RunXr/PH69evnt/Xo379/zJkzZ437Hjx4cNx3331x5plnxrbbbrt2BgwAAAAAAAAAP8Cf//znuOaaa+Kwww6LFi1aREHBqpfs77rrrnjppZfi97//fdxyyy1RXFxcrrxq1arRpk2bCu1uuOGG+Oabb2K33XaLbt265Y8XFhbGgAEDok6dOjFq1Kh47rnnyrUru7XF4YcfHltvvXW5smbNmuV3onjttdfKlX3wwQfx+OOPR2FhYdx5551Rs2bNfFnnzp2ja9euUVpaGldccUW5dkcffXTceeed0apVq3LHc7lcnHnmmdGpU6eIiPjHP/6x4j/SClRqIGLKlCkxatSoiIg47LDDKpTvtNNO0ahRo1i0aFE89dRTa9T3jBkz4sQTT4zmzZvHJZdcslbGCwAAAAAAAAA/pxtvvDEiIv7yl7+sUbvBgwdHxPLX4ouLi2PfffeNiIhBgwaVK6tevfpq9V+/fv3lPl67du2icePGFeqXjWPIkCGxZMmS1XqMiMgHJSZPnrzabcpUaiBi7NixERGx7rrrRtOmTZdbpyzJUlZ3dZ100kkxY8aMuPPOO1f7fxgAAAAAAAAA/FJMnTo13n777SgsLIwdd9wxPvnkk7jyyivjxBNPjLPPPjsGDhwYixcvrtBu3rx5MXHixIiI5e4esezx76/F77XXXhERcf/998fbb79druyTTz6JAQMGRC6Xi+OPP75cWVk/q3q8BQsWxIQJE1b6vJdVVnejjTZa7TZlita4xVo0adKkiIjYZJNNVlinUaNG5equjgcffDAeeeSROO2006Jdu3Y/bpAAAAAAAAAAUAneeeediIhYb7314o477oizzjqrwu4KzZo1i8GDB8dvf/vb/LFPP/00//OK1uNXtBa/6667xvnnnx+XX355tG7dOtq1axcNGzaMqVOnxogRI6JRo0bx+OOPx/bbb1+u3arW/2vXrh21a9eOuXPnxqRJk2LLLbdc5fN/991348knn4yIiIMOOmiV9b+vUneImDdvXkRE1KpVa4V1yu5/Mnfu3NXq86uvvoqTTz45Nt100+jbt++PHyQAAAAAAAAAVIKZM2dGRMSsWbPi1FNPjf322y/efffdmDdvXrz22mux3XbbxSeffBJ77rlnvm7E/63FR6x4PX5la/GXXXZZ/POf/4yaNWvG8OHD48EHH4wXX3wxUkqx2267xW9+85sKbdb2+v/8+fPjsMMOi6VLl8bvf//7+MMf/rDKNt9XqYGIn0K3bt3i66+/jjvuuCNq1qxZ2cMBAAAAAAAAgB8kpRQREUuXLo0ddtghBg4cGFtttVUUFxfH9ttvH88//3w0aNAgvvzyy7j55pvXymMuWbIkjj322DjiiCNi//33j3fffTcWLFgQ48ePjx49esTtt98ebdu2jbfeemutPN6KxtClS5d47733olmzZvGPf/zjB/VTqYGIddZZJyK+u0fIisyfPz8ivts+Y1XuueeeGDJkSJx44omx8847r5UxAgAAAAAAAEBlKFtTj4g44YQTllt+xBFHRETECy+8sNx2K1qPX9Fa/NVXXx133XVXdO7cOf7xj3/EVlttFTVr1ozNN988/vrXv0a3bt1i1qxZcdpppy13rD92/X/p0qVxyCGHxDPPPBONGzeOYcOGxfrrr7/C+itT9INarSVNmjSJiIjJkyevsE5ZWVndlRk8eHBERIwaNapCIOKrr76KiIg333wzX/bggw/GhhtuuGaDBgAAAAAAAICfQbNmzZb78/LqfPnll/ljjRs3zv/8+eefR8uWLSu0W9Fa/N133x0REYceeuhyH++www6LW2+9NUaMGBGLFi2KatWq5fsZM2ZMfP7558ttN3fu3PytMla0/l9SUhKHH354DBo0KBo1ahQvvvhiueeypio1ENGqVauI+O6+J5MmTYqmTZtWqDN69OiIiGjduvVq91vWZnlmz54dL7/8ckRELFy4cE2GCwAAAAAAAAA/my222CLWWWedmDdvXsyYMWO5dcqOFxcX54/Vrl07Nttss5g4cWKMHj16uYGIFa3FlwUaVrSLQ506dSIiorS0NGbPnh0NGjTI9zNo0KAVrteXHa9Vq1ZsscUWFcpLSkriiCOOiIcffjgfhlhehmBNVOotMzbeeONo27ZtRETcf//9FcpHjBgRkydPjmrVqkXnzp1X2d9jjz0WKaXl/rvrrrsiIqJTp075Y6uz6wQAAAAAAAAAVIaioqLYf//9I6L8LTGW9fzzz0dExLbbblvu+AEHHBARy1+Lnz9/fgwZMiQiIg488MByZQ0bNoyIiJEjRy738V5//fWI+O4WGfXr188fLxvnv//97+XuElE2jj/84Q9RpUqVcmWlpaVx1FFHxYMPPpgPQ2y66abLffw1UamBiIiIXr16RUTElVdeGWPGjMkfnzlzZnTv3j0iInr06JFPmUR8d2uMFi1aRKdOnX7ewQIAAAAAAADAz6hXr15RpUqVuP322+OJJ54oV3bNNdfEiBEjorCwME4++eRyZaeffnrUrFkzXnjhhbj99tvzx0tKSqJ79+4xe/bsaNu2beyxxx7l2v3xj3+MiIi//vWv8dJLL5Ure+utt6J3794REXHwwQdHYWFhvuw3v/lN7LffflFSUhLHHXdcfPvtt/myp59+Ou6+++4oKCiI8847r1yfpaWlccwxx8T999+/VsMQEZV8y4yI71Iip556atx4442x/fbbR6dOnaJWrVoxdOjQmD17drRr1y4uvfTScm3mzJkT48aNc8sLAAAAAAAAAP5rjBkzJr8xQETExx9/HBERt956a7mww+DBg2OjjTaKiIgWLVrE7bffHscee2z84Q9/iDZt2kSTJk3ivffei48++igKCwtjwIABFW6L8atf/SruvvvuOPTQQ6Nbt25x5513RpMmTWLUqFHxySefRIMGDeL++++PXC5Xrl3v3r3jpZdeilGjRsUuu+wSbdu2jaZNm8YXX3wRI0eOjJKSkmjZsmVcddVVFZ7fbbfdFh988EG88MILsemmm0b79u1j2rRp8fLLL0dKKfr16xe//e1vy7Xp379/3HvvvRERsemmm1bIB5Rp0aJF9OzZc3X/1BHxCwhERET069cv2rVrFzfddFO8+uqrsWTJkth0002jZ8+eccYZZ0TVqlUre4gAAAAAAAAA8KPMnTt3ubei+OKLL+KLL77I/75o0aJy5UcffXRsueWWcdVVV8Xw4cPj7bffjvXWWy+6dOkSZ599doXbZZTp0qVLNGvWLPr27RvDhw+PsWPHxkYbbRQnn3xy9O7dOxo0aFChzTrrrBMjRoyIW265JQYOHBjvv/9+jBkzJmrVqhVt27aNgw46KE4++eSoUaNGhbYbbLBBjB49Oq644op49NFH4/HHH49atWrF73//+zj77LOXexeIWbNm5X/+/o4Uy+rYseN/ZyAi4rvtNA4++ODVqtu1a9fo2rXrGvX/Q9oAAAAAAAAAwNqy8847R0rpB7Vt27ZtPPLII2vcbptttolHH310jdpUrVo1Tj311Dj11FPX+PFq164dV1xxRVxxxRWrVb9Pnz7Rp0+fNX6c1VHwk/QKAAAAAAAAAFCJBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzBCIAAAAAAAAAgMwRiAAAAAAAAAAAMkcgAgAAAAAAAADIHIEIAAAAAAAAACBzfjGBiIEDB8bOO+8c9erVi1q1asXWW28dV199dSxZsmSN+hk7dmxcccUV0alTp2jQoEFUqVIl6tWrF+3bt4+bbrppjfsDAAAAAAAAgLXl888/jx49ekTz5s2jRo0aUb169WjatGkcffTR8fbbb6+w3QsvvBCdO3eO+vXrR40aNaJFixZx/vnnx/z581f7sd9+++2oWrVq5HK52GyzzVZad+rUqdGjR49o2rRpVKtWLRo0aBBdunSJMWPGrLDNK6+8En379o2DDjoomjRpErlcLnK5XIwYMWK1x7g2FVXKo37P6aefHv369YuioqLYddddo7i4OIYNGxbnnntuDBkyJJ577rmoUaPGKvtZunRptG7dOiIiiouLo23bttGgQYP44osv4rXXXosRI0bEvffeG88++2zUrVv3J35WAAAAAAAAAPB/Ro4cGbvvvnvMmzcvGjZsGHvssUcUFhbGW2+9Fffee2/cf//9cf/990eXLl3KtfvrX/8aZ555ZuRyuWjfvn00aNAghg8fHn379o1HH300RowYEfXr11/pYy9evDiOOuqoWLp06SrHOX78+Gjfvn1MmzYtmjVrFvvvv39MmjQpHnnkkXjsscfi4YcfjgMOOKBCu1NPPXWloY6fW6XvEPHYY49Fv379ori4OEaOHBnPPvtsPProozFhwoRo2bJljBgxInr37r3a/W2zzTbx8MMPx4wZM2LYsGHxwAMPxPDhw2Ps2LGx0UYbxRtvvBFnnnnmT/iMAAAAAAAAAKCibt26xbx586Jbt24xadKkePzxx2PQoEExceLEuOCCC2Lp0qXRrVu3WLhwYb7N2LFj46yzzorCwsJ48skn4+WXX46HH344Pv744+jUqVOMGzcuTjzxxFU+9iWXXBLvvPNOnHzyySutl1KKQw45JKZNmxZHHnlkjB8/Ph566KF444034tZbb42lS5fGUUcdFV999VWFtrvvvnv06dMn/vWvf8UXX3wRjRs3XvM/0lpU6YGIvn37RkREz54987s7RETUr18/br755oiI6N+/f8yZM2eVfRUVFcXo0aOjS5cuUa1atXJlLVu2jKuvvjoiIh588EG3zgAAAAAAAADgZzNz5sx45513IiLisssuiypVquTLCgoKok+fPlGjRo2YPXt2fPjhh/myK664IlJKccwxx8Ree+2VP16zZs248847o6CgIB599NH46KOPVvjYo0aNiiuvvDK6dOkSBx100ErH+fTTT8fYsWOjbt26cfPNN0dhYWG+rFu3btGpU6eYP39+9OvXr0Lba665Ji666KL4wx/+EA0bNlz1H+UnVqmBiClTpsSoUaMiIuKwww6rUL7TTjtFo0aNYtGiRfHUU0/96Mdr1apVRER8++23MWPGjB/dHwAAAAAAAACsju9/qX9lym5/sXjx4njyyScjYvlr6o0bN4527dpFRMTgwYOX29fChQvj6KOPjnr16kX//v1X+dhl/ey7775RXFxcobxsHIMGDVqNZ1K5KjUQMXbs2IiIWHfddaNp06bLrdOmTZtydX+MCRMmRERE1apVY9111/3R/QEAAAAAAADA6iguLo727dtHRMQFF1xQ7q4GpaWl0adPn/j2229jr732ikaNGkVExPjx4+Obb76JiP9bO/++Va2p9+7dOz788MO48cYbY4MNNljlOMv6WdXjTZgwIRYsWLDK/ipTUWU++KRJkyIiYpNNNllhnbL/0WV1f6iUUv6WGfvss88apW8AAAAAAAAA4Me6/fbbo3PnznHbbbfFk08+GW3atInCwsIYO3ZsTJkyJY488shyuziUrZPXrVs31llnneX2ubI19VdffTWuv/762G+//eLQQw9drTGuah2/7PFSSvHpp5/Gb37zm9XqtzJUaiBi3rx5ERFRq1atFdYp24Jj7ty5P+qxLr744njttdeiuLg4rrzyyh/VFwAAAAAAAACsqebNm8drr70WRx55ZDz33HMxZcqUfNmWW24ZO++8c9SuXTt/7MesqX/zzTfRtWvXqFOnTgwYMGC1x7iqx1z2Nho/dh3/p1apt8z4udx7771xySWXREFBQfz973+PzTffvLKHBAAAAAAAAMD/mH//+9/RsmXLeO+99+L++++Pr776KmbNmhVDhgyJJUuWxHHHHRfHHXfcWnmsnj17xoQJE+KGG26IjTbaaK30+d+mUgMRZVt6rOy+IvPnz4+IKJeCWRMDBw6MY489NiK+236kS5cuP6gfAAAAAAAAAPihZs+eHQcccEBMnz49Bg0aFIceemg0aNAg6tWrF/vss08888wzUbNmzfj73/8eL774YkT88DX1l156Kfr37x+dO3eOo446ao3GuarHLHu87z/mL1Gl3jKjSZMmERExefLkFdYpKyuruyYGDRoUhx12WJSWlsatt96aD0YAAAAAAAAAwM/pySefjOnTp8emm24a2223XYXyZs2axXbbbRcvvvhivPDCC7HLLrvk18lnz54d8+bNy4cVlrW8NfXHHnssUkrx+eefx84771yu/uzZsyMiYsqUKfmyG264IX73u9/l+5k1a1Z8/vnny30eZY+Xy+WicePGq/nsK0elBiJatWoVEREzZ86MSZMmRdOmTSvUGT16dEREtG7deo36fuyxx+KQQw6JkpKSGDBgQBx//PE/fsAAAAAAAAAA8AOUBQxWtqtCnTp1IiJi1qxZERHRvHnzqFmzZnzzzTcxevTo2GWXXSq0Wdma+nvvvbfCx1q4cGG8/PLLEfF/IYmyfsaMGZPvd0WPt/nmm0dxcfEK+/8lqNRbZmy88cbRtm3biIi4//77K5SPGDEiJk+eHNWqVYvOnTuvdr9DhgyJgw8+OJYuXRoDBgyIE044Ya2NGQAAAAAAAADWVMOGDSMi4qOPPoo5c+ZUKF+yZEmMGTMmIiK/mUDVqlVj7733jojlr6l/9tln8eqrr0ZExAEHHJA/fsMNN0RKabn/ym7Hsemmm+aPLbuLRFk///rXv5Z724yycRx44IFr9geoBJUaiIiI6NWrV0REXHnllfn/uRHf7RrRvXv3iIjo0aNHPgkTETF48OBo0aJFdOrUqUJ/Tz31VPzxj3+MpUuXxi233CIMAQAAAAAAAECl22uvvaJWrVrx7bffxvHHHx/z58/Ply1evDjOOOOM+Pzzz6NKlSrxxz/+MV/Ws2fPyOVycdddd8UzzzyTP/7NN9/EcccdFyUlJXHQQQdFixYt1to4W7VqFbNnz47u3btHSUlJvuy2226LoUOHRnFxcZx22mlr5fF+SpV6y4yIiP333z9OPfXUuPHGG2P77bePTp06Ra1atWLo0KExe/bsaNeuXVx66aXl2syZMyfGjRsXCxcuLHd82rRpceCBB8bixYtj4403jldffTWfhvm+a6+9NurXr/+TPS8AAAAAAAAAKLP++uvHLbfcEsccc0wMHDgwXnrppWjbtm1UqVIlRo8eHVOmTImCgoK48cYbo1mzZvl2rVu3juuuuy7OPPPM6Ny5c3Ts2DE22GCDGD58eHz55ZfRvHnzuOWWW9baOHO5XDzwwAPRvn37uPfee2PEiBHRtm3bmDRpUrzxxhtRVFQU9957b2y44YYV2t5xxx1xxx135H//8ssvIyLihBNOiHXWWSciIjbaaKMYPHjwWhvvylR6ICIiol+/ftGuXbu46aab4tVXX40lS5bEpptuGj179owzzjgjqlatulr9fPPNN7Fo0aKIiPjiiy/innvuWWHdPn36CEQAAAAAAAAA8LM54ogjomXLlnHDDTfEK6+8EkOHDo2UUmy00UZx+OGHx6mnnhrbbrtthXZnnHFGtGzZMq677rp44403YsGCBbHJJpvEeeedF+edd14+bLC2NG/ePN5555247LLL4oknnojBgwdHnTp14sADD4zzzz8/Wrduvdx2X3zxRYwcObLC8Q8++CD/c+PGjdfqWFfmFxGIiIg4+OCD4+CDD16tul27do2uXbtWON6kSZNIKa3lkQEAAAAAAADA2rH11lvHXXfdtcbtdtttt9htt91+9OPvvPPOq7WuvuGGG0b//v2jf//+q913nz59ok+fPj9idGtXQWUPAAAAAAAAAABgbROIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzBGIAAAAAAAAAAAyRyACAAAAAAAAAMgcgQgAAAAAAAAAIHMEIgAAAAAAAACAzPnFBCIGDhwYO++8c9SrVy9q1aoVW2+9dVx99dWxZMmSH9Tfm2++GV26dIkGDRpE9erVo2nTpnHKKafEtGnT1vLIAQAAAAAAAGD1re31cZbvFxGIOP300+Pggw+Of//737HtttvGnnvuGZ9//nmce+65seuuu8a33367Rv098sgjsf3228cjjzwSjRs3jv322y8KCgqif//+8dvf/jYmTpz4Ez0TAAAAAAAAAFixtb0+zopVeiDisccei379+kVxcXGMHDkynn322Xj00UdjwoQJ0bJlyxgxYkT07t17tfv7z3/+E0cffXQsXbo0br311njjjTfioYceivHjx8cRRxwRU6dOjcMOOyxSSj/hswIAAAAAAACA8tb2+jgrV+mBiL59+0ZERM+ePaN169b54/Xr14+bb745IiL69+8fc+bMWa3+brjhhvjmm29it912i27duuWPFxYWxoABA6JOnToxatSoeO6559biswAAAAAAAACAlVvb6+OsXKUGIqZMmRKjRo2KiIjDDjusQvlOO+0UjRo1ikWLFsVTTz21Wn0OHjx4hf0VFxfHvvvuGxERgwYN+qHDBgAAAAAAAIA18lOsj7NylRqIGDt2bERErLvuutG0adPl1mnTpk25uiszb968mDhxYrl2P6Y/AAAAAAAAAFgb1vb6OKtWqYGISZMmRUTEJptsssI6jRo1Kld3ZT799NP8zyvqc036AwAAAAAAAIC1YW2vj7NqlRqImDdvXkRE1KpVa4V1iouLIyJi7ty5q93fyvpck/4AAAAAAAAAYG1Y2+vjrFpRZQ+Atefmm2+u7CHwP84c5JfAPKSymYP8EpiHVDZzkF8C85DKZg7yS2AeUtnMQSqbOcgvgXkIlatSd4hYZ511IiJiwYIFK6wzf/78iIioXbv2ave3sj7XpD8AAAAAAAAAWBvW9vo4q1apgYgmTZpERMTkyZNXWKesrKzuyjRu3Dj/8+eff/6j+wMAAAAAAACAtWFtr4+zapUaiGjVqlVERMycOTMmTZq03DqjR4+OiIjWrVuvsr/atWvHZpttVq7dj+kPAAAAAAAAANaGtb0+zqpVaiBi4403jrZt20ZExP3331+hfMSIETF58uSoVq1adO7cebX6POCAA1bY3/z582PIkCEREXHggQf+0GEDAAAAAAAAwBr5KdbHWblKDURERPTq1SsiIq688soYM2ZM/vjMmTOje/fuERHRo0ePqFOnTr5s8ODB0aJFi+jUqVOF/k4//fSoWbNmvPDCC3H77bfnj5eUlET37t1j9uzZ0bZt29hjjz1+qqcEAAAAAAAAABX8kPVxfrhcSilV9iBOO+20uPHGG6NKlSrRqVOnqFWrVgwdOjRmz54d7dq1i+effz5q1KiRr3/33XfHMcccE40bN45PP/20Qn8DBw6MQw89NEpKSmK77baLJk2axKhRo+KTTz6JBg0axIgRI/K31gAAAAAAAACAn8uaro/zw/0iAhEREQ8//HDcdNNN8dZbb8WSJUti0003jSOOOCLOOOOMqFq1arm6qwpERES8+eab0bdv3xg+fHjMmTMnNtpoo9hnn32id+/e0aBBg5/hGQEAAAAAAABARWuyPs4P94sJRAAAAAAAAAAArC0FlT0AAAAAAAAAAIC1TSACAAAAAAAAAMgcgQgAAAD+q5SWllb2EAAAAAD4LyAQAQAAwH+NefPmRUFBQZSUlFT2UAAAAAD4hROIAAD4L7N06dJyv1sUBP5X7LPPPrHJJpvE1KlTo7Cw0PkPAAAAgJUSiAAA+C9SUlISRUVFMW3atDj77LMjIqKwsLCSRwXw0ystLY1PP/005syZEzvvvLNQBJUupRQRbuECAABUrrLPJt//GfiOQARrZNkLPk6q/FKYi1Q2c5CfU2FhYcycOTM6deoU119/fdx0002VPSSAn1xpaWkUFBTE2LFjY+edd45x48ZFhw4dhCKoFGXzrew94JIlSypzOBARPpNQecrmXkppuT/DT21Fc80c5OewvHkmLMvPqWy+5XK5/LGyn81F+D+55J0Bq6GkpKTct0/LLkjCz+n78+77v6eUyr3ww9pWdi4sm2szZsyI+vXr58udG/kpLXtx8bTTTouHH344zj777Dj99NOjSpUqlTw6/les6LXW+Y+fw9KlS6OoqCiWLFkSu+22WwwfPjw233zzeOWVV6JBgwYVPrPAT6FsHn799dfRr1+/+Oyzz+Lrr7+Orl27xk477VTuvSH8VMrOdyUlJZHL5fI7iOVyOZ+L+Vl9/z3g7Nmzo27durFo0aKoVq2a+chPrux8uHjx4li0aFGMHz8+1ltvvWjYsKHPyfzklp1/CxcujNmzZ8cmm2xS2cPif0jZZ5N58+bFc889F6NHj46SkpL41a9+FUcddVSsu+66lT1E+MUQiGCVyk6qc+bMiXvuuSfGjBkTEydOjFatWkWHDh2iS5culT1E/gcse4H7mWeeiTfffDPefvvtqFevXnTs2DE6dOgQG2+8sQvh/GSWvfjdv3//eP311+OTTz6Jxo0bx8477xyHH354NGrUyBzkJ1E2rxYuXBjVq1ePjh07xrrrrhsPP/xwVKlSxbzjZ1E2zxYtWhRz586Njz/+OIqKimKbbbaJ0tLScoEx+KkIRVCZyhb+pk+fHrvuumu8//775cqPOeaYOOGEE2LbbbetpBHyv6DsPDdr1qzo1atXvP/++zFv3rzo2LFjHHvssbH11lsLKvKzWPY195///Gc888wzMWzYsGjYsGFsuOGG0adPn/jtb39rUZqfTNkcnDlzZpxzzjnx2muvxUcffRTFxcWx5ZZbxgUXXBDbbbddrL/++pU9VDJo2fl31llnxbvvvhtTp06NHXbYIU477bT43e9+F8XFxT4j85Mpm4PTp0+PLl26xIgRI6K0tDQfkG3WrFlcfvnlsccee0S9evUqe7hQ6QQiWKllT6r77LNPjBo1KmrUqBEREd9++21ERJxyyilx7rnnxq9+9avKHCoZtuzFnN69e8fVV19dYVva3/3ud3H33XfHb3/7W280WevKzoXTpk2LPfbYI955552oX79+VK9ePb7++utYsGBBNG/ePB599NHYcsstzUF+EjNmzIj27dvHDjvsEM8//3zcdtttsddee1n842ex7MWeU045JYYPHx5TpkyJiIg2bdrEH//4x+jatWtssMEGzoH85IQiqEzz5s2LvfbaK95666044ogj4uijj46XX3457rvvvvjggw9in332iXPPPTd23HHHyh4qGbRsKGeXXXaJDz74INZZZ51YsGBBlJaWxvrrrx+PPvpo7LTTTkIR/KSWnV/nnXdeXHXVVVG1atVo3LhxLFmyJD799NOoU6dO9OrVK4444ojYaKONKnnEZM2y58MOHTrEuHHjonXr1tG8efP4+OOP44033oh69erFiSeeGN27d4+GDRtW9pDJkLLPvMvOv/XWWy/mzZsXixcvjs022yxOOeWUOPLII6Nu3bo+I7PWlc2pmTNnRocOHWLixIlx6KGHxlFHHRWLFy+OQYMGxV133RV169aNa6+9Ng4++OD8uh78r/LJiBVKKUVhYWF8/fXX0alTp3j33XejR48eMXHixHj77bfj6aefjg022CD+9re/xV//+teYM2dOZQ+ZjCr7kN2nT5+4/PLLY9ttt40nn3wyPvjgg3jxxRfjj3/8Y7z11luxxx57xKRJk7zBZK0rLCyM2bNnx1577RXjx4+Ps88+OyZOnBgjR46Mjz/+OHbfffcYN25cHHrooTF9+nRzkJ/ECy+8EOPGjYsnn3wypk+fHp9++mlEuC8qP72y3R+mT58e7dq1iwcffDCaNm0a55xzTuy5554xbdq06NWrV3Tv3j2+/PJL50B+ckVFRbF48eKoUqVKvPDCC9G+ffuYMGFCdOjQIaZOnZrfRh7WlmXn03vvvRfjx4+Pc845J2666abYYYcdomfPnnH99dfH73//+xgyZEhceeWV8eqrr1biiMmqgoKC+Oabb+LII4+ML774Is4444x48803Y8iQIXH44YfH9OnTo2PHjvHKK69EQUGB+0bzkym7TnPVVVfFVVddFXvssUcMHz483nnnnZg4cWJcd911MWfOnLj22mtjxIgRsXTp0koeMVlTUFAQ8+bNiy5dusSkSZPi4osvjtGjR8d9990Xr7/+elxxxRXx9ddfx9NPPx0ffvhhZQ+XjMnlcrFo0aL485//HFOnTo1evXrFe++9F2+++WaccMIJMWPGjOjbt2/ccccdMXv27Pw39mFtyeVysXDhwjj99NPjww8/jPPOOy9uv/322HXXXWPPPfeMvn37xrrrrhslJSUxffr0qFq1amUPGSpdUWUPgF+uXC4XS5cujd69e8d7770XvXr1it69e0e1atUiImKzzTaLWrVqxYYbbhhVqlSRMOMn9fTTT8c111wT7dq1iwEDBsRWW20VEREtWrSIYcOGRbVq1aJly5Yxa9asaNq0aSWPlqxJKcV1110XY8eOjXPOOScuu+yyKCoqitq1a0dJSUlMmTIlGjZsGHvuuWcUFxdX9nDJqH322SduvfXWOOuss2Lx4sXxzDPPxEknnRRFRUW+AchPqqCgIObPnx9/+tOfYtKkSXHppZfGeeedl59zAwcOjEMOOSTef//9eOWVV+JPf/pTJY+YLFnR+a1q1aqRUooqVarE0KFDY/fdd4+XX3452rdvH6+88kpsuOGGdopgrSgLhc2aNSs+/PDDePHFF6OwsDB69eqVv2d01apVY/fdd48aNWpELpeLJ554IiIievbsaacI1oqynXEiIqZNmxZvvPFGnHTSSdGnT5+oVq1abLbZZrHXXntF3bp146abbopddtklXnzxxejQoYP3ifxkXn/99ejXr180b948rrjiimjVqlX+G6tz5syJXC4XrVq1imbNmuXnL6wNZfPsoYceildeeSWOPfbYOOecc/LlpaWlce+990a9evVi7733jnbt2lXiaMmSZV+P586dG++8804cc8wx0adPnygqKooGDRrEpZdeGk2bNo3rr78+rr322oiI+POf/2ynCNa6L7/8Ml5++eXo2LFj9OnTJ398zpw5sdtuu8WcOXOid+/e0b179ygsLMy/J/TekP9VZj0rVVJSEi+//HL87ne/i4svvjgfhpg7d260bNkyPvvss+jRo0dccMEFUbVq1fjmm28qecRk1ciRI+Pbb7+NXr165cMQEREXXXRRXHrppdGpU6e46qqrYptttomIiIULF0aEb06zdpSWlsZLL70UTZo0iQsuuCD/4WfBggXxu9/9LsaPH5+/IFmjRo2YM2dOLFiwoJJHzX+zsm9QLfuN1OLi4jj00EPjr3/9a6yzzjoxZMiQ6NWrV0SEbwDykyl7HX3qqafipZdeikMOOST+8pe/5D88L1q0KC6++OKoVatWHHLIIfGHP/yhModLxixdujQKCgpi7ty5MXDgwPjLX/4SPXr0iGuuuSY++OCD/DmyqKgonn/++ejYsWNMnDgxOnToEF999VX+og/8GGWhsNatW0fnzp3jvffei44dO0ZRUVEsXbo0H86JiNhpp52iZ8+e0blz53jiiSfiyiuvjNdee62SnwFZUFRUFNOmTYurrroqXnrppVhvvfXy12hKSkry57q//e1vcfLJJ0dKKXbZZRc7RfCTGjduXEydOjXOOeecaNWqVUR89+WqPn36xCWXXBJ77bVXXHHFFfnrNGXXDM1HfqyyBeURI0ZEzZo1o1evXvlr1gsWLIitt946JkyYEGeddVacf/75UaNGjZg1a1b+9s+uFfJDlb0eX3rppfHCCy/ErFmz4swzz4yioqIoKSmJlFLUr18/unXrFmeffXZERFx77bV2iuAnMWrUqPjiiy9ir732yh9bsGBBtG/fPj788MO48MIL46yzzoqaNWvGwoUL44EHHoh58+YJQ/C/K8FKjB07NuVyuXT88cfnj82bNy+1bNkyVa1aNV1++eXp22+/zZfde++96cEHH6yMoZJh3377berYsWOqU6dOmjp1av74xRdfnHK5XNp7773TW2+9lT8+YcKEdNNNN6VZs2ZVxnD5LzVo0KA0adKk5ZZ9/PHHqXbt2qlDhw5p4cKFKaWU5s+fv8Jz4VNPPZX69u2bFixY8HMMnYyaOnVqOvjgg9PIkSPLHZ83b166/fbbU3FxcX7+lSkpKfm5h8n/iFNPPTXlcrn00Ucf5Y+VvSesUqVKufPg3Llz08cff5yWLFlSWcMlA5YuXZpSSmnatGlpp512Srlcrty/LbbYIl100UXpm2++ybdZsmRJ2nnnnVMul0ubb755+vLLL1NKzo38eAsWLEgHH3xwql69esrlcqlp06Zp8uTJ5eqUlpbmf37llVfS3nvvnapVq5bat2+fRo0a9XMPmYxZtGhR/ly4ww47pM033zzNmTMnLV68OF+n7LyZUkqnnHJKyuVyqaCgIL3yyisppfJzFNaGE044IeVyuTR06ND8sRVdp/niiy/SYYcdVuHcCT9E2fls++23TxtuuGF+Xs2dO3eF12mGDBmSdthhhzRv3rxKGTPZsHjx4tSpU6eUy+VShw4dUrNmzdKMGTPK1Smbn7NmzUrXXHNNatCgQWrQoEG6/vrr08yZMytj2GTUoEGDUi6XS+eee25K6bvPLCs6B86bNy/VrVs3nX322ZU1XKh0okCsVFni9rPPPouI79LcO+64Y4wbNy4uuuiiOPPMM6N69eoR8d03BC+//PIYOHBgLF68uNLGTPaUpRYXL16cT3P36dMn+vTpE507d47LL788tt5663z9W2+9Na677rqYMWNGpYyX/z4XXXRRHHTQQTFgwICYPHlyhfKaNWtG9erVY+7cuVGtWrWYP39+bL/99ss9F6aU4owzzojhw4f/3E+DDCktLY0LL7ww/43osWPH5svKdoq47rrrokqVKnHJJZdE3759I8JOEawdy86h9P+/vTJ+/Pj87VkiIubNm5d/T9inT59y58GxY8dGjx494pNPPvn5B08mpJTytyjo2LFjjBo1Ko499th4880348knn4yrrroqvv7667jmmmvisssui6VLl0ZJSUmFnSK23HLLmD59um/A8KOUlpZGzZo1484774zDDz88iouLY9asWfHUU0/FokWL8vWW/cZf+/bt47zzzottttkmJk2aFI0bN66s4ZMRuVwuunfvHhtvvHG8/vrrMXfu3Pjmm2+iSpUq+d1yCgsL8z/feOON0aNHj0gpRceOHWPkyJG26GatKTvXle2cWPae75JLLlnhdZpHH300HnjggXjvvfd+/gGTOSmlKC0tjWrVqsXUqVNj0qRJsXjx4mjXrt1yr9NERNxwww3x0UcfuVbIj1KlSpU46aSTYsstt4zXXnstPvvssxg6dGi5OmXvCevVqxfHHXdcnH322VFUVBRnn312DBw40A4RrDUNGjSIiIj33nsv3nvvvdhuu+1i3LhxceGFF1Y4B/bo0SOWLFkSnTp1qqzhQuWrtCgGvygr+tbUt99+m7baaqvUvHnz9Morr6StttqqwrcAy5x88smpSpUq6d577/05hkwGLfuNljJlc7PsGy733Xdfuv7661Mul0udO3cu942DlL77Zn6tWrVSly5d0uzZs3+WcfPfbenSpemmm25KW2yxRapdu3Y655xz0ueff54vLykpSfPnz0+77rpryuVy6Y477kitW7dOVatWTZdeemm5c2FpaWk666yzUlFRUbrhhht8I5Uf5d133037779/yuVyaccdd0xjxowpV75gwYJ06623plq1aqVq1arZKYK1omxXh1mzZqVPPvkkP5e6deuWcrlcevnll1NKKW211VbL/dZBSinttttuqV69emnChAk/7+DJlEWLFqVjjjkm5XK5dPHFF5c7r02ZMiU1bNgw/epXv0p9+/bNf0O67L3kkiVL0m9/+9uUy+XSlClTKmX8ZEvZuXHu3Lnpz3/+c8rlcqlJkybpqaeeqrAbzrLfwh85cmSaNm1aSslrMz/eokWL0uDBg1OTJk1SLpdLBx10UFq0aFFKqfxn6WV/Pvroo1Mul0ufffbZzz5esmHZc9f3z2OPP/54qlKlSjrqqKPSaaedlnK5XNpnn33S2LFjy9V74YUX0kYbbZQ6derkdZm16uabb065XC516dIlbbHFFvnPJ8vu1llaWpouvPDCVKNGjXTeeeeV21kH1sSy7/Eef/zxtOWWW+bn36effrrC+l9//XW6+OKL0+9+97v0xRdf/GzjJTuWnXulpaX5fzNmzEidOnVKhYWFqUGDBvlrg2W7G5e5/vrrU926ddNBBx2U5s6d+3MPH34xBCLIf1hesGBBevbZZ9Pw4cPzF7YXLlyYvwBep06dVK1atXTFFVdUWADs169fWm+99dKee+6Zvv7668p4GmTIE088kT7++ONyxwYOHFhum+QDDjigwuLga6+9ltq3b58aNGiQnnrqqZ9zyPyXW7RoUbr77rvTFltskWrVqlUhFJFSSgMGDMjPv+rVq6d+/fqV26a77Fy4/vrrp06dOlXYMg9+iA8//DD94Q9/WK1QRHFxcerVq1cljZQsmTZtWlpvvfXS/fffnz92xx13pFwul1q1apU222yzVKVKlXTZZZdVuDXQJZdckmrWrJnOOOOMCh/CYU189tlnqUmTJmnHHXcsd+G67FYt1atXT5deeml+DpbNt7KLRUuWLMnfam15oVtYnu8v9i1v7sybNy8df/zx+VtnrCoUsbx+YVXK5lBpaWm5+bNw4cL02GOPpU022STlcrl06qmn5s9/KwpFlN1K0rmQNbXsnBk2bFjq379/eumll/LHPvzww9SmTZv85+Q99tgj/3mlbN6+9tpraZdddkl169ZNjz766M/7BPivt6LXz7K5+dZbb6U2bdqkgoKCVFhYmM4666xyr8mlpaXphhtuSPXr10/bbbdd/r2hWwixur4/V5Y9Lw4ZMiRtscUWKZfLpZNOOmm5YYey9nPmzMkvRHs9ZnUtb658f07eeuutqbi4OBUUFKQ999wzTZw4sVz5xRdfnOrWrZt+/etf50OJzoH8rxKI+B9X9iZxxowZab/99ku5XC7tvvvu6cMPP8y/6Zw0aVL+GwjNmzevsBhz7rnnpnXWWSdtuumm+Rd+F3z4oa655pqUy+XSGWeckSZNmlSu7Jxzzkm5XC4VFhamq666qlzZ008/nbbddtuUy+XSgAEDfsYR89+u7E3gt99+mw9F1KhRI51zzjkVEt4nn3xyfg7+4x//SCml9M0336T58+enM888M9WsWTM1adIkf/9K50LW1PI+lKxOKOL2229PuVwuNWvWLM2ZM+fnGi4ZUzb/LrroopTL5dKHH36YP7ZgwYK077775s+BJ598coX21113Xapfv35q27ati42sls8++2yFc+TRRx9NuVwunXfeeflj8+fPX+49URctWpSeffbZ9O6776aUUrkL4V6LWV3L7gIxcODAdNZZZ6WuXbumyy+/PD333HPl6i4bimjWrNlyQxHwQ3z/wvfy5tW3336bBg8enBo2bJhyuVw65ZRTVhmK8HrMmlp2/lx++eWpfv36+estZSGblFK6++67U506dVIul0tHHXVUfoew0tLS9Mgjj+R3bPrb3/6Wb2M+sjrKzn/z589Po0ePTvfee2967LHH0rhx48p9Ue+mm25KjRs3ToWFhalr165p+PDhafr06WnixInpmGOOSVWrVk2NGjXKf+nFe0NWx8pCC2W7M6X03Zf6Nt9883woYlW74Dj/sbqW3b3zggsuSPvtt19q165d2meffdITTzxRLoBzwQUXpCpVqqTCwsJ00EEHpYsvvjhdddVVqUOHDimXy6XNNtssf41bIIf/ZQIR/8PK3gBOmzYt/eY3v0k1atRIRxxxRBo/fnz+xbmszgcffJAaNWqUcrlc+s1vfpMOOuigdNxxx6Xf/e53+WNOqvwQ3/8g0q9fv9SyZctUv3799Je//CV98skn+bL//Oc/6aSTTsp/++DYY49NPXr0SIcddliqUaNGKiwsTDfccEO+vjeZrI5lz1nffvtt6tu3b2rSpElaf/31U8+ePcttL/vZZ5+lE088MT8H27dvn3bZZZfUrFmzlMvl0tZbb52v71zI6iibJwsXLsx/2FmdUMSbb75Zrnz+/Pnpn//8Z/4ij/Mfq7KynZROO+20VK1atfTll1+WOz5kyJDUrl27lMvl0k477ZRefvnl9Omnn6Z33303HXXUUalKlSppk002yZ8HXWxkZY455pi0xRZbpFGjRi33nPXMM8+kgoKC1LNnz5TSd9+qWtGtWubOnZvWXXfddOGFF/5s4ydbyl6Pp02bljp06JAKCgrK7U5Xr169dMwxx5Rr8/1QxNNPP20bbn6UsveCs2fPTtddd1069NBD09Zbb5323XffdOutt5bbjbMsFLHxxhuvNBQBP8Syr8vnnntuyuVyqV27dmnIkCHLrX/zzTfnAxONGjVKHTp0SNtss03K5XKpuLg49e/fP1/X+0NWx7Kvy7vuumuqXbt2/jW5uLg4nXDCCeXCiv37909bbbVVvk7Dhg1TzZo1Uy6XSx06dMh/TnZ+ZHWUvR7PmTMnDRgwIB111FHp0EMPTeeff365QFiZNQ1FwKosu2639dZb53crLjuvVa1aNR1xxBHphRdeyLf529/+lnbYYYdyn2E22WSTdPTRR6f//Oc/KSXnQBCI+B83Z86c1KFDh1S9evXUt2/f5X4wKTtRfvzxx+nwww9Pm222Wf6k2rJly3T66aenr776qlxdWB3Lzpe77rornX766WmLLbbI70iy/vrrp7PPPrvcThELFixIV199ddpggw3y87BatWpp7733Lrf9og/ZrI6yOTh9+vR09NFHpzZt2qTi4uJUq1atlMvl0gYbbJDOPffccqGIpUuXphtuuCG1adMm1a1bN9WqVSu1a9cu9enTx9bc/CDTp09Pe+yxRxowYEB+IWV5i4Pvvvtu6tixY/6C5KhRo5bbn/nHqnTv3j3lcrl02WWXlTteNncOOeSQVLt27fyH5mXLH3vssbTnnnvmX4PLPpDncrm0yy67uNjIapkxY0b+Yk379u3LhSLK/vvKK6+kXC6Xfv3rX6cxY8akrbfeOlWtWjVddtllFW7f9+c//zlVqVIlDRo0qFKeD//dyubcjBkzUosWLVL16tVT165d07PPPpvuuOOOdNhhh6X11lsv5XK5tPfee5dru2woonbt2mnYsGGV8RTIgLLXzalTp6btttsuf7F72YvaBx10UHr66afzbb4fijj99NPLnR/hx7rttttSLpdL++67b3rnnXcqlC973eXJJ59M3bt3T+utt16qXbt2+tWvfpW6d+9ebtHadRrWxMyZM9OWW26Zcrlc6tSpU+rRo0faZ599UrVq1VIul0tbbbVVeuihh/L1X3vttXTdddelNm3apG233TYdccQR6Z577nHbINbIsmGcnXbaKeVyuVRUVJRq1KiR3z37xRdfrBCCXTYU0aNHjwq34YU1NXfu3NS+fftUu3btdMopp6R33303jRw5Mp111lmpWbNmqaCgIO2yyy7p+eefz7f54osv0osvvpjuu+++9I9//CN99tln+VtMOgeCQMT/rLKLPmX3gz7mmGPyH0yWd3IsK1uwYEGaM2dOeuONN9Lo0aPTokWL8m8AnFRZE8su9p1zzjmpevXqafPNN0/nnHNO6tOnT9puu+1SUVFRKi4uTmeddVa5nSJSSumTTz5Jo0aNSs8++2yaMGFCmj9/fr7Mh2xWR9k8mT59emrRokVab7310mGHHZYef/zx9MADD6Q99tgjrbPOOmmdddZJ55xzTrlQREopff3112ny5Mlp/PjxqaSkpMLOOrA6SktL05VXXpm/oHPPPfesMBSxePHidPPNN6eCgoJUvXr11KFDhzRy5MjKGDb/5W655ZZUVFRUIRRRNvc6dOiQGjVqlGbNmpU/py27WD1r1qx00003pUMPPTTtscceqXv37mnQoEH5b656T8jq+OSTT8rtfLO8nSLKbulXp06dVK1atXTttdeWe89XWlqarr/++rTuuuumAw880C2D+MEWLVqUjjrqqJTL5VLfvn3Llc2ePTs98cQTaaONNkq5XC517dq1XPm8efPSn/70p7TBBhv4RiA/SNm5b9asWWmrrbZKtWvXTqeeemqaNGlSevXVV9ONN96Yvz1G+/bty4UiFi1alAYPHpz/UsEFF1xQWU+DjPn6669Thw4d0jrrrJNGjx69wnrff983c+bMNHPmzAqvyT4nszqWvbZy7rnnpvXWWy9dffXV5eo89thjaf/990+5XC5tueWW6dlnny1XvrxbDZl/rI6yeTJjxoy05ZZbpqKionTUUUelN998M02aNCn/xYCmTZumf/3rXxVCEU8++WT69a9/nb/tn3nHmlr2/DVy5MhUs2bNdOGFF5a7TUtKKQ0aNCi1b98+FRQUpEMPPXSVu8XaRRa+IxDxP+7II49MRUVF6YMPPkgprfwCthdxfgq33HLLcr9xsHDhwnT11Venpk2bplq1alUIRXz/hfz73yqE1fHNN9+kAw88MOVyuXTFFVeUe+M5f/78dN1116UmTZqkddZZp8JOEc6JrC2ffPJJOvfcc1OtWrVSixYtVhqKGDduXKpXr15q2bJlyuVyab/99rM9Nz/IP/7xj+WGIlJKaZtttklbb711hYuJy16gXBHnRlZH2TyZOHFi2nvvvVMul0vbb799GjVqVLk59Nxzz+XvPb7NNtukd999t1wfF198capTp05q0aJFfiHaHGRVlnce++KLL1KTJk3SNttsk7/twPIuctevXz/Vrl07Pfnkkyml/7touWDBgjRz5syUklAYP8ySJUvSKaecknK5XOrTp09+HpYZNmxYfqewAw88MM2YMSNftnjx4vTggw+mNm3aVAhxw8qs7HPE22+/nXK5XDrkkENSSis/ty17Xl32ddhrMmuibI6VhV8POOCA1LFjx/xr7bI74IwcOTIfivjzn/+c5s+fn29vDvJjzJ8/P+23336puLg4XX755fmF6P/85z/5sHYul0uNGzdOQ4YMWe5C9U477ZS/tTisqalTp6abbrop3XTTTalJkyb594QlJSXlzmmDBg1Km222WapatWp6/PHHU0rWRWBVCoL/WbNnz473338/CgoKYunSpRERUVhYuML6EydOjIULF/5cwyPjUkrxzTffxODBgyMiolevXtGyZcuIiFiyZElUq1YtTjvttPjLX/4StWvXjr///e9x8803x6RJkyIiIpfLleuv7PfvH4eVmTp1aowZMyZ++9vfxrnnnhtFRUVRWloapaWlUatWrejevXuceuqpUVBQEH//+99jwIAB8dlnn0VEREGBl1DWjqZNm0b37t2je/fuMXny5Ljiiivi/vvvjyVLlkQul4uUUpSWlkbEd6/TRUVF0bNnzzjmmGPihhtuiCpVqlTyM+C/SdlcOuKII+Lvf/97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NhsLFy7k999/Z/78+dhsNrJkyULFihVp27YtwcHBJCQksH79ekqUKIHVatXsUxERkcdg48aN1K9fn/79+zN8+HAAoqOjadeuHatXr8ZkMpE1a1b++usvAFavXs27776L1Wrl+vXreHl54ezsrL5ZRETkOaZAhIiIiIiIiIjIE2Kz2RwluQH27dvHTz/9xPLlyzl48CBGoxGLxQJA06ZNWbJkSXo1VURE5IWzY8cOqlSpgre3N0OHDiUuLo4vvviC8+fPU7NmTcaPH8+rr77KzJkzGTVqFJ9//jlTp07F1dU1vZsuIiIij4kCESIiIiIiIiIiT1lSUhLffvstO3bsYPHixQD4+vry448/kjdv3ruCFCIiIvL37H2nzWbDZrM5KjqMGDGCQYMGObYrW7Ysn376Ka1atSJjxowAbNmyhVq1atGtWzcmT56cLu0XERGRJ0OBCBERERERERGRp+jONcjDwsKYNWsWK1asYPbs2bRr1y4dWyciIvJ8eZDlLFasWMHZs2fJnDkzjRs3JkuWLGn64rZt27J48WK++eYb3n333SfdZBEREXmKFIgQEREREREREUkHt1eB+O677/jwww+pXbs233//PS4uLqoQISIi8g/MZjMmk4nY2Fi+++479u7dy/nz53n99depWbMm9erVu+d+t4cTp02bxoABA6hYsSLffPMN3t7eT/MURERE5AlTIEJEREREREREJJ3YZ7UmJCRQpkwZYmJiOHr0KFmyZEnvpomIiDzT7KGGyMhIPvjgA7Zv337XNn369OGzzz6jUKFCAHctSdWvXz/mzJmDl5cXoaGh+Pr6PlDFCREREXl+qFcXEREREREREUkn9gGXK1euEB8fT7Zs2bBYLOncKhERkWebzWbDaDQSFRVF9erV2b9/P61atWLnzp0sWLCA7t27AzB27FjGjh3LqVOnADAYDMTGxrJw4UJKlSrF2LFjKVCgAFu3bsXX1xeLxaIwhIiIyAvGlN4NEBERERERERF5mUVGRjJ06FAuX77MJ598wiuvvJLeTRIREXmmGQwGUlJSCAoK4sSJE4wcOZKgoCBcXFyoUKECAKVKlaJv374sXLiQ7NmzM2bMGOBWZYkTJ05w+fJlevbsSXBwMK+88kqaZTRERETkxaElM0RERERERERE0tHFixf55JNP8PLy4ocffgDuLuktIiIiad24cYNKlSrh4uLCwYMHgVthB4PB4KjysGTJElq0aAHAunXrqF+/PgCJiYlcvHgRf39/3NzctEyGiIjIC0w9vIiIiIiIiIhIOvLx8WHJkiWOMITValUYQkRE5A5WqzXN70ePHuXkyZP4+PgAkJSUhNFoxMnJCfs80E8//ZRevXoBsHHjRsdxMmTIQMGCBXFzc8NmsykMISIi8gJTLy8iIiIiIiIiko6cnJzImzcvgAZlRERE7sFiseDk5ERsbCxHjhwBIHPmzACcPHmSmzdvOsINcGtJDYvFAkDZsmUd29k/u51CiCIiIi82PWGLiIiIiIiIiDwjNCgjIiKSltVqxWg0EhkZSbFixejTpw+nT5+mcOHClCpVinPnzjF//nwSExMxGAzcuUp4kSJFAPD19QXU14qIiLxsFIgQEREREREREREREZFnkpOTE4mJibRs2ZKoqCiKFy+Ov78/JpOJxo0b4+LiwqJFi1i/fj1JSUkYDAbH8hlWq5V58+YBUK5cOeDupTdERETkxaZAhIiIiIiIiIiIiIiIPFPMZrPj54sXL7Jv3z66dOnC8OHDcXV1BaBx48YEBgZy6NAhhg8fzpw5c4iNjcXNzQ2AqVOnsmTJEsqUKcOHH34IoKWpREREXjIG2531o0RERERERERERERERNJZREQEy5cvx8XFhV69enH27FmyZ8+OxWLBaDQCcOzYMYKDg9m8eTMpKSnky5ePYsWK8ddff7F79278/f3Ztm0buXPnxmq1KhAhIiLyklEgQkREREREREREREREninJycnUrFmT3377jcqVK3P9+nV2796Nh4eHYxubzYbBYODs2bN8/fXXrFy5kkOHDgGQN29eypcvz6RJk8iVK1eaEIWIiIi8PBSIEBERERERERERERGRdGcPONh98cUXjBs3jvPnz2O1Wlm+fDmNGze+574WiwWLxcL+/ftJSkqiSJEieHh44O7urjCEiIjIS0y1oUREREREREREREREJF1ZLBYMBgOpqamcO3cOgM8//5yBAweSJ08eAL7//nsuXLhwz/0NBgMuLi5UrFiR6tWr88orr+Du7o7NZlMYQkRE5CWmQISIiIiIiIiIiIiIiKQbs9mM0WgkOjqaXr16ERgYyKBBgwBo0aIFQ4cOxcfHh6VLlzJz5kyuXbt21zGcnO493HF7xQkRERF5+ZjSuwEiIiIiIiIiIiIiIvJyslgsmEwmIiIiqF+/PocOHSIgIIBKlSoRHx+Ph4cHTZs2xWAw0Lt3b8aPH4/RaKRnz55ky5YtvZsvIiIizzgFIkRERERERERERERE5KmzL2cRHR1NYGAgZ86cISQkhMGDBzuWubBarTg5OdGkSRMAevfuzZgxYwAUihAREZF/pECEiIiIiIiIiIiIiIg8dQaDgdTUVIYNG8bhw4fp378/gwYNwmg0YrFYMBqNODk53TcU4eTkRNeuXcmePXs6n4mIiIg8qww2m82W3o0QEREREREREREREZGXz82bN6lRowaxsbEcP34co9HoCEDc7vb/W7p0Kf379+fChQuMGjWKPn36YDAY0qP5IiIi8oxThQgREREREREREREREUkX+/btY//+/dSqVQuj0UhycjKurq53befk5ERiYiIZMmSgadOmJCQkMGfOHD755BOFIUREROS+nP55ExERERERERERERERkccvY8aMjqoQAK6urtxZ2NpisQCwc+dOhgwZAkDbtm3Zvn07uXPnxmw2P9U2i4iIyPNDgQgREREREREREREREUkX2bNnJ3PmzISFhbF27VoADAaDIxRhtVoxGo0AjBkzhoULF3L27FkAMmTIAIDJpGLYIiIicm8KRIiIiIiIiIiIiIiISLrw8/Pj008/xWw289VXX3Hw4EHgVigiOTkZJycnbDYbo0aNYuvWrTRo0AAfH590brWIiIg8Lwy2O2tPiYiIiIiIiIiIiIiIPCXnz5+nYcOGHD16lA8//JDmzZvz9ttvOz4fNWoU48ePx9fXl82bN5MjRw5sNhsGgyEdWy0iIiLPAwUiREREREREREREREQkXR0/fpyPPvqIY8eO4erqSvXq1XFxceH8+fMcOXKEfPny8fPPP+Pv74/FYnEsoyEiIiLydxSIEBERERERERERERGRdHfu3DkmTZrE0qVLuXHjBgCFCxemUqVKjBgxgldffVVhCBEREXkoCkSIiIiIiIiIiIiIiMgzwWq1cuHCBS5dukRsbCzly5fHw8ODDBkyKAwhIiIiD02BCBEREREREREREREReabZbDYMBkN6N0NERESeM07p3QAREREREREREREREZG/ozCEiIiIPAoFIkREREREREREREREREREROSFo0CEiIiIiIiIiIiIiIiIiIiIvHAUiBAREREREREREREREREREZEXjgIRIiIiIiIiIiIiIiIiIiIi8sJRIEJEREREREREREREREREREReOApEiIiIiIiIiIiIiIiIiIiIyAtHgQgRERERERERERERERERERF54SgQISIiIiIiIiIiIiIiIiIiIi8cBSJERERERERERERERERERETkhaNAhIiIiIiIiIiIiIiIiIiIiLxwFIgQERERERERERERERERERGRF44CESIiIiIiIiIiIiIiIiIiIvLCUSBCREREREREREREREREREREXjj/D8J//tutZE46AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "msno.bar(df) #visualising the missing values using a bar graph"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        },
        "id": "IqP69c6B9uBU",
        "outputId": "c558e7f9-db11-48e6-b06c-e9196ba2414a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2500x1000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "msno.matrix(df) \n",
        "#visaulising the distribution of missing values using a matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 712
        },
        "id": "MioOTkGO9t9u",
        "outputId": "4de8c118-26bd-4cfa-943b-48668376661e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "msno.dendrogram(df) #visualising the missing values using a dendogram, this also shows highly correlated columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 967
        },
        "id": "tY26Bc-49t3Q",
        "outputId": "a428bcab-7df0-4d90-b9d2-5d6bbcb7fb1a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1200 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "msno.heatmap(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 522
        },
        "id": "pu-nwzcBOEZW",
        "outputId": "f394d2ba-bcb4-42a6-d126-c974998c8526"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        public_reference  mileage reg_code standard_colour standard_make  \\\n",
              "0        202006039777689      0.0      NaN            Grey         Volvo   \n",
              "17       201911043995897      5.0      NaN             NaN        Nissan   \n",
              "19       202008272998331      0.0      NaN           White    Volkswagen   \n",
              "37       202001306737473      0.0      NaN           White          Fiat   \n",
              "44       202003178531910      0.0      NaN             NaN         Honda   \n",
              "...                  ...      ...      ...             ...           ...   \n",
              "401860   202010024501227     10.0      NaN          Silver    Mitsubishi   \n",
              "401890   202010104843364      5.0      NaN             Red           BMW   \n",
              "401902   202010134960554     10.0      NaN           White           BMW   \n",
              "401905   202010144983518      0.0      NaN             Red    Land Rover   \n",
              "401971   202010285515882     10.0      NaN            Grey        Nissan   \n",
              "\n",
              "            standard_model vehicle_condition  year_of_registration  price  \\\n",
              "0                     XC90               NEW                   NaN  73970   \n",
              "17                 X-Trail               NEW                   NaN  27595   \n",
              "19                 T-Cross               NEW                   NaN  25000   \n",
              "37                   Panda               NEW                   NaN  13999   \n",
              "44                   Civic               NEW                   NaN  19495   \n",
              "...                    ...               ...                   ...    ...   \n",
              "401860        Shogun Sport               NEW                   NaN  31999   \n",
              "401890                  Z4               NEW                   NaN  47910   \n",
              "401902            3 Series               NEW                   NaN  35023   \n",
              "401905  Range Rover Evoque               NEW                   NaN  44995   \n",
              "401971                Leaf               NEW                   NaN  28820   \n",
              "\n",
              "          body_type  crossover_car_and_van              fuel_type  \n",
              "0               SUV                  False  Petrol Plug-in Hybrid  \n",
              "17              SUV                  False                 Diesel  \n",
              "19              SUV                  False                 Petrol  \n",
              "37        Hatchback                  False                 Petrol  \n",
              "44        Hatchback                  False                 Petrol  \n",
              "...             ...                    ...                    ...  \n",
              "401860          SUV                  False                 Diesel  \n",
              "401890  Convertible                  False                 Petrol  \n",
              "401902       Saloon                  False                 Petrol  \n",
              "401905          SUV                  False                 Petrol  \n",
              "401971    Hatchback                  False               Electric  \n",
              "\n",
              "[31570 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bd0da171-b55f-415e-b0b7-87e291f9eccf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>public_reference</th>\n",
              "      <th>mileage</th>\n",
              "      <th>reg_code</th>\n",
              "      <th>standard_colour</th>\n",
              "      <th>standard_make</th>\n",
              "      <th>standard_model</th>\n",
              "      <th>vehicle_condition</th>\n",
              "      <th>year_of_registration</th>\n",
              "      <th>price</th>\n",
              "      <th>body_type</th>\n",
              "      <th>crossover_car_and_van</th>\n",
              "      <th>fuel_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>202006039777689</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Volvo</td>\n",
              "      <td>XC90</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>73970</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol Plug-in Hybrid</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>201911043995897</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Nissan</td>\n",
              "      <td>X-Trail</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>27595</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>202008272998331</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>White</td>\n",
              "      <td>Volkswagen</td>\n",
              "      <td>T-Cross</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>25000</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>202001306737473</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>White</td>\n",
              "      <td>Fiat</td>\n",
              "      <td>Panda</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>13999</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>202003178531910</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Honda</td>\n",
              "      <td>Civic</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>19495</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>401860</th>\n",
              "      <td>202010024501227</td>\n",
              "      <td>10.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Silver</td>\n",
              "      <td>Mitsubishi</td>\n",
              "      <td>Shogun Sport</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>31999</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>401890</th>\n",
              "      <td>202010104843364</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Red</td>\n",
              "      <td>BMW</td>\n",
              "      <td>Z4</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>47910</td>\n",
              "      <td>Convertible</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>401902</th>\n",
              "      <td>202010134960554</td>\n",
              "      <td>10.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>White</td>\n",
              "      <td>BMW</td>\n",
              "      <td>3 Series</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>35023</td>\n",
              "      <td>Saloon</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>401905</th>\n",
              "      <td>202010144983518</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Red</td>\n",
              "      <td>Land Rover</td>\n",
              "      <td>Range Rover Evoque</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>44995</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>401971</th>\n",
              "      <td>202010285515882</td>\n",
              "      <td>10.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Nissan</td>\n",
              "      <td>Leaf</td>\n",
              "      <td>NEW</td>\n",
              "      <td>NaN</td>\n",
              "      <td>28820</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Electric</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>31570 rows × 12 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd0da171-b55f-415e-b0b7-87e291f9eccf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bd0da171-b55f-415e-b0b7-87e291f9eccf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bd0da171-b55f-415e-b0b7-87e291f9eccf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "missing_data = df.loc[df['reg_code'].isna() & df['year_of_registration'].isna()]\n",
        "missing_data\n",
        "#it is observed that only the new vehicle have missing year of registration and registration code, hence I will fill the missing year of registration with 2022"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "Fe1NMalBTkDe"
      },
      "outputs": [],
      "source": [
        "#filling the new cars with a year of registration 2021\n",
        "df['year_of_registration'] = np.where(df['vehicle_condition'] == 'NEW', 2021, df['year_of_registration'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m6u5ENGKXECN",
        "outputId": "2ee2cdb6-ba9e-46fd-85f2-8927f1291838"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "public_reference             0\n",
              "standard_make                0\n",
              "standard_model               0\n",
              "vehicle_condition            0\n",
              "price                        0\n",
              "crossover_car_and_van        0\n",
              "mileage                    127\n",
              "fuel_type                  601\n",
              "body_type                  837\n",
              "year_of_registration      2062\n",
              "standard_colour           5378\n",
              "reg_code                 31857\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "df.isna().sum().sort_values() #checking the update of null values after filling the year of registration."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kFduaowmMXKR",
        "outputId": "340b2fce-b2c4-45db-880c-87f0cbe83dab"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([nan, '61', '17', '16', '64', '13', '08', '19', '60', '69', '66',\n",
              "       '12', '18', '65', '09', 'B', '10', '14', '03', '67', '63', '15',\n",
              "       '68', '56', '20', '70', '62', '11', '05', '59', '58', 'W', '02',\n",
              "       '57', '06', '52', '53', '04', 'J', '07', '55', '51', 'X', 'D', 'S',\n",
              "       'Y', '54', 'H', 'K', 'E', 'L', 'V', 'M', 'G', 'T', 'N', 'P', 'A',\n",
              "       'F', 'R', 'C', '94', '85', 'CA', 'm', 'FW', '723xuu', '95', 's',\n",
              "       '38', 'k', '37', 'p'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "df['reg_code'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6Zv6t-QxPGUF",
        "outputId": "559943c4-165c-4b10-d63e-04f266496a0c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2021., 2011., 2017., 2016., 2015., 2013., 2008., 2019., 2010.,\n",
              "       2012., 2018., 2009., 1984., 2014., 2003.,   nan, 2006., 2020.,\n",
              "       2005., 2000., 2002., 2007., 2004., 1991., 2001., 1986., 1998.,\n",
              "       1990., 1993., 1987., 1994., 1999., 1970., 1988., 1995., 1997.,\n",
              "       1969., 1992., 1989., 1996., 1976., 1983., 1980., 1973., 1962.,\n",
              "       1967., 1972., 1982., 1968., 1979., 1964., 1933., 1981., 1985.,\n",
              "       1978., 1971., 1974., 1966., 1977., 1961., 1965., 1007., 1957.,\n",
              "       1515., 1963., 1063., 1954., 1975., 1955., 1009., 1016., 1960.,\n",
              "       1956., 1959., 1909., 1934., 1958., 1010., 1950., 1008., 1018.,\n",
              "        999., 1017., 1952., 1006., 1015.])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "df['year_of_registration'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 145
        },
        "id": "CkOYKNOVZ2ol",
        "outputId": "63e894d6-038d-436b-a1d2-087ed16ec5dc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       public_reference  mileage reg_code standard_colour standard_make  \\\n",
              "75265   202010205206080   3996.0       69           White         Honda   \n",
              "\n",
              "      standard_model vehicle_condition  year_of_registration  price body_type  \\\n",
              "75265           CR-V              USED                   NaN  32995       SUV   \n",
              "\n",
              "       crossover_car_and_van fuel_type  \n",
              "75265                  False       NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-229d4ea6-6fb2-440f-afe9-eced19c568a2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>public_reference</th>\n",
              "      <th>mileage</th>\n",
              "      <th>reg_code</th>\n",
              "      <th>standard_colour</th>\n",
              "      <th>standard_make</th>\n",
              "      <th>standard_model</th>\n",
              "      <th>vehicle_condition</th>\n",
              "      <th>year_of_registration</th>\n",
              "      <th>price</th>\n",
              "      <th>body_type</th>\n",
              "      <th>crossover_car_and_van</th>\n",
              "      <th>fuel_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>75265</th>\n",
              "      <td>202010205206080</td>\n",
              "      <td>3996.0</td>\n",
              "      <td>69</td>\n",
              "      <td>White</td>\n",
              "      <td>Honda</td>\n",
              "      <td>CR-V</td>\n",
              "      <td>USED</td>\n",
              "      <td>NaN</td>\n",
              "      <td>32995</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-229d4ea6-6fb2-440f-afe9-eced19c568a2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-229d4ea6-6fb2-440f-afe9-eced19c568a2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-229d4ea6-6fb2-440f-afe9-eced19c568a2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "year_dirty = df[df['year_of_registration'].isna()]\n",
        "year_dirty.sample(1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B6IGf47Yc8wF",
        "outputId": "cec85ce5-d6d0-4336-99e0-bb10769f7481"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['18', '61', '66', '17', '68', nan, '70', '55', '67', '65', '69',\n",
              "       '62', '20', '15', '56', '94', 'B', '14', '16', 'P', '19', '64',\n",
              "       '59', '60', 'E', '85', '63', 'R', '12', '51', '13', '54', '09',\n",
              "       '10', 'L', '04', '11', '08', '07', '06', '57', 'CA', '58', 'C',\n",
              "       'Y', '05', 'M', 'J', 'H', 'S', '03', '723xuu', '95', '52', 'N',\n",
              "       'F', 'T', 'V', '02', '53', '38', 'G', 'D', 'A', '37'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "year_dirty['reg_code'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "8_J56NSl9tzn"
      },
      "outputs": [],
      "source": [
        "# create a dictionary to map the reg code to their corresponding year\n",
        "reg_to_year = {'18': 2018, '61': 2011, '66': 2016, '17': 2017, '68': 2019, 'nan': 2017, '70': 2020, '55': 2006, '67': 2018, '65': 2015, '69': 2019,\n",
        "       '62': 2013, '20': 2020, '15': 2016, '56': 2006, '94': 2020, 'B': 1985, '14': 2014, '16': 2016, 'P': 1997, '19': 2019, '64': 2015,\n",
        "       '59': 2009, '60': 2010, 'E': 1988, '85': 2020, '63': 2013, 'R': 1997, '12': 2012, '51': 2002, '13': 2014, '54': 2004, '09': 2009,\n",
        "       '10': 2011, 'L': 1993, '04': 2004, '11': 2011, '08': 2008, '07': 2007, '06': 2006, '57': 2008, 'CA': '', '58': 2009, 'C': 1985,\n",
        "       'Y': 2001, '05': 2005, 'M': 1995, 'J': 1992, 'H': 1990, 'S': 1999, '03': 2002, '723xuu': 2017, '95': 2020, '52': 2002, 'N': 1996,\n",
        "       'F':1989, 'T': 1999, 'V': 2000, '02': 2002, '53': 2003, '38': 2018, 'G': 1989, 'D': 1987, 'A': 1983, '37': 2017\n",
        "}\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# replace 'nan' string values with actual NaN values\n",
        "df['year_of_registration'] = df['year_of_registration'].replace('nan', np.nan)\n",
        "\n",
        "# apply the dictionary to the \"reg_code\" column and replace any remaining missing values with np.nan\n",
        "df['year_of_registration'] = df['reg_code'].map(reg_to_year).fillna(df['year_of_registration'])\n"
      ],
      "metadata": {
        "id": "Vql6Y7fVY0MW"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UMnhfPJgEwGF",
        "outputId": "362d0bfd-7495-4818-d800-fbdd26901096"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "public_reference             0\n",
              "mileage                    127\n",
              "reg_code                 31857\n",
              "standard_colour           5378\n",
              "standard_make                0\n",
              "standard_model               0\n",
              "vehicle_condition            0\n",
              "year_of_registration       321\n",
              "price                        0\n",
              "body_type                  837\n",
              "crossover_car_and_van        0\n",
              "fuel_type                  601\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "df.isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "Pd-bwJloI_TK"
      },
      "outputs": [],
      "source": [
        "#filling missing values in different columns with the interpolate, median and forward fill method\n",
        "df['mileage'] = df['mileage'].interpolate(method='linear')\n",
        "df['fuel_type'] = df['fuel_type'].fillna(method='ffill')\n",
        "df['body_type'] = df['body_type'].fillna(method='ffill')\n",
        "df['standard_colour'] = df['standard_colour'].fillna(method='ffill')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wagw7yk1ZZN6",
        "outputId": "fec799a8-512b-4d50-c8df-10dc9ffb6a8a"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "public_reference             0\n",
              "mileage                      0\n",
              "reg_code                 31857\n",
              "standard_colour              0\n",
              "standard_make                0\n",
              "standard_model               0\n",
              "vehicle_condition            0\n",
              "year_of_registration       321\n",
              "price                        0\n",
              "body_type                    0\n",
              "crossover_car_and_van        0\n",
              "fuel_type                    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jQmEPBMG_3Pz",
        "outputId": "e7fe18e2-bc7f-45de-b815-38d524d95375"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2021.0, 2011, 2017, 2016, 2015, 2014, 2008, 2019, 2010, 2012, 2018,\n",
              "       2009, 1985, 2002, 2013, 2006, 2020, 2005, 2000.0, 2003, 2004, 1992,\n",
              "       2007, 1987, 1999, 2001, 1990, 1993.0, nan, 1988, 1995, 1989, 1996,\n",
              "       1997, 1983, 1962.0, 1980.0, 1982.0, 1933.0, 1981.0, 1971.0, 1972.0,\n",
              "       1998.0, 1961.0, 1957.0, '', 1954.0, 1955.0, 1963.0, 1960.0, 1956.0,\n",
              "       1959.0, 1934.0, 1958.0, 1950.0, 1966.0, 1994.0, 1973.0, 1964.0,\n",
              "       1952.0, 1991.0], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "df['year_of_registration'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def replace_year (x,y):\n",
        "  df['year_of_registration'].replace(x, y, inplace=True) \n",
        "\n",
        "replace_year('', 2017)\n"
      ],
      "metadata": {
        "id": "bnHCSnuoZ0aY"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['year_of_registration'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0w6Dxto8ajkv",
        "outputId": "3d835bca-055c-42a1-8254-a2bd51326053"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2021., 2011., 2017., 2016., 2015., 2014., 2008., 2019., 2010.,\n",
              "       2012., 2018., 2009., 1985., 2002., 2013., 2006., 2020., 2005.,\n",
              "       2000., 2003., 2004., 1992., 2007., 1987., 1999., 2001., 1990.,\n",
              "       1993.,   nan, 1988., 1995., 1989., 1996., 1997., 1983., 1962.,\n",
              "       1980., 1982., 1933., 1981., 1971., 1972., 1998., 1961., 1957.,\n",
              "       1954., 1955., 1963., 1960., 1956., 1959., 1934., 1958., 1950.,\n",
              "       1966., 1994., 1973., 1964., 1952., 1991.])"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['year_of_registration'] = df['year_of_registration'].fillna(df['year_of_registration'].median())"
      ],
      "metadata": {
        "id": "G4tFOyGHZ0XH"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['year_of_registration'] = df['year_of_registration'].astype(int)"
      ],
      "metadata": {
        "id": "t7Q5D0xRa3PL"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yggiMjuwaznW",
        "outputId": "63a96b7a-31f6-47bc-fd5b-17481ac9a566"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "public_reference             0\n",
              "mileage                      0\n",
              "reg_code                 31857\n",
              "standard_colour              0\n",
              "standard_make                0\n",
              "standard_model               0\n",
              "vehicle_condition            0\n",
              "year_of_registration         0\n",
              "price                        0\n",
              "body_type                    0\n",
              "crossover_car_and_van        0\n",
              "fuel_type                    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "zmv1RIEG9tw5",
        "outputId": "5084edca-4176-46c4-ed43-fab2b5b44afb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    mileage standard_colour standard_make     standard_model  \\\n",
              "0       0.0            Grey         Volvo               XC90   \n",
              "1  108230.0            Blue        Jaguar                 XF   \n",
              "2    7800.0            Grey         SKODA               Yeti   \n",
              "3   45000.0           Brown      Vauxhall              Mokka   \n",
              "4   64000.0            Grey    Land Rover  Range Rover Sport   \n",
              "\n",
              "  vehicle_condition  year_of_registration  price  body_type  \\\n",
              "0               NEW                  2021  73970        SUV   \n",
              "1              USED                  2011   7000     Saloon   \n",
              "2              USED                  2017  14000        SUV   \n",
              "3              USED                  2016   7995  Hatchback   \n",
              "4              USED                  2015  26995        SUV   \n",
              "\n",
              "   crossover_car_and_van              fuel_type  \n",
              "0                  False  Petrol Plug-in Hybrid  \n",
              "1                  False                 Diesel  \n",
              "2                  False                 Petrol  \n",
              "3                  False                 Diesel  \n",
              "4                  False                 Diesel  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5824cda3-7b3f-4358-a5cc-659393f9f21c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mileage</th>\n",
              "      <th>standard_colour</th>\n",
              "      <th>standard_make</th>\n",
              "      <th>standard_model</th>\n",
              "      <th>vehicle_condition</th>\n",
              "      <th>year_of_registration</th>\n",
              "      <th>price</th>\n",
              "      <th>body_type</th>\n",
              "      <th>crossover_car_and_van</th>\n",
              "      <th>fuel_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Volvo</td>\n",
              "      <td>XC90</td>\n",
              "      <td>NEW</td>\n",
              "      <td>2021</td>\n",
              "      <td>73970</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol Plug-in Hybrid</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>108230.0</td>\n",
              "      <td>Blue</td>\n",
              "      <td>Jaguar</td>\n",
              "      <td>XF</td>\n",
              "      <td>USED</td>\n",
              "      <td>2011</td>\n",
              "      <td>7000</td>\n",
              "      <td>Saloon</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7800.0</td>\n",
              "      <td>Grey</td>\n",
              "      <td>SKODA</td>\n",
              "      <td>Yeti</td>\n",
              "      <td>USED</td>\n",
              "      <td>2017</td>\n",
              "      <td>14000</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>45000.0</td>\n",
              "      <td>Brown</td>\n",
              "      <td>Vauxhall</td>\n",
              "      <td>Mokka</td>\n",
              "      <td>USED</td>\n",
              "      <td>2016</td>\n",
              "      <td>7995</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>64000.0</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Land Rover</td>\n",
              "      <td>Range Rover Sport</td>\n",
              "      <td>USED</td>\n",
              "      <td>2015</td>\n",
              "      <td>26995</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5824cda3-7b3f-4358-a5cc-659393f9f21c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5824cda3-7b3f-4358-a5cc-659393f9f21c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5824cda3-7b3f-4358-a5cc-659393f9f21c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "data = df.drop(columns=['public_reference', 'reg_code'])\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zM8wqg2Acaz-",
        "outputId": "55a84407-4f26-460e-f3ad-12f1e4d974a5"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(402005, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cCPEMwiDAigJ",
        "outputId": "4a5d2400-0910-4400-b8e0-7ad17f5b3286"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 402005 entries, 0 to 402004\n",
            "Data columns (total 10 columns):\n",
            " #   Column                 Non-Null Count   Dtype  \n",
            "---  ------                 --------------   -----  \n",
            " 0   mileage                402005 non-null  float64\n",
            " 1   standard_colour        402005 non-null  object \n",
            " 2   standard_make          402005 non-null  object \n",
            " 3   standard_model         402005 non-null  object \n",
            " 4   vehicle_condition      402005 non-null  object \n",
            " 5   year_of_registration   402005 non-null  int64  \n",
            " 6   price                  402005 non-null  int64  \n",
            " 7   body_type              402005 non-null  object \n",
            " 8   crossover_car_and_van  402005 non-null  bool   \n",
            " 9   fuel_type              402005 non-null  object \n",
            "dtypes: bool(1), float64(1), int64(2), object(6)\n",
            "memory usage: 28.0+ MB\n"
          ]
        }
      ],
      "source": [
        "data.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exploratory Data Analysis"
      ],
      "metadata": {
        "id": "GlJxp7DSdfJe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#plt.title('Outlier Detection in Mileage')\n",
        "#sns.boxplot(x = df['mileage'])\n",
        "\n",
        "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 3))\n",
        "sns.boxplot(data['mileage'], ax=axes[0])\n",
        "axes[0].set_title('Mileage Spread')\n",
        "sns.histplot(data['mileage'], ax=axes[1])\n",
        "axes[1].set_title('Mileage Distribution')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 333
        },
        "id": "Nsv3-eKyZ0Tk",
        "outputId": "0f2dd4ad-82a9-4f50-a4ed-4b849ab3fe4e"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x300 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 3))\n",
        "sns.kdeplot(data['price'], ax=axes[0])\n",
        "axes[0].set_title('Price Distribution')\n",
        "sns.kdeplot(data['price'], log_scale=True, ax=axes[1])\n",
        "axes[1].set_title('Price Distribution (Log Scale)')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 338
        },
        "id": "Ht4_Pj1qdmCw",
        "outputId": "c9856e84-2040-4aba-8f3e-a79c5f0efff8"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x300 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Fuel Type distribution\n",
        "plt.figure(figsize=(14,4))\n",
        "plt.title('Fuel Type Dstribution')\n",
        "sns.countplot(data = data, x='fuel_type', order = data['fuel_type'].value_counts().index);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "LYc0FIY3Z0MZ",
        "outputId": "9eb2fed2-4c2e-4135-a6e7-010851e7621b"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Standard Make distribution\n",
        "sns.catplot(data=data, x=\"vehicle_condition\", y=\"price\", hue=\"fuel_type\", kind=\"bar\", height=5, aspect=1.5);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 506
        },
        "id": "wD86I4dRZ0Gt",
        "outputId": "47d02c87-7068-409e-d60f-a44278498eea"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 944.75x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Body Type distribution\n",
        "plt.figure(figsize=(10,5))\n",
        "plt.title('Body Type Dstribution')\n",
        "sns.countplot(data = data, y='body_type', order = data['body_type'].value_counts().index);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "2wvFUYk6coN7",
        "outputId": "cefc2b4d-a037-4361-8190-59e843e63725"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['year_of_registration'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Iidrvm_ln64S",
        "outputId": "90417643-be0f-49b6-9801-181d9ad98d4f"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2021, 2011, 2017, 2016, 2015, 2014, 2008, 2019, 2010, 2012, 2018,\n",
              "       2009, 1985, 2002, 2013, 2006, 2020, 2005, 2000, 2003, 2004, 1992,\n",
              "       2007, 1987, 1999, 2001, 1990, 1993, 1988, 1995, 1989, 1996, 1997,\n",
              "       1983, 1962, 1980, 1982, 1933, 1981, 1971, 1972, 1998, 1961, 1957,\n",
              "       1954, 1955, 1963, 1960, 1956, 1959, 1934, 1958, 1950, 1966, 1994,\n",
              "       1973, 1964, 1952, 1991])"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Year of Registrationdistribution\n",
        "plt.figure(figsize=(10,5))\n",
        "plt.title('Year of Registration Dstribution')\n",
        "sns.histplot(data = data, x='year_of_registration');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "E2-0ExEycpEP",
        "outputId": "4d19dab2-bf76-45c9-d92d-01a4d2d66c48"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Subsetting the data for year greater than 1990\n",
        "sub_data = data.loc[data['year_of_registration'] > 1990]"
      ],
      "metadata": {
        "id": "hPY5cTF1co-Q"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sub_data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BJWZwUQVco7I",
        "outputId": "19d9c0ce-ee9c-45b6-c70b-561de6fe1203"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(401357, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dealing with outliers "
      ],
      "metadata": {
        "id": "gYJvuZy5rDLx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sub_data.describe().round()\n",
        "#showing a descriptive statistics of the numerical columns in the dataset"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "jO0_oZDxxq8i",
        "outputId": "25d2bd0a-31cd-4b67-8a34-52aaca489328"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        mileage  year_of_registration      price\n",
              "count  401357.0              401357.0   401357.0\n",
              "mean    37688.0                2016.0    17285.0\n",
              "std     34780.0                   4.0    46212.0\n",
              "min         0.0                1991.0      120.0\n",
              "25%     10463.0                2014.0     7495.0\n",
              "50%     28583.0                2017.0    12600.0\n",
              "75%     56709.0                2019.0    19999.0\n",
              "max    999999.0                2021.0  9999999.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-92858745-90f5-4c9a-a49e-be00138fbdf5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mileage</th>\n",
              "      <th>year_of_registration</th>\n",
              "      <th>price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>401357.0</td>\n",
              "      <td>401357.0</td>\n",
              "      <td>401357.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>37688.0</td>\n",
              "      <td>2016.0</td>\n",
              "      <td>17285.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>34780.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>46212.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1991.0</td>\n",
              "      <td>120.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>10463.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>7495.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>28583.0</td>\n",
              "      <td>2017.0</td>\n",
              "      <td>12600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>56709.0</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>19999.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>999999.0</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>9999999.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92858745-90f5-4c9a-a49e-be00138fbdf5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-92858745-90f5-4c9a-a49e-be00138fbdf5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-92858745-90f5-4c9a-a49e-be00138fbdf5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "From the descriptive statistics, It is evident of errorneous values which will cause noise in our models, as the max values of mileage and price are more than 17 times and 50 times of the 75th percentile. "
      ],
      "metadata": {
        "id": "sX79pWZqyqs9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#dealing with outliers in the mileage column\n",
        "mileage_seventy_fifth = sub_data['mileage'].quantile(0.75)\n",
        "mileage_twenty_fifth = sub_data['mileage'].quantile(0.25)\n",
        "mileage_iqr = mileage_seventy_fifth - mileage_twenty_fifth\n",
        "# Calculate the thresholds\n",
        "upper_mileage = mileage_seventy_fifth + (1.5 * mileage_iqr)\n",
        "lower_mileage = mileage_twenty_fifth - (1.5 * mileage_iqr)\n",
        "# Subset the data\n",
        "test = sub_data[(sub_data[\"mileage\"] > lower_mileage) & (sub_data[\"mileage\"] < upper_mileage)]\n",
        "print(test[\"mileage\"].describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sTz8ym8Zco4e",
        "outputId": "be043873-22b9-4768-8294-7635bc8307c3"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count    393215.000000\n",
            "mean      35364.434386\n",
            "std       30764.647297\n",
            "min           0.000000\n",
            "25%       10083.000000\n",
            "50%       27796.000000\n",
            "75%       54173.000000\n",
            "max      126060.000000\n",
            "Name: mileage, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#dealing with outliers in the mileage column\n",
        "price_seventy_fifth = test['price'].quantile(0.75)\n",
        "price_twenty_fifth = test['price'].quantile(0.25)\n",
        "price_iqr = price_seventy_fifth - price_twenty_fifth\n",
        "# Calculate the thresholds\n",
        "upper_price = price_seventy_fifth + (1.5 * price_iqr)\n",
        "lower_price = price_twenty_fifth - (1.5 * price_iqr)\n",
        "# Subset the data\n",
        "new_data = test[(test[\"price\"] > lower_price) & (test[\"price\"] < upper_price)]\n",
        "print(new_data[\"price\"].describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nB_jSXYG2NHX",
        "outputId": "add539a1-2de9-4631-e1b7-7ea6c8d4c3d8"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count    368103.000000\n",
            "mean      13735.526578\n",
            "std        8381.069535\n",
            "min         120.000000\n",
            "25%        7490.000000\n",
            "50%       12000.000000\n",
            "75%       18495.000000\n",
            "max       39375.000000\n",
            "Name: price, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data.describe().round()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "C2HLYQrc1TtK",
        "outputId": "eb668bb8-7c5b-489c-8954-96a2ee7ed88f"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        mileage  year_of_registration     price\n",
              "count  368103.0              368103.0  368103.0\n",
              "mean    37133.0                2016.0   13736.0\n",
              "std     30794.0                   4.0    8381.0\n",
              "min         0.0                1991.0     120.0\n",
              "25%     12163.0                2014.0    7490.0\n",
              "50%     29900.0                2016.0   12000.0\n",
              "75%     56568.0                2019.0   18495.0\n",
              "max    126060.0                2021.0   39375.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a154719d-78e4-4a4f-bee3-6af07d75b4ec\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mileage</th>\n",
              "      <th>year_of_registration</th>\n",
              "      <th>price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>368103.0</td>\n",
              "      <td>368103.0</td>\n",
              "      <td>368103.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>37133.0</td>\n",
              "      <td>2016.0</td>\n",
              "      <td>13736.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>30794.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8381.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1991.0</td>\n",
              "      <td>120.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>12163.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>7490.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>29900.0</td>\n",
              "      <td>2016.0</td>\n",
              "      <td>12000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>56568.0</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>18495.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>126060.0</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>39375.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a154719d-78e4-4a4f-bee3-6af07d75b4ec')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a154719d-78e4-4a4f-bee3-6af07d75b4ec button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a154719d-78e4-4a4f-bee3-6af07d75b4ec');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "PktWKmvx67bf",
        "outputId": "a9a40b2d-4846-411d-8b28-053f31739f82"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    mileage standard_colour standard_make     standard_model  \\\n",
              "1  108230.0            Blue        Jaguar                 XF   \n",
              "2    7800.0            Grey         SKODA               Yeti   \n",
              "3   45000.0           Brown      Vauxhall              Mokka   \n",
              "4   64000.0            Grey    Land Rover  Range Rover Sport   \n",
              "5   16000.0            Blue          Audi                 S5   \n",
              "\n",
              "  vehicle_condition  year_of_registration  price    body_type  \\\n",
              "1              USED                  2011   7000       Saloon   \n",
              "2              USED                  2017  14000          SUV   \n",
              "3              USED                  2016   7995    Hatchback   \n",
              "4              USED                  2015  26995          SUV   \n",
              "5              USED                  2017  29000  Convertible   \n",
              "\n",
              "   crossover_car_and_van fuel_type  \n",
              "1                  False    Diesel  \n",
              "2                  False    Petrol  \n",
              "3                  False    Diesel  \n",
              "4                  False    Diesel  \n",
              "5                  False    Petrol  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1d13b235-d186-4aea-9922-4f3c6a9f0fa4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mileage</th>\n",
              "      <th>standard_colour</th>\n",
              "      <th>standard_make</th>\n",
              "      <th>standard_model</th>\n",
              "      <th>vehicle_condition</th>\n",
              "      <th>year_of_registration</th>\n",
              "      <th>price</th>\n",
              "      <th>body_type</th>\n",
              "      <th>crossover_car_and_van</th>\n",
              "      <th>fuel_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>108230.0</td>\n",
              "      <td>Blue</td>\n",
              "      <td>Jaguar</td>\n",
              "      <td>XF</td>\n",
              "      <td>USED</td>\n",
              "      <td>2011</td>\n",
              "      <td>7000</td>\n",
              "      <td>Saloon</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7800.0</td>\n",
              "      <td>Grey</td>\n",
              "      <td>SKODA</td>\n",
              "      <td>Yeti</td>\n",
              "      <td>USED</td>\n",
              "      <td>2017</td>\n",
              "      <td>14000</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>45000.0</td>\n",
              "      <td>Brown</td>\n",
              "      <td>Vauxhall</td>\n",
              "      <td>Mokka</td>\n",
              "      <td>USED</td>\n",
              "      <td>2016</td>\n",
              "      <td>7995</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>64000.0</td>\n",
              "      <td>Grey</td>\n",
              "      <td>Land Rover</td>\n",
              "      <td>Range Rover Sport</td>\n",
              "      <td>USED</td>\n",
              "      <td>2015</td>\n",
              "      <td>26995</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>16000.0</td>\n",
              "      <td>Blue</td>\n",
              "      <td>Audi</td>\n",
              "      <td>S5</td>\n",
              "      <td>USED</td>\n",
              "      <td>2017</td>\n",
              "      <td>29000</td>\n",
              "      <td>Convertible</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d13b235-d186-4aea-9922-4f3c6a9f0fa4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1d13b235-d186-4aea-9922-4f3c6a9f0fa4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1d13b235-d186-4aea-9922-4f3c6a9f0fa4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 3))\n",
        "sns.boxplot(x= new_data['mileage'], ax=axes[0])\n",
        "axes[0].set_title('Mileage Spread')\n",
        "sns.boxplot(x=new_data['price'], ax=axes[1])\n",
        "axes[1].set_title('price Spread')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 333
        },
        "id": "7NxPB6_mco1v",
        "outputId": "5f5f3219-11ca-4d38-92de-bd273b1fce5c"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x300 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA8MAAAE8CAYAAADkLmPTAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA02UlEQVR4nO3deXgUZbr+8buTkO4AWTABAhoCJEgQEAQEg2wjKDAIiiPIcmRRQREUdERlzkFgHMBxHGYQBbdzgHEBxRF1GKMomxsIKGHVCBgWWQTZEgwhkH5+f/hLD00CCRDoTur7uS6uK6l6u+p5upt+605XV7vMzAQAAAAAgIOEBLoAAAAAAAAuNcIwAAAAAMBxCMMAAAAAAMchDAMAAAAAHIcwDAAAAABwHMIwAAAAAMBxCMMAAAAAAMchDAMAAAAAHIcwDAAAAABwHMIwygWXy6Xx48f7fp81a5ZcLpe2bdsWsJpwdoMGDVLt2rUDXQYAwAFOP07A+eO+RHlCGEbQKAiwLpdLn3/+eaH1ZqaEhAS5XC7dfPPNAagwcNavX6/bb79diYmJ8ng8uvzyy3XjjTdq2rRpgS4NAAAUwev16h//+IdatWqlyy67TJGRkbryyis1YMAArVixItDlAZAUFugCgNN5PB698cYbatOmjd/yZcuW6ccff5Tb7S50m2PHjiksrHw+nb/88kv95je/Ua1atTRkyBDFx8dr586dWrFihaZOnaoHHngg0CUCABDUAnGc8OCDD+r555/XLbfcov79+yssLEwZGRlKS0tT3bp1dd11113SegAUVj7TA8q03/72t5o3b56effZZv4nrjTfeUPPmzfXzzz8Xuo3H47mUJV5SEydOVHR0tFatWqWYmBi/dfv27Su1/fzyyy+qVKlSqW0PAIBA8nq9ysvLk8fjueTHCT/99JOmT5+uIUOG6KWXXvJb9/e//1379+8vlf2YmXJzcxUREVEq2wOchtOkEXT69u2rAwcO6OOPP/Yty8vL09tvv61+/foVeZuSfn4lLS1Nbdu2VaVKlRQZGalu3bpp48aNfmPWrVunQYMGqW7duvJ4PIqPj9ddd92lAwcOFNre0qVL1aJFC3k8HiUlJenFF1/U+PHj5XK5Co197bXX1Lx5c0VEROiyyy5Tnz59tHPnzmJr3rp1qxo2bFgoCEtStWrV/H53uVwaMWKEXn/9ddWvX18ej0fNmzfXp59+6jeuoMZNmzapX79+qlKlit878SWp9bPPPlOvXr1Uq1Ytud1uJSQk6KGHHtKxY8cK1fnuu++qUaNG8ng8atSokebPn19s3wAAFMxX3333nXr37q2oqCjFxsZq5MiRys3N9Rt76hzYsGFDud1uffjhh751px8n7Nq1S3fffbdq1qwpt9utOnXqaNiwYcrLy/ONOXz4sEaNGqWEhAS53W4lJyfrz3/+s7xe71nrzszMlJnp+uuvL7TO5XL5zd8FHxP79NNPde+99yo2NlZRUVEaMGCADh065Hfb2rVr6+abb9ZHH32kFi1aKCIiQi+++OI51frMM8+odevWio2NVUREhJo3b6633367UJ3Hjx/XQw89pKpVqyoyMlI9evTQjz/+eNa+gbKGd4YRdGrXrq3U1FTNmTNHXbt2lfRriD1y5Ij69OmjZ5999ry2++qrr2rgwIHq3Lmz/vznPysnJ0czZsxQmzZttGbNGt/FnD7++GP98MMPGjx4sOLj47Vx40a99NJL2rhxo1asWOELumvWrFGXLl1Uo0YNTZgwQfn5+frjH/+oqlWrFtr3xIkTNXbsWPXu3Vv33HOP9u/fr2nTpqldu3Zas2ZNkUG3QGJiopYvX64NGzaoUaNGxfa5bNkyvfnmm3rwwQfldrs1ffp0denSRStXrix0+169eqlevXqaNGmSzOycap03b55ycnI0bNgwxcbGauXKlZo2bZp+/PFHzZs3z7ePhQsX6ne/+52uuuoqTZ48WQcOHNDgwYN1xRVXFNsLAACS1Lt3b9WuXVuTJ0/WihUr9Oyzz+rQoUP6xz/+4Tdu8eLFeuuttzRixAjFxcWd8UKNu3fvVsuWLXX48GENHTpUKSkp2rVrl95++23l5OQoPDxcOTk5at++vXbt2qV7771XtWrV0pdffqkxY8Zoz549+vvf/37GehMTEyX9Olf26tVLFStWLLbHESNGKCYmRuPHj1dGRoZmzJih7du3a+nSpX5/ZM/IyFDfvn117733asiQIapfv/451Tp16lT16NFD/fv3V15enubOnatevXppwYIF6tatm2/cPffco9dee039+vVT69attXjxYr/1QLlgQJCYOXOmSbJVq1bZc889Z5GRkZaTk2NmZr169bLf/OY3ZmaWmJho3bp187utJBs3blyhbWVmZpqZWXZ2tsXExNiQIUP8brd3716Ljo72W16wz1PNmTPHJNmnn37qW9a9e3erWLGi7dq1y7ds8+bNFhYWZqf+19q2bZuFhobaxIkT/ba5fv16CwsLK7T8dAsXLrTQ0FALDQ211NRUe/TRR+2jjz6yvLy8QmMlmSRbvXq1b9n27dvN4/FYz549fcvGjRtnkqxv375+tz+XWou6nyZPnmwul8u2b9/uW9a0aVOrUaOGHT582K8nSZaYmHjW3gEAzlYwX/Xo0cNv+f3332+SbO3atb5lkiwkJMQ2btxYaDunHycMGDDAQkJCbNWqVYXGer1eMzN78sknrVKlSvb999/7rX/88cctNDTUduzYcdbaBwwYYJKsSpUq1rNnT3vmmWfs22+/LTSu4JilefPmfnP7008/bZLsvffe8y1LTEw0Sfbhhx/6beNcaj19/s7Ly7NGjRrZDTfc4FuWnp5ukuz+++/3G9uvX79C9yVQlnGaNIJS7969dezYMS1YsEDZ2dlasGDBGU+RLomPP/5Yhw8fVt++ffXzzz/7/oWGhqpVq1ZasmSJb+ypn7vJzc3Vzz//7LvIxTfffCNJys/P1yeffKJbb71VNWvW9I1PTk72vZtd4J133pHX61Xv3r399h0fH6969er57bsoN954o5YvX64ePXpo7dq1evrpp9W5c2ddfvnlev/99wuNT01NVfPmzX2/16pVS7fccos++ugj5efn+4297777zrvWU++nX375RT///LNat24tM9OaNWskSXv27FF6eroGDhyo6Ohov56uuuqqs/YNAECB4cOH+/1ecPHIDz74wG95+/bti51fvF6v3n33XXXv3l0tWrQotL7gXdh58+apbdu2qlKlit+c2KlTJ+Xn5xf6CNLpZs6cqeeee0516tTR/Pnz9cgjj6hBgwbq2LGjdu3aVWj80KFDVaFCBd/vw4YNU1hYWKEe69Spo86dO/stO5daT52/Dx06pCNHjqht27a+YxzpP/frgw8+6LefUaNGnbVnoKzhNGkEpapVq6pTp0564403lJOTo/z8fN1+++3nvb3NmzdLkm644YYi10dFRfl+PnjwoCZMmKC5c+cWukDVkSNHJP164apjx44pOTm50LZOX7Z582aZmerVq1fkvk+d+M7k2muv1TvvvKO8vDytXbtW8+fP19/+9jfdfvvtSk9P95v4i9rPlVdeqZycHO3fv1/x8fG+5XXq1DnvWnfs2KEnnnhC77//fqHPNBXcT9u3bz9jTfXr1/ebeAEAOJPT55GkpCSFhIRo27ZtfstPn9eKsn//fmVlZRX70aPNmzdr3bp1RX78SSr+IpYhISEaPny4hg8frgMHDuiLL77QCy+8oLS0NPXp00efffaZ3/jTe6xcubJq1KhRoh7PpdYFCxboT3/6k9LT03X8+HHf8lNPxd6+fbtCQkKUlJTkt5369euftWegrCEMI2j169dPQ4YM0d69e9W1a9ezfq62OAUXj3j11Vf9wmCBU69a3bt3b3355ZcaPXq0mjZtqsqVK8vr9apLly7FXjDjTPt2uVxKS0tTaGhoofWVK1cu8bbCw8N17bXX6tprr9WVV16pwYMHa968eRo3btw51yWp0NUnS1prfn6+brzxRh08eFCPPfaYUlJSVKlSJe3atUuDBg06r/sJAICSKupClVLhee1CeL1e3XjjjXr00UeLXH/llVeWeFuxsbHq0aOHevTooQ4dOmjZsmXavn2777PF56KoHkta62effaYePXqoXbt2mj59umrUqKEKFSpo5syZeuONN865FqCsIwwjaPXs2VP33nuvVqxYoTfffPOCtlXwl81q1aqpU6dOZxx36NAhLVq0SBMmTNATTzzhW17wznKBatWqyePxaMuWLYW2cfqypKQkmZnq1KlzThNncQpO7dqzZ4/f8tNrlaTvv/9eFStWPONfjM+11vXr1+v777/X7NmzNWDAAN/yU68ALv3nAiJF1ZSRkXHWWgAAKLB582a/d0S3bNkir9d7xgtknU3VqlUVFRWlDRs2nHVcUlKSjh49etbjhvPRokULLVu2THv27PELw5s3b9ZvfvMb3+9Hjx7Vnj179Nvf/rbYbZa01n/+85/yeDz66KOP5Ha7fctnzpzpNy4xMVFer1dbt271ezeYuRvlDZ8ZRtCqXLmyZsyYofHjx6t79+4XtK3OnTsrKipKkyZN0okTJwqtL/i+v4J3Q+3/X1m5wOlXjAwNDVWnTp307rvvavfu3b7lW7ZsUVpamt/Y2267TaGhoZowYUKh7ZpZkV/ZdKolS5YUup30n8/znH7K0vLly/1OP965c6fee+893XTTTUW+23s+tRZ1P5mZpk6d6nebGjVqqGnTppo9e7bv1Gnp19C8adOms9YCAECB559/3u/3adOmSVKh63SUREhIiG699Vb961//0urVqwutL5jbevfureXLl+ujjz4qNObw4cM6efLkGfexd+/eIue5vLw8LVq0SCEhIYU+VvXSSy/5HaPMmDFDJ0+eLFGPJa01NDRULpfL7xoi27Zt07vvvut3m4J9nv4NHme7gjZQFvHOMILawIEDS2U7UVFRmjFjhu688041a9ZMffr0UdWqVbVjxw79+9//1vXXX6/nnntOUVFRateunZ5++mmdOHFCl19+uRYuXKjMzMxC2xw/frwWLlyo66+/XsOGDVN+fr6ee+45NWrUSOnp6b5xSUlJ+tOf/qQxY8Zo27ZtuvXWWxUZGanMzEzNnz9fQ4cO1SOPPHLG2h944AHl5OSoZ8+eSklJUV5enr788ku9+eabql27tgYPHuw3vlGjRurcubPfVytJ0oQJE4q9n0paa0pKipKSkvTII49o165dioqK0j//+c9Cnx2WpMmTJ6tbt25q06aN7rrrLh08eFDTpk1Tw4YNdfTo0WJrAgAgMzNTPXr0UJcuXbR8+XLfV/40adLkvLY3adIkLVy4UO3bt9fQoUPVoEED7dmzR/PmzdPnn3+umJgYjR49Wu+//75uvvlmDRo0SM2bN9cvv/yi9evX6+2339a2bdsUFxdX5PZ//PFHtWzZUjfccIM6duyo+Ph47du3T3PmzNHatWs1atSoQrfNy8tTx44d1bt3b2VkZGj69Olq06aNevToUWw/Ja21W7dumjJlirp06aJ+/fpp3759ev7555WcnKx169b5tte0aVP17dtX06dP15EjR9S6dWstWrSoyDPigDItEJewBopy6lcrnc35fLVSgSVLlljnzp0tOjraPB6PJSUl2aBBg/y+iujHH3+0nj17WkxMjEVHR1uvXr1s9+7dRX6VwKJFi+yaa66x8PBwS0pKsldeecV+//vfm8fjKVT3P//5T2vTpo1VqlTJKlWqZCkpKTZ8+HDLyMg4a79paWl21113WUpKilWuXNnCw8MtOTnZHnjgAfvpp58K3Q/Dhw+31157zerVq2dut9uuueYaW7Jkid+4gq+q2L9/f5H7LEmtmzZtsk6dOlnlypUtLi7OhgwZYmvXrjVJNnPmzELba9CggbndbrvqqqvsnXfesYEDB/LVSgCAsyqYrzZt2mS33367RUZGWpUqVWzEiBF27Ngxv7EFc2BRiprD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VLVq1XTrrbcqIyPDb0xubq6GDx+u2NhYVa5cWb/73e/0008/+Y3ZsWOHunXrpooVK6patWoaPXq0Tp486Tdm6dKlatasmdxut5KTkzVr1qxC9QTiPnvqqafkcrk0atQo37Ly2POuXbv0X//1X4qNjVVERIQaN26s1atX+9abmZ544gnVqFFDERER6tSpkzZv3uy3jYMHD6p///6KiopSTEyM7r77bh09etRvzLp169S2bVt5PB4lJCTo6aefLlTLvHnzlJKSIo/Ho8aNG+uDDz4o9X7z8/M1duxY1alTRxEREUpKStKTTz6pU6+tV9Z7/vTTT9W9e3fVrFlTLpdL7777rt/6YOqvJLVcaM8nTpzQY489psaNG6tSpUqqWbOmBgwYoN27d5fpnhG8gmWeHz9+vFwul9+/lJQU3/pLOaeVVFl6/TrfHgYNGlTocenSpUvQ9FAejgFL0kOHDh0KPQ733Xdf0PQwY8YMXX311YqKilJUVJRSU1OVlpbmWx/sj0FJegj2x6AoZT4fWIDNnTvXwsPD7f/+7/9s48aNNmTIEIuJibGffvop0KX56dy5s82cOdM2bNhg6enp9tvf/tZq1aplR48e9Y257777LCEhwRYtWmSrV6+26667zlq3bu1bf/LkSWvUqJF16tTJ1qxZYx988IHFxcXZmDFjfGN++OEHq1ixoj388MO2adMmmzZtmoWGhtqHH37oGxOI+2zlypVWu3Ztu/rqq23kyJHltueDBw9aYmKiDRo0yL766iv74Ycf7KOPPrItW7b4xjz11FMWHR1t7777rq1du9Z69OhhderUsWPHjvnGdOnSxZo0aWIrVqywzz77zJKTk61v376+9UeOHLHq1atb//79bcOGDTZnzhyLiIiwF1980Tfmiy++sNDQUHv66adt06ZN9j//8z9WoUIFW79+fan2PHHiRIuNjbUFCxZYZmamzZs3zypXrmxTp04tNz1/8MEH9t///d/2zjvvmCSbP3++3/pg6q8ktVxoz4cPH7ZOnTrZm2++ad99950tX77cWrZsac2bN/fbRlnrGcEpmOb5cePGWcOGDW3Pnj2+f/v37/etv1Rz2rkoS69f59vDwIEDrUuXLn6Py8GDB/3GBLKH8nAMWJIe2rdvb0OGDPF7HI4cORI0Pbz//vv273//277//nvLyMiwP/zhD1ahQgXbsGFD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Ro0z1jBv3jyLjY31/X7HHXdYt27d/Mb079//gvcDAADOrH379tagQQPzer2+ZY899pg1aNDAzMwSExPt1ltv9btNZmamSbI1a9aYmdmYMWOsTp06lpeXV+Q+kpKS7I033vBb9uSTT1pqamopdgKgAJ8ZBopx9dVX+34ODQ1VbGysGjdu7FtWvXp1SdK+ffsUFRV11m2tXbtWX3zxhd87tPn5+crNzVVOTo4qVqyoTz75RJMnT9Z3332nrKwsnTx50m99RkaGevbs6bfdli1basGCBee0HwAAcG6uu+46uVwu3++pqan661//qvz8fElSixYtznr79PR0tW3bVhUqVCi07pdfftHWrVt19913a8iQIb7lJ0+e5MKcwEVCGAaKcfqE5XK5/JYVTIper7fYbR09elQTJkzQbbfdVmidx+PRtm3bdPPNN2vYsGGaOHGiLrvsMn3++ee6++67lZeXV+IQW9x+AABA6atUqdJZ10dERJxxXcH1QV5++WW1atXKb11oaOiFFwegEMIwcAk1a9ZMGRkZSk5OLnL9119/La/Xq7/+9a8KCfn1I/1vvfWW35j69etr1apVfstO/724/QAAgHP31Vdf+f2+YsUK1atXr8Rh9eqrr9bs2bN14sSJQn9sr169umrWrKkffvhB/fv3L7WaAZwZYRi4hJ544gndfPPNqlWrlm6//XaFhIRo7dq12rBhg/70pz8pOTlZJ06c0LRp09S9e3d98cUXeuGFF/y28cADD6hdu3aaMmWKunfvrsWLFystLc3vtK3i9gMAAM7djh079PDDD+vee+/VN998o2nTpumvf/1riW8/YsQITZs2TX369NGYMWMUHR2tFStWqGXLlqpfv74mTJigBx98UNHR0erSpYuOHz+u1atX69ChQ3r44YcvYmeAM3E1aeAS6ty5sxYsWKCFCxfq2muv1XXXXae//e1vSkxMlCQ1adJEU6ZM0Z///Gc1atRIr7/+uiZPnuy3jeuvv14vvPCCpkyZoiZNmujDDz/UQw895Hf6c3H7AQAA527AgAE6duyYWrZsqeHDh2vkyJEaOnRoiW8fGxurxYsX6+jRo2rfvr2aN2+ul19+2fcu8T333KNXXnlFM2fOVOPGjdW+fXvNmjVLderUuVgtAY7mMvv/X44GoMwaMmSIvvvuO3322WeBLgUAgHKpQ4cOatq0qf7+978HuhQApYTTpIEy6JlnntGNN96oSpUqKS0tTbNnz9b06dMDXRYAAABQZhCGgTJo5cqVevrpp5Wdna26devq2Wef1T333BPosgAAAIAyg9OkAQAAAACOwwW0AAAAAACOQxgGAAAAADgOYRgAAAAA4DiEYQAAAACA4xCGAQAAAACOQxgGAAAAADgOYRgAAAAA4DiEYQAAAACA4/w/tR852tvZLn0AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(new_data.corr(), annot=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 509
        },
        "id": "LyTa-D3tcoyG",
        "outputId": "769e35cc-50b9-46ac-afc0-a4b1cccb05e1"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-47-7a3988c8c963>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  sns.heatmap(new_data.corr(), annot=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Sampling the dataset"
      ],
      "metadata": {
        "id": "LhCeHR-h8q-d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Set the random seed for reproducibility\n",
        "random_seed = 42\n",
        "\n",
        "# Sample 5% of the rows from the dataframe\n",
        "clean_df = new_data.sample(frac=0.05, random_state=random_seed)"
      ],
      "metadata": {
        "id": "dqKqYiaj77_9"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clean_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-C7GwrIv779L",
        "outputId": "4f7e0b52-b498-43bd-aafc-9d99b2feac42"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 18405 entries, 111235 to 96870\n",
            "Data columns (total 10 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   mileage                18405 non-null  float64\n",
            " 1   standard_colour        18405 non-null  object \n",
            " 2   standard_make          18405 non-null  object \n",
            " 3   standard_model         18405 non-null  object \n",
            " 4   vehicle_condition      18405 non-null  object \n",
            " 5   year_of_registration   18405 non-null  int64  \n",
            " 6   price                  18405 non-null  int64  \n",
            " 7   body_type              18405 non-null  object \n",
            " 8   crossover_car_and_van  18405 non-null  bool   \n",
            " 9   fuel_type              18405 non-null  object \n",
            "dtypes: bool(1), float64(1), int64(2), object(6)\n",
            "memory usage: 1.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clean_df.sample(1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "mlOzFaeR776R",
        "outputId": "69d2a4bf-55db-4f56-86b9-b5369073dec0"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        mileage standard_colour standard_make standard_model  \\\n",
              "143434  84000.0             Red          Audi             A4   \n",
              "\n",
              "       vehicle_condition  year_of_registration  price body_type  \\\n",
              "143434              USED                  2010   6195    Saloon   \n",
              "\n",
              "        crossover_car_and_van fuel_type  \n",
              "143434                  False    Petrol  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e85241a7-42bf-4e4b-9cde-af068ded0342\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mileage</th>\n",
              "      <th>standard_colour</th>\n",
              "      <th>standard_make</th>\n",
              "      <th>standard_model</th>\n",
              "      <th>vehicle_condition</th>\n",
              "      <th>year_of_registration</th>\n",
              "      <th>price</th>\n",
              "      <th>body_type</th>\n",
              "      <th>crossover_car_and_van</th>\n",
              "      <th>fuel_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>143434</th>\n",
              "      <td>84000.0</td>\n",
              "      <td>Red</td>\n",
              "      <td>Audi</td>\n",
              "      <td>A4</td>\n",
              "      <td>USED</td>\n",
              "      <td>2010</td>\n",
              "      <td>6195</td>\n",
              "      <td>Saloon</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e85241a7-42bf-4e4b-9cde-af068ded0342')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e85241a7-42bf-4e4b-9cde-af068ded0342 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e85241a7-42bf-4e4b-9cde-af068ded0342');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Feature Engineering"
      ],
      "metadata": {
        "id": "V4y04RnVrYbM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "clean_df['age'] = 2023 - clean_df['year_of_registration']"
      ],
      "metadata": {
        "id": "XIfbusoi773o"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Miles per year: This can be calculated by dividing the mileage by the age of the vehicle.\n",
        "clean_df['miles_per_year'] = clean_df['mileage'] / clean_df['age']"
      ],
      "metadata": {
        "id": "WyTChDY0Dypq"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clean_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jWXlUbJY7703",
        "outputId": "98325389-2100-4c31-81ef-665b8b181d18"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 18405 entries, 111235 to 96870\n",
            "Data columns (total 12 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   mileage                18405 non-null  float64\n",
            " 1   standard_colour        18405 non-null  object \n",
            " 2   standard_make          18405 non-null  object \n",
            " 3   standard_model         18405 non-null  object \n",
            " 4   vehicle_condition      18405 non-null  object \n",
            " 5   year_of_registration   18405 non-null  int64  \n",
            " 6   price                  18405 non-null  int64  \n",
            " 7   body_type              18405 non-null  object \n",
            " 8   crossover_car_and_van  18405 non-null  bool   \n",
            " 9   fuel_type              18405 non-null  object \n",
            " 10  age                    18405 non-null  int64  \n",
            " 11  miles_per_year         18405 non-null  float64\n",
            "dtypes: bool(1), float64(2), int64(3), object(6)\n",
            "memory usage: 1.7+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clean_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "dUG16tILt3CZ",
        "outputId": "768b41b5-0aa9-480b-99e7-d0a703abeece"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        mileage standard_colour standard_make standard_model  \\\n",
              "111235  36224.0            Blue        Nissan        X-Trail   \n",
              "316835  33000.0           Black          Audi             A3   \n",
              "242464      0.0           White         Mazda         Mazda3   \n",
              "361253  15372.0            Blue          MINI    Convertible   \n",
              "285539   8127.0           White           Kia        ProCeed   \n",
              "\n",
              "       vehicle_condition  year_of_registration  price    body_type  \\\n",
              "111235              USED                  2017  12982          SUV   \n",
              "316835              USED                  2016  13295    Hatchback   \n",
              "242464               NEW                  2021  26340       Saloon   \n",
              "361253              USED                  2018  15000  Convertible   \n",
              "285539              USED                  2019  21999    Hatchback   \n",
              "\n",
              "        crossover_car_and_van fuel_type  age  miles_per_year  \n",
              "111235                  False    Diesel    6     6037.333333  \n",
              "316835                  False    Petrol    7     4714.285714  \n",
              "242464                  False    Petrol    2        0.000000  \n",
              "361253                  False    Petrol    5     3074.400000  \n",
              "285539                  False    Petrol    4     2031.750000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3991cc56-bc11-4e23-88aa-c6f487f8bd3e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mileage</th>\n",
              "      <th>standard_colour</th>\n",
              "      <th>standard_make</th>\n",
              "      <th>standard_model</th>\n",
              "      <th>vehicle_condition</th>\n",
              "      <th>year_of_registration</th>\n",
              "      <th>price</th>\n",
              "      <th>body_type</th>\n",
              "      <th>crossover_car_and_van</th>\n",
              "      <th>fuel_type</th>\n",
              "      <th>age</th>\n",
              "      <th>miles_per_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>111235</th>\n",
              "      <td>36224.0</td>\n",
              "      <td>Blue</td>\n",
              "      <td>Nissan</td>\n",
              "      <td>X-Trail</td>\n",
              "      <td>USED</td>\n",
              "      <td>2017</td>\n",
              "      <td>12982</td>\n",
              "      <td>SUV</td>\n",
              "      <td>False</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>6</td>\n",
              "      <td>6037.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>316835</th>\n",
              "      <td>33000.0</td>\n",
              "      <td>Black</td>\n",
              "      <td>Audi</td>\n",
              "      <td>A3</td>\n",
              "      <td>USED</td>\n",
              "      <td>2016</td>\n",
              "      <td>13295</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>7</td>\n",
              "      <td>4714.285714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>242464</th>\n",
              "      <td>0.0</td>\n",
              "      <td>White</td>\n",
              "      <td>Mazda</td>\n",
              "      <td>Mazda3</td>\n",
              "      <td>NEW</td>\n",
              "      <td>2021</td>\n",
              "      <td>26340</td>\n",
              "      <td>Saloon</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>2</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>361253</th>\n",
              "      <td>15372.0</td>\n",
              "      <td>Blue</td>\n",
              "      <td>MINI</td>\n",
              "      <td>Convertible</td>\n",
              "      <td>USED</td>\n",
              "      <td>2018</td>\n",
              "      <td>15000</td>\n",
              "      <td>Convertible</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>5</td>\n",
              "      <td>3074.400000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>285539</th>\n",
              "      <td>8127.0</td>\n",
              "      <td>White</td>\n",
              "      <td>Kia</td>\n",
              "      <td>ProCeed</td>\n",
              "      <td>USED</td>\n",
              "      <td>2019</td>\n",
              "      <td>21999</td>\n",
              "      <td>Hatchback</td>\n",
              "      <td>False</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>4</td>\n",
              "      <td>2031.750000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3991cc56-bc11-4e23-88aa-c6f487f8bd3e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3991cc56-bc11-4e23-88aa-c6f487f8bd3e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3991cc56-bc11-4e23-88aa-c6f487f8bd3e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Feature Selection and Dimensionality Reduction"
      ],
      "metadata": {
        "id": "uyUI-Qik_3mi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "clean_df.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "DVoVty-wvV2I",
        "outputId": "8ae51b3f-c5c0-4b4f-bfb2-205e4f988c9e"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-55-ca5c71c8a621>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  clean_df.corr()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        mileage  year_of_registration     price  \\\n",
              "mileage                1.000000             -0.752819 -0.549886   \n",
              "year_of_registration  -0.752819              1.000000  0.598196   \n",
              "price                 -0.549886              0.598196  1.000000   \n",
              "crossover_car_and_van  0.006944             -0.010898  0.047796   \n",
              "age                    0.752819             -1.000000 -0.598196   \n",
              "miles_per_year         0.812101             -0.341134 -0.363387   \n",
              "\n",
              "                       crossover_car_and_van       age  miles_per_year  \n",
              "mileage                             0.006944  0.752819        0.812101  \n",
              "year_of_registration               -0.010898 -1.000000       -0.341134  \n",
              "price                               0.047796 -0.598196       -0.363387  \n",
              "crossover_car_and_van               1.000000  0.010898        0.004106  \n",
              "age                                 0.010898  1.000000        0.341134  \n",
              "miles_per_year                      0.004106  0.341134        1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a3e80fa3-039c-488d-8bd5-4cdfa7d3bd83\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mileage</th>\n",
              "      <th>year_of_registration</th>\n",
              "      <th>price</th>\n",
              "      <th>crossover_car_and_van</th>\n",
              "      <th>age</th>\n",
              "      <th>miles_per_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>mileage</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.752819</td>\n",
              "      <td>-0.549886</td>\n",
              "      <td>0.006944</td>\n",
              "      <td>0.752819</td>\n",
              "      <td>0.812101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>year_of_registration</th>\n",
              "      <td>-0.752819</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.598196</td>\n",
              "      <td>-0.010898</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>-0.341134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>price</th>\n",
              "      <td>-0.549886</td>\n",
              "      <td>0.598196</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.047796</td>\n",
              "      <td>-0.598196</td>\n",
              "      <td>-0.363387</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>crossover_car_and_van</th>\n",
              "      <td>0.006944</td>\n",
              "      <td>-0.010898</td>\n",
              "      <td>0.047796</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.010898</td>\n",
              "      <td>0.004106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0.752819</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>-0.598196</td>\n",
              "      <td>0.010898</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.341134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>miles_per_year</th>\n",
              "      <td>0.812101</td>\n",
              "      <td>-0.341134</td>\n",
              "      <td>-0.363387</td>\n",
              "      <td>0.004106</td>\n",
              "      <td>0.341134</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3e80fa3-039c-488d-8bd5-4cdfa7d3bd83')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a3e80fa3-039c-488d-8bd5-4cdfa7d3bd83 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a3e80fa3-039c-488d-8bd5-4cdfa7d3bd83');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(clean_df.corr(), annot=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 657
        },
        "id": "9Nb3SmBB77yM",
        "outputId": "ab004648-eda7-4847-9cf8-8e89d9ca78e9"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-56-a61306ddbf7b>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  sns.heatmap(clean_df.corr(), annot=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 56
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The correlation matrix shows the correlation coefficients between all pairs of variables in the dataframe. We can see that the mileage and year_of_registration variables are highly negatively correlated with a coefficient of -0.75. This means that as the mileage increases, the year of registration tends to decrease, and vice versa. This is an example of multicollinearity, which is bad for regression models.\n",
        "\n",
        "Additionally, the age and mile_per_year variables are highly positively correlated with a coefficient of 0.81. This is expected, as mile_per_year is derived from mileage and age. It will be a good idea to drop one of the variables from each of these pairs to avoid multicollinearity in the regression model. Also the crossover_car_and_van has a very weak correlation, I will be dropping it also."
      ],
      "metadata": {
        "id": "FbZPA6SB1W3R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "reduced_df = clean_df.drop(columns=['crossover_car_and_van', 'year_of_registration'])"
      ],
      "metadata": {
        "id": "rty8EhtN_i9d"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Splitting of data and target"
      ],
      "metadata": {
        "id": "D31WBYJ_Xcc6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X, y = reduced_df.drop(columns='price'), clean_df['price']"
      ],
      "metadata": {
        "id": "k8t6djaEXdT1"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "variances = np.var(X, axis=0)\n",
        "\n",
        "plt.hist(variances, bins=20)\n",
        "plt.xlabel('variance')\n",
        "plt.ylabel('count')\n",
        "plt.show()\n",
        "\n",
        "print(variances)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 576
        },
        "id": "G6srYzEopfT7",
        "outputId": "4ee15989-a277-4a8f-8865-1086a4025144"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:3755: FutureWarning: The default value of numeric_only in DataFrame.var is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  return var(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mileage           9.396097e+08\n",
            "age               1.569233e+01\n",
            "miles_per_year    9.375786e+06\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=23)\n",
        "X_train.shape, X_test.shape"
      ],
      "metadata": {
        "id": "crCRU9VYXkpj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "27ea6560-8c73-48f7-bbc4-269ada13c0d7"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((13803, 9), (4602, 9))"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Polynomial and Interaction Features"
      ],
      "metadata": {
        "id": "r_QFpT_-XQV4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numerical_features = X_train.select_dtypes(exclude='object').columns.tolist()\n",
        "numerical_transformer = Pipeline(\n",
        "    steps=[\n",
        "        ('scaler', StandardScaler()), \n",
        "        ('poly_int', PolynomialFeatures(degree=2, include_bias=False))\n",
        "    ]\n",
        ").set_output(transform='pandas')\n",
        "\n",
        "print(numerical_features)\n",
        "numerical_transformer"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 144
        },
        "id": "gHOjQ0zb77vb",
        "outputId": "ff61a621-bcb1-43fd-9a14-cf74890c7f48"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['mileage', 'age', 'miles_per_year']\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('scaler', StandardScaler()),\n",
              "                ('poly_int', PolynomialFeatures(include_bias=False))])"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
              "                (&#x27;poly_int&#x27;, PolynomialFeatures(include_bias=False))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
              "                (&#x27;poly_int&#x27;, PolynomialFeatures(include_bias=False))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PolynomialFeatures</label><div class=\"sk-toggleable__content\"><pre>PolynomialFeatures(include_bias=False)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numerical_transformer.fit_transform(X_train[numerical_features]).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ueLakwAq77sT",
        "outputId": "35a1bbec-c355-4288-c973-0f4c34df3c9b"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         mileage       age  miles_per_year  mileage^2  mileage age  \\\n",
              "319269 -0.756124 -0.562776       -0.580262   0.571724     0.425529   \n",
              "270431 -0.395432 -0.813729        0.551009   0.156367     0.321775   \n",
              "254051  1.795542  4.205330       -0.228668   3.223970     7.550846   \n",
              "38655  -0.845792 -0.813729       -0.579280   0.715364     0.688245   \n",
              "391744 -0.919797 -0.562776       -0.908883   0.846026     0.517639   \n",
              "\n",
              "        mileage miles_per_year      age^2  age miles_per_year  \\\n",
              "319269                0.438751   0.316717            0.326558   \n",
              "270431               -0.217887   0.662155           -0.448372   \n",
              "254051               -0.410583  17.684800           -0.961625   \n",
              "38655                 0.489950   0.662155            0.471377   \n",
              "391744                0.835987   0.316717            0.511498   \n",
              "\n",
              "        miles_per_year^2  \n",
              "319269          0.336704  \n",
              "270431          0.303610  \n",
              "254051          0.052289  \n",
              "38655           0.335565  \n",
              "391744          0.826068  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-05396d24-c9e5-476f-a9d4-f42f2c945b8b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mileage</th>\n",
              "      <th>age</th>\n",
              "      <th>miles_per_year</th>\n",
              "      <th>mileage^2</th>\n",
              "      <th>mileage age</th>\n",
              "      <th>mileage miles_per_year</th>\n",
              "      <th>age^2</th>\n",
              "      <th>age miles_per_year</th>\n",
              "      <th>miles_per_year^2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>319269</th>\n",
              "      <td>-0.756124</td>\n",
              "      <td>-0.562776</td>\n",
              "      <td>-0.580262</td>\n",
              "      <td>0.571724</td>\n",
              "      <td>0.425529</td>\n",
              "      <td>0.438751</td>\n",
              "      <td>0.316717</td>\n",
              "      <td>0.326558</td>\n",
              "      <td>0.336704</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270431</th>\n",
              "      <td>-0.395432</td>\n",
              "      <td>-0.813729</td>\n",
              "      <td>0.551009</td>\n",
              "      <td>0.156367</td>\n",
              "      <td>0.321775</td>\n",
              "      <td>-0.217887</td>\n",
              "      <td>0.662155</td>\n",
              "      <td>-0.448372</td>\n",
              "      <td>0.303610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>254051</th>\n",
              "      <td>1.795542</td>\n",
              "      <td>4.205330</td>\n",
              "      <td>-0.228668</td>\n",
              "      <td>3.223970</td>\n",
              "      <td>7.550846</td>\n",
              "      <td>-0.410583</td>\n",
              "      <td>17.684800</td>\n",
              "      <td>-0.961625</td>\n",
              "      <td>0.052289</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38655</th>\n",
              "      <td>-0.845792</td>\n",
              "      <td>-0.813729</td>\n",
              "      <td>-0.579280</td>\n",
              "      <td>0.715364</td>\n",
              "      <td>0.688245</td>\n",
              "      <td>0.489950</td>\n",
              "      <td>0.662155</td>\n",
              "      <td>0.471377</td>\n",
              "      <td>0.335565</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>391744</th>\n",
              "      <td>-0.919797</td>\n",
              "      <td>-0.562776</td>\n",
              "      <td>-0.908883</td>\n",
              "      <td>0.846026</td>\n",
              "      <td>0.517639</td>\n",
              "      <td>0.835987</td>\n",
              "      <td>0.316717</td>\n",
              "      <td>0.511498</td>\n",
              "      <td>0.826068</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-05396d24-c9e5-476f-a9d4-f42f2c945b8b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-05396d24-c9e5-476f-a9d4-f42f2c945b8b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-05396d24-c9e5-476f-a9d4-f42f2c945b8b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "categorical_features = X_train.select_dtypes(include='object').columns.tolist()\n",
        "categorical_transformer = Pipeline(\n",
        "    steps=[\n",
        "        ('ohe', OneHotEncoder(handle_unknown='ignore', sparse_output=False, drop='if_binary'))\n",
        "    ]\n",
        ").set_output(transform='pandas')\n",
        "\n",
        "print(categorical_features)\n",
        "categorical_transformer"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 109
        },
        "id": "5K_eyW63covT",
        "outputId": "e8932c2c-8983-44d6-c2c9-0d1a92abec68"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['standard_colour', 'standard_make', 'standard_model', 'vehicle_condition', 'body_type', 'fuel_type']\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('ohe',\n",
              "                 OneHotEncoder(drop='if_binary', handle_unknown='ignore',\n",
              "                               sparse_output=False))])"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                 OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;,\n",
              "                               sparse_output=False))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                 OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;,\n",
              "                               sparse_output=False))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "categorical_transformer.fit_transform(X_train[categorical_features]).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "z2vSas1scopY",
        "outputId": "81cfd6cf-8e36-4a95-824b-a579f7d265a3"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        standard_colour_Beige  standard_colour_Black  standard_colour_Blue  \\\n",
              "319269                    0.0                    0.0                   0.0   \n",
              "270431                    0.0                    1.0                   0.0   \n",
              "254051                    0.0                    0.0                   1.0   \n",
              "38655                     0.0                    0.0                   0.0   \n",
              "391744                    0.0                    0.0                   0.0   \n",
              "\n",
              "        standard_colour_Bronze  standard_colour_Brown  \\\n",
              "319269                     0.0                    0.0   \n",
              "270431                     0.0                    0.0   \n",
              "254051                     0.0                    0.0   \n",
              "38655                      0.0                    0.0   \n",
              "391744                     0.0                    0.0   \n",
              "\n",
              "        standard_colour_Burgundy  standard_colour_Gold  standard_colour_Green  \\\n",
              "319269                       0.0                   0.0                    0.0   \n",
              "270431                       0.0                   0.0                    0.0   \n",
              "254051                       0.0                   0.0                    0.0   \n",
              "38655                        0.0                   0.0                    0.0   \n",
              "391744                       0.0                   0.0                    0.0   \n",
              "\n",
              "        standard_colour_Grey  standard_colour_Maroon  ...  body_type_Saloon  \\\n",
              "319269                   1.0                     0.0  ...               0.0   \n",
              "270431                   0.0                     0.0  ...               0.0   \n",
              "254051                   0.0                     0.0  ...               0.0   \n",
              "38655                    1.0                     0.0  ...               1.0   \n",
              "391744                   1.0                     0.0  ...               0.0   \n",
              "\n",
              "        body_type_Window Van  fuel_type_Bi Fuel  fuel_type_Diesel  \\\n",
              "319269                   0.0                0.0               0.0   \n",
              "270431                   0.0                0.0               1.0   \n",
              "254051                   0.0                0.0               0.0   \n",
              "38655                    0.0                0.0               0.0   \n",
              "391744                   0.0                0.0               0.0   \n",
              "\n",
              "        fuel_type_Diesel Hybrid  fuel_type_Diesel Plug-in Hybrid  \\\n",
              "319269                      0.0                              0.0   \n",
              "270431                      0.0                              0.0   \n",
              "254051                      0.0                              0.0   \n",
              "38655                       0.0                              0.0   \n",
              "391744                      0.0                              0.0   \n",
              "\n",
              "        fuel_type_Electric  fuel_type_Petrol  fuel_type_Petrol Hybrid  \\\n",
              "319269                 0.0               1.0                      0.0   \n",
              "270431                 0.0               0.0                      0.0   \n",
              "254051                 0.0               1.0                      0.0   \n",
              "38655                  0.0               1.0                      0.0   \n",
              "391744                 0.0               1.0                      0.0   \n",
              "\n",
              "        fuel_type_Petrol Plug-in Hybrid  \n",
              "319269                              0.0  \n",
              "270431                              0.0  \n",
              "254051                              0.0  \n",
              "38655                               0.0  \n",
              "391744                              0.0  \n",
              "\n",
              "[5 rows x 631 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ba10c7cc-a69c-45a7-aad9-c87fc97816f6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>standard_colour_Beige</th>\n",
              "      <th>standard_colour_Black</th>\n",
              "      <th>standard_colour_Blue</th>\n",
              "      <th>standard_colour_Bronze</th>\n",
              "      <th>standard_colour_Brown</th>\n",
              "      <th>standard_colour_Burgundy</th>\n",
              "      <th>standard_colour_Gold</th>\n",
              "      <th>standard_colour_Green</th>\n",
              "      <th>standard_colour_Grey</th>\n",
              "      <th>standard_colour_Maroon</th>\n",
              "      <th>...</th>\n",
              "      <th>body_type_Saloon</th>\n",
              "      <th>body_type_Window Van</th>\n",
              "      <th>fuel_type_Bi Fuel</th>\n",
              "      <th>fuel_type_Diesel</th>\n",
              "      <th>fuel_type_Diesel Hybrid</th>\n",
              "      <th>fuel_type_Diesel Plug-in Hybrid</th>\n",
              "      <th>fuel_type_Electric</th>\n",
              "      <th>fuel_type_Petrol</th>\n",
              "      <th>fuel_type_Petrol Hybrid</th>\n",
              "      <th>fuel_type_Petrol Plug-in Hybrid</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>319269</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270431</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>254051</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38655</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>391744</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 631 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba10c7cc-a69c-45a7-aad9-c87fc97816f6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ba10c7cc-a69c-45a7-aad9-c87fc97816f6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ba10c7cc-a69c-45a7-aad9-c87fc97816f6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "preprocessor = ColumnTransformer(\n",
        "    transformers = [\n",
        "        ('num', numerical_transformer, numerical_features), \n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ], \n",
        "    remainder ='passthrough', \n",
        "    verbose_feature_names_out=False\n",
        ").set_output(transform='pandas')"
      ],
      "metadata": {
        "id": "tl0JQrULcomF"
      },
      "execution_count": 110,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "preprocessor.fit_transform(X_train).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "YKCjVTiHdkxc",
        "outputId": "aa77df63-6b00-4d8c-8656-6182f9044e3c"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         mileage       age  miles_per_year  mileage^2  mileage age  \\\n",
              "319269 -0.756124 -0.562776       -0.580262   0.571724     0.425529   \n",
              "270431 -0.395432 -0.813729        0.551009   0.156367     0.321775   \n",
              "254051  1.795542  4.205330       -0.228668   3.223970     7.550846   \n",
              "38655  -0.845792 -0.813729       -0.579280   0.715364     0.688245   \n",
              "391744 -0.919797 -0.562776       -0.908883   0.846026     0.517639   \n",
              "\n",
              "        mileage miles_per_year      age^2  age miles_per_year  \\\n",
              "319269                0.438751   0.316717            0.326558   \n",
              "270431               -0.217887   0.662155           -0.448372   \n",
              "254051               -0.410583  17.684800           -0.961625   \n",
              "38655                 0.489950   0.662155            0.471377   \n",
              "391744                0.835987   0.316717            0.511498   \n",
              "\n",
              "        miles_per_year^2  standard_colour_Beige  ...  body_type_Saloon  \\\n",
              "319269          0.336704                    0.0  ...               0.0   \n",
              "270431          0.303610                    0.0  ...               0.0   \n",
              "254051          0.052289                    0.0  ...               0.0   \n",
              "38655           0.335565                    0.0  ...               1.0   \n",
              "391744          0.826068                    0.0  ...               0.0   \n",
              "\n",
              "        body_type_Window Van  fuel_type_Bi Fuel  fuel_type_Diesel  \\\n",
              "319269                   0.0                0.0               0.0   \n",
              "270431                   0.0                0.0               1.0   \n",
              "254051                   0.0                0.0               0.0   \n",
              "38655                    0.0                0.0               0.0   \n",
              "391744                   0.0                0.0               0.0   \n",
              "\n",
              "        fuel_type_Diesel Hybrid  fuel_type_Diesel Plug-in Hybrid  \\\n",
              "319269                      0.0                              0.0   \n",
              "270431                      0.0                              0.0   \n",
              "254051                      0.0                              0.0   \n",
              "38655                       0.0                              0.0   \n",
              "391744                      0.0                              0.0   \n",
              "\n",
              "        fuel_type_Electric  fuel_type_Petrol  fuel_type_Petrol Hybrid  \\\n",
              "319269                 0.0               1.0                      0.0   \n",
              "270431                 0.0               0.0                      0.0   \n",
              "254051                 0.0               1.0                      0.0   \n",
              "38655                  0.0               1.0                      0.0   \n",
              "391744                 0.0               1.0                      0.0   \n",
              "\n",
              "        fuel_type_Petrol Plug-in Hybrid  \n",
              "319269                              0.0  \n",
              "270431                              0.0  \n",
              "254051                              0.0  \n",
              "38655                               0.0  \n",
              "391744                              0.0  \n",
              "\n",
              "[5 rows x 640 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d06a0059-eaa4-4759-af4c-4264eb1798f6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mileage</th>\n",
              "      <th>age</th>\n",
              "      <th>miles_per_year</th>\n",
              "      <th>mileage^2</th>\n",
              "      <th>mileage age</th>\n",
              "      <th>mileage miles_per_year</th>\n",
              "      <th>age^2</th>\n",
              "      <th>age miles_per_year</th>\n",
              "      <th>miles_per_year^2</th>\n",
              "      <th>standard_colour_Beige</th>\n",
              "      <th>...</th>\n",
              "      <th>body_type_Saloon</th>\n",
              "      <th>body_type_Window Van</th>\n",
              "      <th>fuel_type_Bi Fuel</th>\n",
              "      <th>fuel_type_Diesel</th>\n",
              "      <th>fuel_type_Diesel Hybrid</th>\n",
              "      <th>fuel_type_Diesel Plug-in Hybrid</th>\n",
              "      <th>fuel_type_Electric</th>\n",
              "      <th>fuel_type_Petrol</th>\n",
              "      <th>fuel_type_Petrol Hybrid</th>\n",
              "      <th>fuel_type_Petrol Plug-in Hybrid</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>319269</th>\n",
              "      <td>-0.756124</td>\n",
              "      <td>-0.562776</td>\n",
              "      <td>-0.580262</td>\n",
              "      <td>0.571724</td>\n",
              "      <td>0.425529</td>\n",
              "      <td>0.438751</td>\n",
              "      <td>0.316717</td>\n",
              "      <td>0.326558</td>\n",
              "      <td>0.336704</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270431</th>\n",
              "      <td>-0.395432</td>\n",
              "      <td>-0.813729</td>\n",
              "      <td>0.551009</td>\n",
              "      <td>0.156367</td>\n",
              "      <td>0.321775</td>\n",
              "      <td>-0.217887</td>\n",
              "      <td>0.662155</td>\n",
              "      <td>-0.448372</td>\n",
              "      <td>0.303610</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>254051</th>\n",
              "      <td>1.795542</td>\n",
              "      <td>4.205330</td>\n",
              "      <td>-0.228668</td>\n",
              "      <td>3.223970</td>\n",
              "      <td>7.550846</td>\n",
              "      <td>-0.410583</td>\n",
              "      <td>17.684800</td>\n",
              "      <td>-0.961625</td>\n",
              "      <td>0.052289</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38655</th>\n",
              "      <td>-0.845792</td>\n",
              "      <td>-0.813729</td>\n",
              "      <td>-0.579280</td>\n",
              "      <td>0.715364</td>\n",
              "      <td>0.688245</td>\n",
              "      <td>0.489950</td>\n",
              "      <td>0.662155</td>\n",
              "      <td>0.471377</td>\n",
              "      <td>0.335565</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>391744</th>\n",
              "      <td>-0.919797</td>\n",
              "      <td>-0.562776</td>\n",
              "      <td>-0.908883</td>\n",
              "      <td>0.846026</td>\n",
              "      <td>0.517639</td>\n",
              "      <td>0.835987</td>\n",
              "      <td>0.316717</td>\n",
              "      <td>0.511498</td>\n",
              "      <td>0.826068</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 640 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d06a0059-eaa4-4759-af4c-4264eb1798f6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d06a0059-eaa4-4759-af4c-4264eb1798f6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d06a0059-eaa4-4759-af4c-4264eb1798f6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Feature Selection"
      ],
      "metadata": {
        "id": "3cW7QfzWeQpp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "I will be using Variance Threshold, RFECV and SelectKbest (f-regression) to select features from the dataset."
      ],
      "metadata": {
        "id": "ws9sbtHOfGGW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Variance Threshold**\n"
      ],
      "metadata": {
        "id": "DOtxdqwjwW4K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#It removes all features whose variance doesn’t meet some threshold, this is like removing features of same values\n",
        "from sklearn.feature_selection import VarianceThreshold\n",
        "\n",
        "selector = Pipeline([\n",
        "    ('preprocessor', preprocessor), \n",
        "    ('variance_selector', VarianceThreshold(threshold=0.001))\n",
        "]).set_output(transform='pandas')\n",
        "\n",
        "selector.fit(X_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        },
        "id": "g16DdXv1ePvz",
        "outputId": "fd7b54a0-daf7-4a92-8d89-ea700b32ce8b"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('preprocessor',\n",
              "                 ColumnTransformer(remainder='passthrough',\n",
              "                                   transformers=[('num',\n",
              "                                                  Pipeline(steps=[('scaler',\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  ('poly_int',\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  ['mileage', 'age',\n",
              "                                                   'miles_per_year']),\n",
              "                                                 ('cat',\n",
              "                                                  Pipeline(steps=[('ohe',\n",
              "                                                                   OneHotEncoder(drop='if_binary',\n",
              "                                                                                 handle_unknown='ignore',\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  ['standard_colour',\n",
              "                                                   'standard_make',\n",
              "                                                   'standard_model',\n",
              "                                                   'vehicle_condition',\n",
              "                                                   'body_type', 'fuel_type'])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                ('variance_selector', VarianceThreshold(threshold=0.001))])"
            ],
            "text/html": [
              "<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  (&#x27;poly_int&#x27;,\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  [&#x27;mileage&#x27;, &#x27;age&#x27;,\n",
              "                                                   &#x27;miles_per_year&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                 handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  [&#x27;standard_colour&#x27;,\n",
              "                                                   &#x27;standard_make&#x27;,\n",
              "                                                   &#x27;standard_model&#x27;,\n",
              "                                                   &#x27;vehicle_condition&#x27;,\n",
              "                                                   &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                (&#x27;variance_selector&#x27;, VarianceThreshold(threshold=0.001))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-56\" type=\"checkbox\" ><label for=\"sk-estimator-id-56\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  (&#x27;poly_int&#x27;,\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  [&#x27;mileage&#x27;, &#x27;age&#x27;,\n",
              "                                                   &#x27;miles_per_year&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                 handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  [&#x27;standard_colour&#x27;,\n",
              "                                                   &#x27;standard_make&#x27;,\n",
              "                                                   &#x27;standard_model&#x27;,\n",
              "                                                   &#x27;vehicle_condition&#x27;,\n",
              "                                                   &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                (&#x27;variance_selector&#x27;, VarianceThreshold(threshold=0.001))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-57\" type=\"checkbox\" ><label for=\"sk-estimator-id-57\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                  transformers=[(&#x27;num&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
              "                                                 (&#x27;poly_int&#x27;,\n",
              "                                                  PolynomialFeatures(include_bias=False))]),\n",
              "                                 [&#x27;mileage&#x27;, &#x27;age&#x27;, &#x27;miles_per_year&#x27;]),\n",
              "                                (&#x27;cat&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                  OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                sparse_output=False))]),\n",
              "                                 [&#x27;standard_colour&#x27;, &#x27;standard_make&#x27;,\n",
              "                                  &#x27;standard_model&#x27;, &#x27;vehicle_condition&#x27;,\n",
              "                                  &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                  verbose_feature_names_out=False)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-58\" type=\"checkbox\" ><label for=\"sk-estimator-id-58\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;mileage&#x27;, &#x27;age&#x27;, &#x27;miles_per_year&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-59\" type=\"checkbox\" ><label for=\"sk-estimator-id-59\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-60\" type=\"checkbox\" ><label for=\"sk-estimator-id-60\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PolynomialFeatures</label><div class=\"sk-toggleable__content\"><pre>PolynomialFeatures(include_bias=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-61\" type=\"checkbox\" ><label for=\"sk-estimator-id-61\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;standard_colour&#x27;, &#x27;standard_make&#x27;, &#x27;standard_model&#x27;, &#x27;vehicle_condition&#x27;, &#x27;body_type&#x27;, &#x27;fuel_type&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-62\" type=\"checkbox\" ><label for=\"sk-estimator-id-62\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-63\" type=\"checkbox\" ><label for=\"sk-estimator-id-63\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-64\" type=\"checkbox\" ><label for=\"sk-estimator-id-64\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-65\" type=\"checkbox\" ><label for=\"sk-estimator-id-65\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VarianceThreshold</label><div class=\"sk-toggleable__content\"><pre>VarianceThreshold(threshold=0.001)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sum(selector.named_steps['variance_selector'].get_support())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rNv0Vad-5hYO",
        "outputId": "1ca59abd-b0fa-47a6-fe7a-9792fcba90eb"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "270"
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Univariate Feature Selection: SelectKBest using f-regression**\n"
      ],
      "metadata": {
        "id": "8GLDjY5aCGch"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_selection import SelectKBest, f_regression\n",
        "\n",
        "f_reg_sel = Pipeline( \n",
        "    steps=[\n",
        "        ('preprocessor', preprocessor), \n",
        "        ('feat_sel', SelectKBest(f_regression, k=20)), \n",
        "    ]\n",
        ").set_output(transform='pandas')\n",
        "\n",
        "f_reg_sel.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "B_JUgzu2_i1S",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        },
        "outputId": "dcc7dd98-8a35-4843-e0bf-3292cdc53394"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('preprocessor',\n",
              "                 ColumnTransformer(remainder='passthrough',\n",
              "                                   transformers=[('num',\n",
              "                                                  Pipeline(steps=[('scaler',\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  ('poly_int',\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  ['mileage', 'age',\n",
              "                                                   'miles_per_year']),\n",
              "                                                 ('cat',\n",
              "                                                  Pipeline(steps=[('ohe',\n",
              "                                                                   OneHotEncoder(drop='if_binary',\n",
              "                                                                                 handle_unknown='ignore',\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  ['standard_colour',\n",
              "                                                   'standard_make',\n",
              "                                                   'standard_model',\n",
              "                                                   'vehicle_condition',\n",
              "                                                   'body_type', 'fuel_type'])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                ('feat_sel',\n",
              "                 SelectKBest(k=20,\n",
              "                             score_func=<function f_regression at 0x7f8e353eb910>))])"
            ],
            "text/html": [
              "<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  (&#x27;poly_int&#x27;,\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  [&#x27;mileage&#x27;, &#x27;age&#x27;,\n",
              "                                                   &#x27;miles_per_year&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                 handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  [&#x27;standard_colour&#x27;,\n",
              "                                                   &#x27;standard_make&#x27;,\n",
              "                                                   &#x27;standard_model&#x27;,\n",
              "                                                   &#x27;vehicle_condition&#x27;,\n",
              "                                                   &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                (&#x27;feat_sel&#x27;,\n",
              "                 SelectKBest(k=20,\n",
              "                             score_func=&lt;function f_regression at 0x7f8e353eb910&gt;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-66\" type=\"checkbox\" ><label for=\"sk-estimator-id-66\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  (&#x27;poly_int&#x27;,\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  [&#x27;mileage&#x27;, &#x27;age&#x27;,\n",
              "                                                   &#x27;miles_per_year&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                 handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  [&#x27;standard_colour&#x27;,\n",
              "                                                   &#x27;standard_make&#x27;,\n",
              "                                                   &#x27;standard_model&#x27;,\n",
              "                                                   &#x27;vehicle_condition&#x27;,\n",
              "                                                   &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                (&#x27;feat_sel&#x27;,\n",
              "                 SelectKBest(k=20,\n",
              "                             score_func=&lt;function f_regression at 0x7f8e353eb910&gt;))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-67\" type=\"checkbox\" ><label for=\"sk-estimator-id-67\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                  transformers=[(&#x27;num&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
              "                                                 (&#x27;poly_int&#x27;,\n",
              "                                                  PolynomialFeatures(include_bias=False))]),\n",
              "                                 [&#x27;mileage&#x27;, &#x27;age&#x27;, &#x27;miles_per_year&#x27;]),\n",
              "                                (&#x27;cat&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                  OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                sparse_output=False))]),\n",
              "                                 [&#x27;standard_colour&#x27;, &#x27;standard_make&#x27;,\n",
              "                                  &#x27;standard_model&#x27;, &#x27;vehicle_condition&#x27;,\n",
              "                                  &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                  verbose_feature_names_out=False)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-68\" type=\"checkbox\" ><label for=\"sk-estimator-id-68\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;mileage&#x27;, &#x27;age&#x27;, &#x27;miles_per_year&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-69\" type=\"checkbox\" ><label for=\"sk-estimator-id-69\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-70\" type=\"checkbox\" ><label for=\"sk-estimator-id-70\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PolynomialFeatures</label><div class=\"sk-toggleable__content\"><pre>PolynomialFeatures(include_bias=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-71\" type=\"checkbox\" ><label for=\"sk-estimator-id-71\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;standard_colour&#x27;, &#x27;standard_make&#x27;, &#x27;standard_model&#x27;, &#x27;vehicle_condition&#x27;, &#x27;body_type&#x27;, &#x27;fuel_type&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-72\" type=\"checkbox\" ><label for=\"sk-estimator-id-72\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-73\" type=\"checkbox\" ><label for=\"sk-estimator-id-73\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-74\" type=\"checkbox\" ><label for=\"sk-estimator-id-74\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-75\" type=\"checkbox\" ><label for=\"sk-estimator-id-75\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SelectKBest</label><div class=\"sk-toggleable__content\"><pre>SelectKBest(k=20, score_func=&lt;function f_regression at 0x7f8e353eb910&gt;)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f_reg_sel.named_steps['feat_sel'].get_feature_names_out()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jJKpEKmyChMT",
        "outputId": "bd812e43-1787-434b-c1f3-e3b48740ad7a"
      },
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['mileage', 'age', 'miles_per_year', 'mileage^2', 'mileage age',\n",
              "       'age^2', 'age miles_per_year', 'standard_make_Audi',\n",
              "       'standard_make_BMW', 'standard_make_Land Rover',\n",
              "       'standard_make_Mercedes-Benz', 'standard_make_Vauxhall',\n",
              "       'standard_model_Corsa', 'vehicle_condition_USED',\n",
              "       'body_type_Hatchback', 'body_type_SUV', 'body_type_Saloon',\n",
              "       'fuel_type_Electric', 'fuel_type_Petrol',\n",
              "       'fuel_type_Petrol Plug-in Hybrid'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Recursive Feature Elimination with Cross Validation**"
      ],
      "metadata": {
        "id": "ytasMD2Qxgl6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_selection import RFECV\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "from sklearn.linear_model import LogisticRegression"
      ],
      "metadata": {
        "id": "OgOCl9t3KE7c"
      },
      "execution_count": 117,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rfecv_pipe = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('select', RFECV(estimator=RandomForestRegressor(), cv=5, scoring='neg_mean_squared_error'))\n",
        "]).set_output(transform='pandas')\n",
        "\n",
        "rfecv_pipe.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        },
        "id": "YbQdz0Szy7zM",
        "outputId": "06fdcce8-2499-4baa-8047-52aa6f29bd87"
      },
      "execution_count": 138,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-138-52200901c08c>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m ]).set_output(transform='pandas')\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mrfecv_pipe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    403\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_final_estimator\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"passthrough\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    404\u001b[0m                 \u001b[0mfit_params_last_step\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfit_params_steps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msteps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 405\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_final_estimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params_last_step\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    406\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    407\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_rfe.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups)\u001b[0m\n\u001b[1;32m    723\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdelayed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_rfe_single_fit\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    724\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 725\u001b[0;31m         scores = parallel(\n\u001b[0m\u001b[1;32m    726\u001b[0m             \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrfe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscorer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    727\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_rfe.py\u001b[0m in \u001b[0;36m<genexpr>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    724\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    725\u001b[0m         scores = parallel(\n\u001b[0;32m--> 726\u001b[0;31m             \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrfe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscorer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    727\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    728\u001b[0m         )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_rfe.py\u001b[0m in \u001b[0;36m_rfe_single_fit\u001b[0;34m(rfe, estimator, X, y, train, test, scorer)\u001b[0m\n\u001b[1;32m     35\u001b[0m     \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_safe_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_safe_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m     return rfe._fit(\n\u001b[0m\u001b[1;32m     38\u001b[0m         \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m         \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_rfe.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, step_score, **fit_params)\u001b[0m\n\u001b[1;32m    297\u001b[0m                 \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Fitting estimator with %d features.\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msupport_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 299\u001b[0;31m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    300\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    301\u001b[0m             \u001b[0;31m# Get importance and rank them\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    471\u001b[0m             \u001b[0;31m# parallel_backend contexts set at a higher level,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    472\u001b[0m             \u001b[0;31m# since correctness does not rely on using threads.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 473\u001b[0;31m             trees = Parallel(\n\u001b[0m\u001b[1;32m    474\u001b[0m                 \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    475\u001b[0m                 \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         )\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1086\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1088\u001b[0;31m             \u001b[0;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1089\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1090\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    899\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    900\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 901\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    902\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    903\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    817\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    818\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 819\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    820\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    821\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    595\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    596\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 597\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    598\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    599\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    286\u001b[0m         \u001b[0;31m# change the default number of processes to -1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 288\u001b[0;31m             return [func(*args, **kwargs)\n\u001b[0m\u001b[1;32m    289\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    286\u001b[0m         \u001b[0;31m# change the default number of processes to -1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 288\u001b[0;31m             return [func(*args, **kwargs)\n\u001b[0m\u001b[1;32m    289\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 123\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_parallel_build_trees\u001b[0;34m(tree, bootstrap, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight, n_samples_bootstrap)\u001b[0m\n\u001b[1;32m    182\u001b[0m             \u001b[0mcurr_sample_weight\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0mcompute_sample_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"balanced\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 184\u001b[0;31m         \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurr_sample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    185\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m         \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m   1245\u001b[0m         \"\"\"\n\u001b[1;32m   1246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1247\u001b[0;31m         super().fit(\n\u001b[0m\u001b[1;32m   1248\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1249\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m    377\u001b[0m             )\n\u001b[1;32m    378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 379\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    380\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    381\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rfecv_pipe.named_steps['select'].get_feature_names_out()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WQ0655R6DrwP",
        "outputId": "27dd1253-2c06-4656-8a91-f1834e26bc77"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['mileage', 'age', 'miles_per_year', 'mileage^2', 'mileage age',\n",
              "       'age^2', 'age miles_per_year', 'standard_make_Audi',\n",
              "       'standard_make_BMW', 'standard_make_Land Rover',\n",
              "       'standard_make_Mercedes-Benz', 'standard_make_Vauxhall',\n",
              "       'standard_model_Corsa', 'vehicle_condition_USED',\n",
              "       'body_type_Hatchback', 'body_type_SUV', 'body_type_Saloon',\n",
              "       'fuel_type_Electric', 'fuel_type_Petrol',\n",
              "       'fuel_type_Petrol Plug-in Hybrid'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Dimensionality Reduction with PCA**"
      ],
      "metadata": {
        "id": "Sw6GHLT-FI9Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.decomposition import PCA"
      ],
      "metadata": {
        "id": "zeWu6K5ASUiq"
      },
      "execution_count": 122,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pca_pipe = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('reducer', PCA(n_components=3)),\n",
        "]).set_output(transform='pandas')\n",
        "\n",
        "pca_pipe.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "eO03tmFkSUfT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        },
        "outputId": "9352f3f7-9f15-41d7-9dcb-adfaf02edaef"
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('preprocessor',\n",
              "                 ColumnTransformer(remainder='passthrough',\n",
              "                                   transformers=[('num',\n",
              "                                                  Pipeline(steps=[('scaler',\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  ('poly_int',\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  ['mileage', 'age',\n",
              "                                                   'miles_per_year']),\n",
              "                                                 ('cat',\n",
              "                                                  Pipeline(steps=[('ohe',\n",
              "                                                                   OneHotEncoder(drop='if_binary',\n",
              "                                                                                 handle_unknown='ignore',\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  ['standard_colour',\n",
              "                                                   'standard_make',\n",
              "                                                   'standard_model',\n",
              "                                                   'vehicle_condition',\n",
              "                                                   'body_type', 'fuel_type'])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                ('reducer', PCA(n_components=3))])"
            ],
            "text/html": [
              "<style>#sk-container-id-12 {color: black;background-color: white;}#sk-container-id-12 pre{padding: 0;}#sk-container-id-12 div.sk-toggleable {background-color: white;}#sk-container-id-12 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-12 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-12 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-12 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-12 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-12 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-12 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-12 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-12 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-12 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-12 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-12 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-12 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-12 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-12 div.sk-item {position: relative;z-index: 1;}#sk-container-id-12 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-12 div.sk-item::before, #sk-container-id-12 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-12 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-12 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-12 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-12 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-12 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-12 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-12 div.sk-label-container {text-align: center;}#sk-container-id-12 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-12 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-12\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  (&#x27;poly_int&#x27;,\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  [&#x27;mileage&#x27;, &#x27;age&#x27;,\n",
              "                                                   &#x27;miles_per_year&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                 handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  [&#x27;standard_colour&#x27;,\n",
              "                                                   &#x27;standard_make&#x27;,\n",
              "                                                   &#x27;standard_model&#x27;,\n",
              "                                                   &#x27;vehicle_condition&#x27;,\n",
              "                                                   &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                (&#x27;reducer&#x27;, PCA(n_components=3))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-96\" type=\"checkbox\" ><label for=\"sk-estimator-id-96\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  (&#x27;poly_int&#x27;,\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  [&#x27;mileage&#x27;, &#x27;age&#x27;,\n",
              "                                                   &#x27;miles_per_year&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                 handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  [&#x27;standard_colour&#x27;,\n",
              "                                                   &#x27;standard_make&#x27;,\n",
              "                                                   &#x27;standard_model&#x27;,\n",
              "                                                   &#x27;vehicle_condition&#x27;,\n",
              "                                                   &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                (&#x27;reducer&#x27;, PCA(n_components=3))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-97\" type=\"checkbox\" ><label for=\"sk-estimator-id-97\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                  transformers=[(&#x27;num&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
              "                                                 (&#x27;poly_int&#x27;,\n",
              "                                                  PolynomialFeatures(include_bias=False))]),\n",
              "                                 [&#x27;mileage&#x27;, &#x27;age&#x27;, &#x27;miles_per_year&#x27;]),\n",
              "                                (&#x27;cat&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                  OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                sparse_output=False))]),\n",
              "                                 [&#x27;standard_colour&#x27;, &#x27;standard_make&#x27;,\n",
              "                                  &#x27;standard_model&#x27;, &#x27;vehicle_condition&#x27;,\n",
              "                                  &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                  verbose_feature_names_out=False)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-98\" type=\"checkbox\" ><label for=\"sk-estimator-id-98\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;mileage&#x27;, &#x27;age&#x27;, &#x27;miles_per_year&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-99\" type=\"checkbox\" ><label for=\"sk-estimator-id-99\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-100\" type=\"checkbox\" ><label for=\"sk-estimator-id-100\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PolynomialFeatures</label><div class=\"sk-toggleable__content\"><pre>PolynomialFeatures(include_bias=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-101\" type=\"checkbox\" ><label for=\"sk-estimator-id-101\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;standard_colour&#x27;, &#x27;standard_make&#x27;, &#x27;standard_model&#x27;, &#x27;vehicle_condition&#x27;, &#x27;body_type&#x27;, &#x27;fuel_type&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-102\" type=\"checkbox\" ><label for=\"sk-estimator-id-102\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-103\" type=\"checkbox\" ><label for=\"sk-estimator-id-103\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-104\" type=\"checkbox\" ><label for=\"sk-estimator-id-104\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-105\" type=\"checkbox\" ><label for=\"sk-estimator-id-105\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PCA</label><div class=\"sk-toggleable__content\"><pre>PCA(n_components=3)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pca_pipe.named_steps['reducer'].explained_variance_ratio_"
      ],
      "metadata": {
        "id": "zPSZxCYTSUcB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "429bf063-ffd8-4957-873b-37eb997ae1a0"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.3261275 , 0.28234386, 0.09273081])"
            ]
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(pca_pipe.named_steps['reducer'].explained_variance_ratio_.sum()) # the 3 components selected by PCA explains only 70% of the variance in the dataset"
      ],
      "metadata": {
        "id": "-t-6KEVrSUYx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "70e9b2a7-78af-4697-886d-c7da3cbaeb8a"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.7012021719203819\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Building"
      ],
      "metadata": {
        "id": "77SmQxauJkRc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "For this analysis, I will be using the following models - \n",
        "\n",
        "\n",
        "\n",
        "1.   Linear Model - ElasticNet CV\n",
        "2.   Random Forest - Random Forest Regressor\n",
        "3.   Boosted Tree - Gradient Boosting Regressor\n",
        "4.   Stacker Ensemble - Stacking CV Regressor\n",
        "\n"
      ],
      "metadata": {
        "id": "VYWPsXkdJ_1P"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. Linear Model - ElasticNet CV**"
      ],
      "metadata": {
        "id": "MQp_y5IHLcOz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import ElasticNet\n",
        "\n",
        "linear_model = ElasticNet(alpha=0.1, l1_ratio=0.5)\n",
        "linear_pipe = Pipeline(\n",
        "    steps=[\n",
        "        ('preprocessor', preprocessor), \n",
        "        #('variance_selector', VarianceThreshold(threshold=0.01)), \n",
        "        ('feat_sel', SelectKBest(f_regression, k=10)), \n",
        "        #('select', RFECV(estimator=RandomForestRegressor(), cv=3)),\n",
        "        #('reducer', PCA(n_components=5)),\n",
        "        ('lr_model', linear_model)\n",
        "    ]\n",
        ").set_output(transform='pandas')"
      ],
      "metadata": {
        "id": "kru1w92eSUSB"
      },
      "execution_count": 178,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "linear_pipe.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 262
        },
        "id": "2lMj1FClJjRy",
        "outputId": "44fcc36c-ab73-421a-85af-1d5a8fb9b961"
      },
      "execution_count": 179,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('preprocessor',\n",
              "                 ColumnTransformer(remainder='passthrough',\n",
              "                                   transformers=[('num',\n",
              "                                                  Pipeline(steps=[('scaler',\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  ('poly_int',\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  ['mileage', 'age',\n",
              "                                                   'miles_per_year']),\n",
              "                                                 ('cat',\n",
              "                                                  Pipeline(steps=[('ohe',\n",
              "                                                                   OneHotEncoder(drop='if_binary',\n",
              "                                                                                 handle_unknown='ignore',\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  ['standard_colour',\n",
              "                                                   'standard_make',\n",
              "                                                   'standard_model',\n",
              "                                                   'vehicle_condition',\n",
              "                                                   'body_type', 'fuel_type'])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                ('feat_sel',\n",
              "                 SelectKBest(score_func=<function f_regression at 0x7f8e353eb910>)),\n",
              "                ('lr_model', ElasticNet(alpha=0.1))])"
            ],
            "text/html": [
              "<style>#sk-container-id-21 {color: black;background-color: white;}#sk-container-id-21 pre{padding: 0;}#sk-container-id-21 div.sk-toggleable {background-color: white;}#sk-container-id-21 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-21 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-21 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-21 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-21 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-21 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-21 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-21 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-21 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-21 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-21 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-21 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-21 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-21 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-21 div.sk-item {position: relative;z-index: 1;}#sk-container-id-21 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-21 div.sk-item::before, #sk-container-id-21 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-21 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-21 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-21 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-21 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-21 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-21 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-21 div.sk-label-container {text-align: center;}#sk-container-id-21 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-21 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-21\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  (&#x27;poly_int&#x27;,\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  [&#x27;mileage&#x27;, &#x27;age&#x27;,\n",
              "                                                   &#x27;miles_per_year&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                 handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  [&#x27;standard_colour&#x27;,\n",
              "                                                   &#x27;standard_make&#x27;,\n",
              "                                                   &#x27;standard_model&#x27;,\n",
              "                                                   &#x27;vehicle_condition&#x27;,\n",
              "                                                   &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                (&#x27;feat_sel&#x27;,\n",
              "                 SelectKBest(score_func=&lt;function f_regression at 0x7f8e353eb910&gt;)),\n",
              "                (&#x27;lr_model&#x27;, ElasticNet(alpha=0.1))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-200\" type=\"checkbox\" ><label for=\"sk-estimator-id-200\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  (&#x27;poly_int&#x27;,\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  [&#x27;mileage&#x27;, &#x27;age&#x27;,\n",
              "                                                   &#x27;miles_per_year&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                 handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  [&#x27;standard_colour&#x27;,\n",
              "                                                   &#x27;standard_make&#x27;,\n",
              "                                                   &#x27;standard_model&#x27;,\n",
              "                                                   &#x27;vehicle_condition&#x27;,\n",
              "                                                   &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                (&#x27;feat_sel&#x27;,\n",
              "                 SelectKBest(score_func=&lt;function f_regression at 0x7f8e353eb910&gt;)),\n",
              "                (&#x27;lr_model&#x27;, ElasticNet(alpha=0.1))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-201\" type=\"checkbox\" ><label for=\"sk-estimator-id-201\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                  transformers=[(&#x27;num&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
              "                                                 (&#x27;poly_int&#x27;,\n",
              "                                                  PolynomialFeatures(include_bias=False))]),\n",
              "                                 [&#x27;mileage&#x27;, &#x27;age&#x27;, &#x27;miles_per_year&#x27;]),\n",
              "                                (&#x27;cat&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                  OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                sparse_output=False))]),\n",
              "                                 [&#x27;standard_colour&#x27;, &#x27;standard_make&#x27;,\n",
              "                                  &#x27;standard_model&#x27;, &#x27;vehicle_condition&#x27;,\n",
              "                                  &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                  verbose_feature_names_out=False)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-202\" type=\"checkbox\" ><label for=\"sk-estimator-id-202\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;mileage&#x27;, &#x27;age&#x27;, &#x27;miles_per_year&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-203\" type=\"checkbox\" ><label for=\"sk-estimator-id-203\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-204\" type=\"checkbox\" ><label for=\"sk-estimator-id-204\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PolynomialFeatures</label><div class=\"sk-toggleable__content\"><pre>PolynomialFeatures(include_bias=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-205\" type=\"checkbox\" ><label for=\"sk-estimator-id-205\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;standard_colour&#x27;, &#x27;standard_make&#x27;, &#x27;standard_model&#x27;, &#x27;vehicle_condition&#x27;, &#x27;body_type&#x27;, &#x27;fuel_type&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-206\" type=\"checkbox\" ><label for=\"sk-estimator-id-206\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-207\" type=\"checkbox\" ><label for=\"sk-estimator-id-207\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-208\" type=\"checkbox\" ><label for=\"sk-estimator-id-208\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-209\" type=\"checkbox\" ><label for=\"sk-estimator-id-209\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SelectKBest</label><div class=\"sk-toggleable__content\"><pre>SelectKBest(score_func=&lt;function f_regression at 0x7f8e353eb910&gt;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-210\" type=\"checkbox\" ><label for=\"sk-estimator-id-210\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet(alpha=0.1)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "linear_pipe.feature_names_in_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lHn7z3mhJi11",
        "outputId": "a4a7f9f2-8efe-4a8e-cf82-9da846a45d44"
      },
      "execution_count": 180,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['mileage', 'standard_colour', 'standard_make', 'standard_model',\n",
              "       'vehicle_condition', 'body_type', 'fuel_type', 'age',\n",
              "       'miles_per_year'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "linear_pipe.score(X_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a4w4xMaQJitm",
        "outputId": "c7734533-228d-4b25-931b-996ba0f17090"
      },
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5607886603496588"
            ]
          },
          "metadata": {},
          "execution_count": 181
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Hyperparameter Tuning - with GridSearch CV: Linear Model"
      ],
      "metadata": {
        "id": "olf5MZoWZuv_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "linear_params = {\n",
        "    'feat_sel__k':[5,10,15],\n",
        "    'lr_model__alpha': [0.1, 1, 10],\n",
        "    'lr_model__l1_ratio': [0.1, 0.5, 0.9]\n",
        "}"
      ],
      "metadata": {
        "id": "cBRLCKwtJilY"
      },
      "execution_count": 161,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "linear_grid = GridSearchCV(linear_pipe, \n",
        "                    param_grid = linear_params, \n",
        "                    cv=5, \n",
        "                    scoring='neg_mean_squared_error')"
      ],
      "metadata": {
        "id": "qMDsHlbQJicz"
      },
      "execution_count": 162,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "linear_grid.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "hJEVCm3UdL0f",
        "outputId": "df496d65-b356-4cf0-f54f-e33e2ba65cd4"
      },
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5,\n",
              "             estimator=Pipeline(steps=[('preprocessor',\n",
              "                                        ColumnTransformer(remainder='passthrough',\n",
              "                                                          transformers=[('num',\n",
              "                                                                         Pipeline(steps=[('scaler',\n",
              "                                                                                          StandardScaler()),\n",
              "                                                                                         ('poly_int',\n",
              "                                                                                          PolynomialFeatures(include_bias=False))]),\n",
              "                                                                         ['mileage',\n",
              "                                                                          'age',\n",
              "                                                                          'miles_per_year']),\n",
              "                                                                        ('cat',\n",
              "                                                                         Pipeline(steps=[('ohe',\n",
              "                                                                                          OneHotEncoder(drop='if_binary',\n",
              "                                                                                                        handle_unknown='ignore',\n",
              "                                                                                                        sparse_o...\n",
              "                                                                          'standard_make',\n",
              "                                                                          'standard_model',\n",
              "                                                                          'vehicle_condition',\n",
              "                                                                          'body_type',\n",
              "                                                                          'fuel_type'])],\n",
              "                                                          verbose_feature_names_out=False)),\n",
              "                                       ('feat_sel',\n",
              "                                        SelectKBest(score_func=<function f_regression at 0x7f8e353eb910>)),\n",
              "                                       ('lr_model', ElasticNet(alpha=0.1))]),\n",
              "             param_grid={'feat_sel__k': [5, 10, 15],\n",
              "                         'lr_model__alpha': [0.1, 1, 10],\n",
              "                         'lr_model__l1_ratio': [0.1, 0.5, 0.9]},\n",
              "             scoring='neg_mean_squared_error')"
            ],
            "text/html": [
              "<style>#sk-container-id-19 {color: black;background-color: white;}#sk-container-id-19 pre{padding: 0;}#sk-container-id-19 div.sk-toggleable {background-color: white;}#sk-container-id-19 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-19 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-19 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-19 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-19 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-19 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-19 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-19 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-19 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-19 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-19 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-19 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-19 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-19 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-19 div.sk-item {position: relative;z-index: 1;}#sk-container-id-19 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-19 div.sk-item::before, #sk-container-id-19 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-19 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-19 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-19 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-19 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-19 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-19 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-19 div.sk-label-container {text-align: center;}#sk-container-id-19 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-19 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-19\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                                        ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                                          transformers=[(&#x27;num&#x27;,\n",
              "                                                                         Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                                          StandardScaler()),\n",
              "                                                                                         (&#x27;poly_int&#x27;,\n",
              "                                                                                          PolynomialFeatures(include_bias=False))]),\n",
              "                                                                         [&#x27;mileage&#x27;,\n",
              "                                                                          &#x27;age&#x27;,\n",
              "                                                                          &#x27;miles_per_year&#x27;]),\n",
              "                                                                        (&#x27;cat&#x27;,\n",
              "                                                                         Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                                          OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                                        handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                                        sparse_o...\n",
              "                                                                          &#x27;standard_make&#x27;,\n",
              "                                                                          &#x27;standard_model&#x27;,\n",
              "                                                                          &#x27;vehicle_condition&#x27;,\n",
              "                                                                          &#x27;body_type&#x27;,\n",
              "                                                                          &#x27;fuel_type&#x27;])],\n",
              "                                                          verbose_feature_names_out=False)),\n",
              "                                       (&#x27;feat_sel&#x27;,\n",
              "                                        SelectKBest(score_func=&lt;function f_regression at 0x7f8e353eb910&gt;)),\n",
              "                                       (&#x27;lr_model&#x27;, ElasticNet(alpha=0.1))]),\n",
              "             param_grid={&#x27;feat_sel__k&#x27;: [5, 10, 15],\n",
              "                         &#x27;lr_model__alpha&#x27;: [0.1, 1, 10],\n",
              "                         &#x27;lr_model__l1_ratio&#x27;: [0.1, 0.5, 0.9]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-177\" type=\"checkbox\" ><label for=\"sk-estimator-id-177\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                                        ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                                          transformers=[(&#x27;num&#x27;,\n",
              "                                                                         Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                                          StandardScaler()),\n",
              "                                                                                         (&#x27;poly_int&#x27;,\n",
              "                                                                                          PolynomialFeatures(include_bias=False))]),\n",
              "                                                                         [&#x27;mileage&#x27;,\n",
              "                                                                          &#x27;age&#x27;,\n",
              "                                                                          &#x27;miles_per_year&#x27;]),\n",
              "                                                                        (&#x27;cat&#x27;,\n",
              "                                                                         Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                                          OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                                        handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                                        sparse_o...\n",
              "                                                                          &#x27;standard_make&#x27;,\n",
              "                                                                          &#x27;standard_model&#x27;,\n",
              "                                                                          &#x27;vehicle_condition&#x27;,\n",
              "                                                                          &#x27;body_type&#x27;,\n",
              "                                                                          &#x27;fuel_type&#x27;])],\n",
              "                                                          verbose_feature_names_out=False)),\n",
              "                                       (&#x27;feat_sel&#x27;,\n",
              "                                        SelectKBest(score_func=&lt;function f_regression at 0x7f8e353eb910&gt;)),\n",
              "                                       (&#x27;lr_model&#x27;, ElasticNet(alpha=0.1))]),\n",
              "             param_grid={&#x27;feat_sel__k&#x27;: [5, 10, 15],\n",
              "                         &#x27;lr_model__alpha&#x27;: [0.1, 1, 10],\n",
              "                         &#x27;lr_model__l1_ratio&#x27;: [0.1, 0.5, 0.9]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-178\" type=\"checkbox\" ><label for=\"sk-estimator-id-178\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  (&#x27;poly_int&#x27;,\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  [&#x27;mileage&#x27;, &#x27;age&#x27;,\n",
              "                                                   &#x27;miles_per_year&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                 handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  [&#x27;standard_colour&#x27;,\n",
              "                                                   &#x27;standard_make&#x27;,\n",
              "                                                   &#x27;standard_model&#x27;,\n",
              "                                                   &#x27;vehicle_condition&#x27;,\n",
              "                                                   &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                (&#x27;feat_sel&#x27;,\n",
              "                 SelectKBest(score_func=&lt;function f_regression at 0x7f8e353eb910&gt;)),\n",
              "                (&#x27;lr_model&#x27;, ElasticNet(alpha=0.1))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-179\" type=\"checkbox\" ><label for=\"sk-estimator-id-179\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                  transformers=[(&#x27;num&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
              "                                                 (&#x27;poly_int&#x27;,\n",
              "                                                  PolynomialFeatures(include_bias=False))]),\n",
              "                                 [&#x27;mileage&#x27;, &#x27;age&#x27;, &#x27;miles_per_year&#x27;]),\n",
              "                                (&#x27;cat&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                  OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                sparse_output=False))]),\n",
              "                                 [&#x27;standard_colour&#x27;, &#x27;standard_make&#x27;,\n",
              "                                  &#x27;standard_model&#x27;, &#x27;vehicle_condition&#x27;,\n",
              "                                  &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                  verbose_feature_names_out=False)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-180\" type=\"checkbox\" ><label for=\"sk-estimator-id-180\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;mileage&#x27;, &#x27;age&#x27;, &#x27;miles_per_year&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-181\" type=\"checkbox\" ><label for=\"sk-estimator-id-181\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-182\" type=\"checkbox\" ><label for=\"sk-estimator-id-182\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PolynomialFeatures</label><div class=\"sk-toggleable__content\"><pre>PolynomialFeatures(include_bias=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-183\" type=\"checkbox\" ><label for=\"sk-estimator-id-183\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;standard_colour&#x27;, &#x27;standard_make&#x27;, &#x27;standard_model&#x27;, &#x27;vehicle_condition&#x27;, &#x27;body_type&#x27;, &#x27;fuel_type&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-184\" type=\"checkbox\" ><label for=\"sk-estimator-id-184\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-185\" type=\"checkbox\" ><label for=\"sk-estimator-id-185\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-186\" type=\"checkbox\" ><label for=\"sk-estimator-id-186\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-187\" type=\"checkbox\" ><label for=\"sk-estimator-id-187\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SelectKBest</label><div class=\"sk-toggleable__content\"><pre>SelectKBest(score_func=&lt;function f_regression at 0x7f8e353eb910&gt;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-188\" type=\"checkbox\" ><label for=\"sk-estimator-id-188\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet(alpha=0.1)</pre></div></div></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 165
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the best hyperparameters and score\n",
        "print(f'Best Hyperparameters: {linear_grid.best_params_}')\n",
        "print(f'Best Score: {linear_grid.best_score_}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nEAQ_zZhdLll",
        "outputId": "4d73e6c3-c3b1-4bea-8254-c7da93ec84a9"
      },
      "execution_count": 166,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Hyperparameters: {'feat_sel__k': 15, 'lr_model__alpha': 0.1, 'lr_model__l1_ratio': 0.9}\n",
            "Best Score: -25910669.70798803\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "linear_grid.score(X_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vxvPQEgFgtkH",
        "outputId": "a4b1cd81-7571-4e4c-af2d-744454b9c962"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-26410498.7480852"
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# make predictions on test data using the best model\n",
        "y_pred = linear_grid.predict(X_test)\n",
        "\n",
        "# calculate mean squared error\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "print(\"Mean Squared Error:\", mse)\n",
        "\n",
        "# calculate R-squared\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "print(\"R-squared:\", r2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DkTKaFt6dLWh",
        "outputId": "6c4823a2-712d-4505-d275-5ddc39eace07"
      },
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 26410498.7480852\n",
            "R-squared: 0.635888032254944\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_score = linear_grid.score(X_test, y_test)\n",
        "print(f'Test Score: {test_score}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cY5uKNJAfeV1",
        "outputId": "a4b77f2e-6359-420b-ff7b-605406a0354e"
      },
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Score: -26410498.7480852\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "results = pd.DataFrame(linear_grid.cv_results_)\n",
        "results.columns"
      ],
      "metadata": {
        "id": "hpr20sXaSUJk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "60a26564-6631-48b9-d5af-b86711653e2e"
      },
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['mean_fit_time', 'std_fit_time', 'mean_score_time', 'std_score_time',\n",
              "       'param_feat_sel__k', 'param_lr_model__alpha',\n",
              "       'param_lr_model__l1_ratio', 'params', 'split0_test_score',\n",
              "       'split1_test_score', 'split2_test_score', 'split3_test_score',\n",
              "       'split4_test_score', 'mean_test_score', 'std_test_score',\n",
              "       'rank_test_score'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 170
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "results[['param_lr_model__alpha',\n",
        "       'param_lr_model__l1_ratio', 'mean_test_score', 'std_test_score',\n",
        "       'rank_test_score']]. sort_values('rank_test_score')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 896
        },
        "id": "du_gklrziL-m",
        "outputId": "a8573fdd-538d-43fb-9b97-b7c494096250"
      },
      "execution_count": 172,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   param_lr_model__alpha param_lr_model__l1_ratio  mean_test_score  \\\n",
              "20                   0.1                      0.9    -2.591067e+07   \n",
              "19                   0.1                      0.5    -2.719852e+07   \n",
              "18                   0.1                      0.1    -2.819165e+07   \n",
              "23                     1                      0.9    -2.842892e+07   \n",
              "11                   0.1                      0.9    -3.001094e+07   \n",
              "10                   0.1                      0.5    -3.052641e+07   \n",
              "9                    0.1                      0.1    -3.120818e+07   \n",
              "14                     1                      0.9    -3.138871e+07   \n",
              "2                    0.1                      0.9    -3.354324e+07   \n",
              "1                    0.1                      0.5    -3.391612e+07   \n",
              "0                    0.1                      0.1    -3.440361e+07   \n",
              "5                      1                      0.9    -3.453241e+07   \n",
              "22                     1                      0.5    -3.524760e+07   \n",
              "13                     1                      0.5    -3.714418e+07   \n",
              "4                      1                      0.5    -3.882841e+07   \n",
              "21                     1                      0.1    -3.948775e+07   \n",
              "26                    10                      0.9    -4.039761e+07   \n",
              "12                     1                      0.1    -4.082330e+07   \n",
              "17                    10                      0.9    -4.161012e+07   \n",
              "3                      1                      0.1    -4.184508e+07   \n",
              "8                     10                      0.9    -4.252491e+07   \n",
              "25                    10                      0.5    -5.385135e+07   \n",
              "16                    10                      0.5    -5.422679e+07   \n",
              "7                     10                      0.5    -5.515302e+07   \n",
              "24                    10                      0.1    -5.825296e+07   \n",
              "15                    10                      0.1    -5.858874e+07   \n",
              "6                     10                      0.1    -5.965925e+07   \n",
              "\n",
              "    std_test_score  rank_test_score  \n",
              "20    1.190535e+06                1  \n",
              "19    1.237670e+06                2  \n",
              "18    1.270822e+06                3  \n",
              "23    1.278079e+06                4  \n",
              "11    1.107825e+06                5  \n",
              "10    1.115317e+06                6  \n",
              "9     1.128951e+06                7  \n",
              "14    1.132526e+06                8  \n",
              "2     1.008665e+06                9  \n",
              "1     1.039160e+06               10  \n",
              "0     1.084199e+06               11  \n",
              "5     1.097472e+06               12  \n",
              "22    1.432060e+06               13  \n",
              "13    1.222790e+06               14  \n",
              "4     1.522209e+06               15  \n",
              "21    1.506113e+06               16  \n",
              "26    1.521798e+06               17  \n",
              "12    1.295414e+06               18  \n",
              "17    1.311706e+06               19  \n",
              "3     1.690945e+06               20  \n",
              "8     1.716401e+06               21  \n",
              "25    1.728823e+06               22  \n",
              "16    1.774062e+06               23  \n",
              "7     1.900139e+06               24  \n",
              "24    1.795809e+06               25  \n",
              "15    1.937282e+06               26  \n",
              "6     1.921316e+06               27  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7021efda-4f4d-404d-958f-4b667afb2022\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>param_lr_model__alpha</th>\n",
              "      <th>param_lr_model__l1_ratio</th>\n",
              "      <th>mean_test_score</th>\n",
              "      <th>std_test_score</th>\n",
              "      <th>rank_test_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>0.1</td>\n",
              "      <td>0.9</td>\n",
              "      <td>-2.591067e+07</td>\n",
              "      <td>1.190535e+06</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>0.1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>-2.719852e+07</td>\n",
              "      <td>1.237670e+06</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-2.819165e+07</td>\n",
              "      <td>1.270822e+06</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>1</td>\n",
              "      <td>0.9</td>\n",
              "      <td>-2.842892e+07</td>\n",
              "      <td>1.278079e+06</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>0.1</td>\n",
              "      <td>0.9</td>\n",
              "      <td>-3.001094e+07</td>\n",
              "      <td>1.107825e+06</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0.1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>-3.052641e+07</td>\n",
              "      <td>1.115317e+06</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-3.120818e+07</td>\n",
              "      <td>1.128951e+06</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>1</td>\n",
              "      <td>0.9</td>\n",
              "      <td>-3.138871e+07</td>\n",
              "      <td>1.132526e+06</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.1</td>\n",
              "      <td>0.9</td>\n",
              "      <td>-3.354324e+07</td>\n",
              "      <td>1.008665e+06</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>-3.391612e+07</td>\n",
              "      <td>1.039160e+06</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-3.440361e+07</td>\n",
              "      <td>1.084199e+06</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1</td>\n",
              "      <td>0.9</td>\n",
              "      <td>-3.453241e+07</td>\n",
              "      <td>1.097472e+06</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>-3.524760e+07</td>\n",
              "      <td>1.432060e+06</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>-3.714418e+07</td>\n",
              "      <td>1.222790e+06</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0.5</td>\n",
              "      <td>-3.882841e+07</td>\n",
              "      <td>1.522209e+06</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-3.948775e+07</td>\n",
              "      <td>1.506113e+06</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>10</td>\n",
              "      <td>0.9</td>\n",
              "      <td>-4.039761e+07</td>\n",
              "      <td>1.521798e+06</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-4.082330e+07</td>\n",
              "      <td>1.295414e+06</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>10</td>\n",
              "      <td>0.9</td>\n",
              "      <td>-4.161012e+07</td>\n",
              "      <td>1.311706e+06</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-4.184508e+07</td>\n",
              "      <td>1.690945e+06</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>10</td>\n",
              "      <td>0.9</td>\n",
              "      <td>-4.252491e+07</td>\n",
              "      <td>1.716401e+06</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>10</td>\n",
              "      <td>0.5</td>\n",
              "      <td>-5.385135e+07</td>\n",
              "      <td>1.728823e+06</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>10</td>\n",
              "      <td>0.5</td>\n",
              "      <td>-5.422679e+07</td>\n",
              "      <td>1.774062e+06</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>10</td>\n",
              "      <td>0.5</td>\n",
              "      <td>-5.515302e+07</td>\n",
              "      <td>1.900139e+06</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>10</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-5.825296e+07</td>\n",
              "      <td>1.795809e+06</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>10</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-5.858874e+07</td>\n",
              "      <td>1.937282e+06</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>10</td>\n",
              "      <td>0.1</td>\n",
              "      <td>-5.965925e+07</td>\n",
              "      <td>1.921316e+06</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7021efda-4f4d-404d-958f-4b667afb2022')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7021efda-4f4d-404d-958f-4b667afb2022 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7021efda-4f4d-404d-958f-4b667afb2022');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 172
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "oWF5RBpHlXKp"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "fyqxN6z8lbYE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. Random Forest Regressor**"
      ],
      "metadata": {
        "id": "FefUq72KlWby"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "regressor_model = RandomForestRegressor(\n",
        "    n_estimators=100, max_depth=8\n",
        ")\n",
        "\n",
        "regressor_pipe = Pipeline(\n",
        "    steps=[\n",
        "        ('preprocessor', preprocessor), \n",
        "        ('variance_selector', VarianceThreshold(threshold=0.01)), \n",
        "        #('feat_sel', SelectKBest(f_regression, k=10)), \n",
        "        #('select', RFECV(estimator=RandomForestRegressor(), cv=3)),\n",
        "        #('reducer', PCA(n_components=5)),\n",
        "        ('regressor_model', RandomForestRegressor())\n",
        "    ]\n",
        ").set_output(transform='pandas')"
      ],
      "metadata": {
        "id": "4kBu4qpdiLrc"
      },
      "execution_count": 191,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "regressor_pipe.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 262
        },
        "id": "8MWux_3piLMn",
        "outputId": "cf1b09e5-40aa-44f2-f74e-224de81a9e1d"
      },
      "execution_count": 192,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('preprocessor',\n",
              "                 ColumnTransformer(remainder='passthrough',\n",
              "                                   transformers=[('num',\n",
              "                                                  Pipeline(steps=[('scaler',\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  ('poly_int',\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  ['mileage', 'age',\n",
              "                                                   'miles_per_year']),\n",
              "                                                 ('cat',\n",
              "                                                  Pipeline(steps=[('ohe',\n",
              "                                                                   OneHotEncoder(drop='if_binary',\n",
              "                                                                                 handle_unknown='ignore',\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  ['standard_colour',\n",
              "                                                   'standard_make',\n",
              "                                                   'standard_model',\n",
              "                                                   'vehicle_condition',\n",
              "                                                   'body_type', 'fuel_type'])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                ('variance_selector', VarianceThreshold(threshold=0.01)),\n",
              "                ('regressor_model', RandomForestRegressor())])"
            ],
            "text/html": [
              "<style>#sk-container-id-24 {color: black;background-color: white;}#sk-container-id-24 pre{padding: 0;}#sk-container-id-24 div.sk-toggleable {background-color: white;}#sk-container-id-24 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-24 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-24 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-24 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-24 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-24 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-24 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-24 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-24 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-24 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-24 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-24 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-24 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-24 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-24 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-24 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-24 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-24 div.sk-item {position: relative;z-index: 1;}#sk-container-id-24 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-24 div.sk-item::before, #sk-container-id-24 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-24 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-24 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-24 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-24 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-24 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-24 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-24 div.sk-label-container {text-align: center;}#sk-container-id-24 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-24 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-24\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  (&#x27;poly_int&#x27;,\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  [&#x27;mileage&#x27;, &#x27;age&#x27;,\n",
              "                                                   &#x27;miles_per_year&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                 handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  [&#x27;standard_colour&#x27;,\n",
              "                                                   &#x27;standard_make&#x27;,\n",
              "                                                   &#x27;standard_model&#x27;,\n",
              "                                                   &#x27;vehicle_condition&#x27;,\n",
              "                                                   &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                (&#x27;variance_selector&#x27;, VarianceThreshold(threshold=0.01)),\n",
              "                (&#x27;regressor_model&#x27;, RandomForestRegressor())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-232\" type=\"checkbox\" ><label for=\"sk-estimator-id-232\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;num&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler()),\n",
              "                                                                  (&#x27;poly_int&#x27;,\n",
              "                                                                   PolynomialFeatures(include_bias=False))]),\n",
              "                                                  [&#x27;mileage&#x27;, &#x27;age&#x27;,\n",
              "                                                   &#x27;miles_per_year&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                                   OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                                 handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                                 sparse_output=False))]),\n",
              "                                                  [&#x27;standard_colour&#x27;,\n",
              "                                                   &#x27;standard_make&#x27;,\n",
              "                                                   &#x27;standard_model&#x27;,\n",
              "                                                   &#x27;vehicle_condition&#x27;,\n",
              "                                                   &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                                   verbose_feature_names_out=False)),\n",
              "                (&#x27;variance_selector&#x27;, VarianceThreshold(threshold=0.01)),\n",
              "                (&#x27;regressor_model&#x27;, RandomForestRegressor())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-233\" type=\"checkbox\" ><label for=\"sk-estimator-id-233\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                  transformers=[(&#x27;num&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
              "                                                 (&#x27;poly_int&#x27;,\n",
              "                                                  PolynomialFeatures(include_bias=False))]),\n",
              "                                 [&#x27;mileage&#x27;, &#x27;age&#x27;, &#x27;miles_per_year&#x27;]),\n",
              "                                (&#x27;cat&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;ohe&#x27;,\n",
              "                                                  OneHotEncoder(drop=&#x27;if_binary&#x27;,\n",
              "                                                                handle_unknown=&#x27;ignore&#x27;,\n",
              "                                                                sparse_output=False))]),\n",
              "                                 [&#x27;standard_colour&#x27;, &#x27;standard_make&#x27;,\n",
              "                                  &#x27;standard_model&#x27;, &#x27;vehicle_condition&#x27;,\n",
              "                                  &#x27;body_type&#x27;, &#x27;fuel_type&#x27;])],\n",
              "                  verbose_feature_names_out=False)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-234\" type=\"checkbox\" ><label for=\"sk-estimator-id-234\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;mileage&#x27;, &#x27;age&#x27;, &#x27;miles_per_year&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-235\" type=\"checkbox\" ><label for=\"sk-estimator-id-235\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-236\" type=\"checkbox\" ><label for=\"sk-estimator-id-236\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PolynomialFeatures</label><div class=\"sk-toggleable__content\"><pre>PolynomialFeatures(include_bias=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-237\" type=\"checkbox\" ><label for=\"sk-estimator-id-237\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;standard_colour&#x27;, &#x27;standard_make&#x27;, &#x27;standard_model&#x27;, &#x27;vehicle_condition&#x27;, &#x27;body_type&#x27;, &#x27;fuel_type&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-238\" type=\"checkbox\" ><label for=\"sk-estimator-id-238\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-239\" type=\"checkbox\" ><label for=\"sk-estimator-id-239\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-240\" type=\"checkbox\" ><label for=\"sk-estimator-id-240\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-241\" type=\"checkbox\" ><label for=\"sk-estimator-id-241\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VarianceThreshold</label><div class=\"sk-toggleable__content\"><pre>VarianceThreshold(threshold=0.01)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-242\" type=\"checkbox\" ><label for=\"sk-estimator-id-242\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 192
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "regressor_pipe.score(X_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TEUKKbuFovc3",
        "outputId": "0c39401c-06e1-4200-a884-ef33501b6356"
      },
      "execution_count": 193,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8081494109542908"
            ]
          },
          "metadata": {},
          "execution_count": 193
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Hyperparameter Tuning - with GridSearch CV: Random Forest Regressor**"
      ],
      "metadata": {
        "id": "ZNT9ks1jp-Qd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rfr_params = {\n",
        "    'regressor_model__n_estimators': [100, 200, 300],\n",
        "    'regressor_model__max_depth': [5, 10, 15],\n",
        "    'regressor_model__max_features': ['sqrt', 'log2']\n",
        "}"
      ],
      "metadata": {
        "id": "X58y-rsIqIMR"
      },
      "execution_count": 198,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rfr_grid = GridSearchCV(regressor_pipe, \n",
        "                    param_grid = rfr_params, \n",
        "                    cv=5)"
      ],
      "metadata": {
        "id": "KVTSV2EVqWLF"
      },
      "execution_count": 199,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rfr_grid.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 318
        },
        "id": "d_Ws_R6mqVoX",
        "outputId": "c84ff187-c525-40cc-9889-9680b8599640"
      },
      "execution_count": 200,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-200-11f7db19df33>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrfr_grid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    872\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    873\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 874\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    875\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    876\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    819\u001b[0m                     )\n\u001b[1;32m    820\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 821\u001b[0;31m                 out = parallel(\n\u001b[0m\u001b[1;32m    822\u001b[0m                     delayed(_fit_and_score)(\n\u001b[1;32m    823\u001b[0m                         \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_estimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         )\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1086\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1088\u001b[0;31m             \u001b[0;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1089\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1090\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    899\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    900\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 901\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    902\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    903\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    817\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    818\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 819\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    820\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    821\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    595\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    596\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 597\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    598\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    599\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    286\u001b[0m         \u001b[0;31m# change the default number of processes to -1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 288\u001b[0;31m             return [func(*args, **kwargs)\n\u001b[0m\u001b[1;32m    289\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    286\u001b[0m         \u001b[0;31m# change the default number of processes to -1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 288\u001b[0;31m             return [func(*args, **kwargs)\n\u001b[0m\u001b[1;32m    289\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 123\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)\u001b[0m\n\u001b[1;32m    684\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    685\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 686\u001b[0;31m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    687\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    403\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_final_estimator\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"passthrough\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    404\u001b[0m                 \u001b[0mfit_params_last_step\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfit_params_steps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msteps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 405\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_final_estimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params_last_step\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    406\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    407\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    471\u001b[0m             \u001b[0;31m# parallel_backend contexts set at a higher level,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    472\u001b[0m             \u001b[0;31m# since correctness does not rely on using threads.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 473\u001b[0;31m             trees = Parallel(\n\u001b[0m\u001b[1;32m    474\u001b[0m                 \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    475\u001b[0m                 \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         )\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1086\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1088\u001b[0;31m             \u001b[0;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1089\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1090\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    899\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    900\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 901\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    902\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    903\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    817\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    818\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 819\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    820\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    821\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    595\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    596\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 597\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    598\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    599\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    286\u001b[0m         \u001b[0;31m# change the default number of processes to -1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 288\u001b[0;31m             return [func(*args, **kwargs)\n\u001b[0m\u001b[1;32m    289\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    286\u001b[0m         \u001b[0;31m# change the default number of processes to -1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 288\u001b[0;31m             return [func(*args, **kwargs)\n\u001b[0m\u001b[1;32m    289\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 123\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_parallel_build_trees\u001b[0;34m(tree, bootstrap, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight, n_samples_bootstrap)\u001b[0m\n\u001b[1;32m    182\u001b[0m             \u001b[0mcurr_sample_weight\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0mcompute_sample_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"balanced\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 184\u001b[0;31m         \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurr_sample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    185\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m         \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m   1245\u001b[0m         \"\"\"\n\u001b[1;32m   1246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1247\u001b[0;31m         super().fit(\n\u001b[0m\u001b[1;32m   1248\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1249\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m    377\u001b[0m             )\n\u001b[1;32m    378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 379\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    380\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    381\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cwi9aKEnqU6L"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOPAvO++8GC/ILYQ9WnWcHc",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}